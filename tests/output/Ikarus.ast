[
    Const(
        ConstDeclaration {
            name: IKARUS_VERSION,
            typ: int,
            initializer: Int(
                10201,
            ),
        },
    ),
    Func(
        Function {
            name: MEM_CheckVersion,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: base,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: major,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: minor,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: GT,
                                                left: Identifier(
                                                    VarAccess:  major,
                                                ),
                                                right: Int(
                                                    99,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: GT,
                                                left: Identifier(
                                                    VarAccess:  minor,
                                                ),
                                                right: Int(
                                                    99,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  false,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: LE,
                                left: Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Plus,
                                                left: Binary(
                                                    BinaryExpression {
                                                        op: Multiply,
                                                        left: Identifier(
                                                            VarAccess:  base,
                                                        ),
                                                        right: Int(
                                                            10000,
                                                        ),
                                                    },
                                                ),
                                                right: Binary(
                                                    BinaryExpression {
                                                        op: Multiply,
                                                        left: Identifier(
                                                            VarAccess:  major,
                                                        ),
                                                        right: Int(
                                                            100,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Identifier(
                                            VarAccess:  minor,
                                        ),
                                    },
                                ),
                                right: Identifier(
                                    VarAccess:  IKARUS_VERSION,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Var(
        [
            VarDeclaration {
                typ: int,
                name: MEMINT_ForceErrorBox,
                array_size: None,
            },
        ],
    ),
    Func(
        Function {
            name: MEM_SendToSpy,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: errorType,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: text,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: PrintDebug,
                            params: [
                                Call(
                                    Call {
                                        func: ConcatStrings,
                                        params: [
                                            Identifier(
                                                VarAccess:  text,
                                            ),
                                            String(
                                                <<< (This is a preliminary printing variant, use MEM_InitAll to get neat 'Q:' prefixed messages.) >>>,
                                            ),
                                        ],
                                    },
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ErrorBox,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: text,
                    array_size: None,
                },
            ],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_ForceErrorBox,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  true,
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_SendToSpy,
                            params: [
                                Identifier(
                                    VarAccess:  zERR_TYPE_FAULT,
                                ),
                                Identifier(
                                    VarAccess:  text,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_PrintStackTrace,
            typ: void,
            params: [],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: string,
                            name: error,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  error,
                        op: Eq,
                        exp: String(
                            MEM_PrintStackTrace: Cannot print the stacktrace before MEM_InitAll was called!,
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_SendToSpy,
                            params: [
                                Identifier(
                                    VarAccess:  zERR_TYPE_FAULT,
                                ),
                                Identifier(
                                    VarAccess:  error,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_HandleError,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: errorType,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: text,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: GE,
                                        left: Identifier(
                                            VarAccess:  errorType,
                                        ),
                                        right: Identifier(
                                            VarAccess:  zERR_PrintStackTrace,
                                        ),
                                    },
                                ),
                                body: [
                                    ConstDeclaration(
                                        ConstDeclaration {
                                            name: once,
                                            typ: int,
                                            initializer: Int(
                                                0,
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: Or,
                                                            left: Unary(
                                                                UnaryExpression {
                                                                    op: Negate,
                                                                    right: Identifier(
                                                                        VarAccess:  once,
                                                                    ),
                                                                },
                                                            ),
                                                            right: Unary(
                                                                UnaryExpression {
                                                                    op: Negate,
                                                                    right: Identifier(
                                                                        VarAccess:  zERR_StackTraceOnlyForFirst,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  once,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  true,
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_PrintStackTrace,
                                                                    params: [],
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: GE,
                                        left: Identifier(
                                            VarAccess:  errorType,
                                        ),
                                        right: Identifier(
                                            VarAccess:  zERR_ReportToZSpy,
                                        ),
                                    },
                                ),
                                body: [
                                    ConstDeclaration(
                                        ConstDeclaration {
                                            name: errorBoxOnce,
                                            typ: int,
                                            initializer: Int(
                                                0,
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: And,
                                                            left: Binary(
                                                                BinaryExpression {
                                                                    op: GE,
                                                                    left: Identifier(
                                                                        VarAccess:  errorType,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  zERR_ShowErrorBox,
                                                                    ),
                                                                },
                                                            ),
                                                            right: Binary(
                                                                BinaryExpression {
                                                                    op: Or,
                                                                    left: Unary(
                                                                        UnaryExpression {
                                                                            op: Negate,
                                                                            right: Identifier(
                                                                                VarAccess:  zERR_ErrorBoxOnlyForFirst,
                                                                            ),
                                                                        },
                                                                    ),
                                                                    right: Unary(
                                                                        UnaryExpression {
                                                                            op: Negate,
                                                                            right: Identifier(
                                                                                VarAccess:  errorBoxOnce,
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  MEMINT_ForceErrorBox,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  true,
                                                                ),
                                                            },
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  errorBoxOnce,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  true,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_SendToSpy,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  errorType,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  text,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_Error,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: error,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEMINT_HandleError,
                            params: [
                                Identifier(
                                    VarAccess:  zERR_TYPE_FAULT,
                                ),
                                Identifier(
                                    VarAccess:  error,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_Warn,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: warn,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEMINT_HandleError,
                            params: [
                                Identifier(
                                    VarAccess:  zERR_TYPE_WARN,
                                ),
                                Identifier(
                                    VarAccess:  warn,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_Info,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: info,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: And,
                                        left: Binary(
                                            BinaryExpression {
                                                op: GT,
                                                left: Identifier(
                                                    VarAccess:  zERR_ReportToZSpy,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  zERR_TYPE_INFO,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: GT,
                                                left: Identifier(
                                                    VarAccess:  zERR_PrintStackTrace,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  zERR_TYPE_INFO,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_HandleError,
                            params: [
                                Identifier(
                                    VarAccess:  zERR_TYPE_INFO,
                                ),
                                Identifier(
                                    VarAccess:  info,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_AssertFail,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: assertFailText,
                    array_size: None,
                },
            ],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  assertFailText,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ConcatStrings,
                                params: [
                                    String(
                                        Assertion failed. Report this: ,
                                    ),
                                    Identifier(
                                        VarAccess:  assertFailText,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_Error,
                            params: [
                                Identifier(
                                    VarAccess:  assertFailText,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_Debug,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: message,
                    array_size: None,
                },
            ],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  message,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ConcatStrings,
                                params: [
                                    Identifier(
                                        VarAccess:  zERR_DEBUG_PREFIX,
                                    ),
                                    Identifier(
                                        VarAccess:  message,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  zERR_DEBUG_TOSCREEN,
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: Print,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  message,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  zERR_DEBUG_ERRORBOX,
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEMINT_ForceErrorBox,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  true,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Identifier(
                                            VarAccess:  zERR_DEBUG_ERRORBOX,
                                        ),
                                        right: Identifier(
                                            VarAccess:  zERR_DEBUG_TOSPY,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_SendToSpy,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  zERR_DEBUG_TYPE,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  message,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Class(
        Class {
            name: MEMINT_HelperClass,
            members: [],
        },
    ),
    Var(
        [
            VarDeclaration {
                typ: MEMINT_HelperClass,
                name: MEMINT_INSTUNASSIGNED,
                array_size: None,
            },
        ],
    ),
    Var(
        [
            VarDeclaration {
                typ: MEMINT_HelperClass,
                name: MEMINT_PopDump,
                array_size: None,
            },
        ],
    ),
    Func(
        Function {
            name: MEMINT_StackPushInt,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: val,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  val,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_StackPushString,
            typ: string,
            params: [
                VarDeclaration {
                    typ: string,
                    name: val,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  val,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_StackPopInstSub,
            typ: MEMINT_HelperClass,
            params: [],
            body: [],
        },
    ),
    Func(
        Function {
            name: MEMINT_StackPopInst,
            typ: void,
            params: [],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_PopDump,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEMINT_StackPopInstSub,
                                params: [],
                            },
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_StackPushInst,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: val,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushInt,
                            params: [
                                Identifier(
                                    VarAccess:  val,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPopInst,
                            params: [],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_StackPushVar,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: adr,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushInst,
                            params: [
                                Identifier(
                                    VarAccess:  adr,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushInst,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHVAR,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_PopInt,
            typ: int,
            params: [],
            body: [],
        },
    ),
    Func(
        Function {
            name: MEMINT_PopString,
            typ: string,
            params: [],
            body: [],
        },
    ),
    Func(
        Function {
            name: MEMINT_StackPopInt,
            typ: int,
            params: [],
            body: [],
        },
    ),
    Func(
        Function {
            name: MEMINT_StackPopString,
            typ: string,
            params: [],
            body: [],
        },
    ),
    Func(
        Function {
            name: MEMINT_StackPopInstAsInt,
            typ: int,
            params: [],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushInst,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHINT,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Inst(
        [
            Instance {
                name: MEM_HELPER_INST,
                class: C_NPC,
                body: [
                    Ass(
                        Assignment {
                            var: VarAccess:  name,
                            op: Eq,
                            exp: Identifier(
                                VarAccess:  MEM_HELPER_NAME,
                            ),
                        },
                    ),
                    Ass(
                        Assignment {
                            var: VarAccess:  id,
                            op: Eq,
                            exp: Int(
                                42,
                            ),
                        },
                    ),
                    Ass(
                        Assignment {
                            var: VarAccess:  flags,
                            op: Eq,
                            exp: Int(
                                2,
                            ),
                        },
                    ),
                    Ass(
                        Assignment {
                            var: VarAccess:  attribute[Identifier(
                                VarAccess:  ATR_HITPOINTS_MAX,
                            )],
                            op: Eq,
                            exp: Int(
                                2,
                            ),
                        },
                    ),
                    Ass(
                        Assignment {
                            var: VarAccess:  attribute[Identifier(
                                VarAccess:  ATR_HITPOINTS,
                            )],
                            op: Eq,
                            exp: Int(
                                2,
                            ),
                        },
                    ),
                    Exp(
                        Call(
                            Call {
                                func: Mdl_SetVisual,
                                params: [
                                    Identifier(
                                        VarAccess:  self,
                                    ),
                                    String(
                                        Meatbug.mds,
                                    ),
                                ],
                            },
                        ),
                    ),
                ],
            },
        ],
    ),
    Var(
        [
            VarDeclaration {
                typ: oCNpc,
                name: MEM_Helper,
                array_size: None,
            },
        ],
    ),
    Func(
        Function {
            name: MEMINT_GetMemHelper,
            typ: void,
            params: [],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_Helper,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: Hlp_GetNpc,
                                params: [
                                    Identifier(
                                        VarAccess:  MEM_HELPER_INST,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Call(
                                            Call {
                                                func: Hlp_IsValidNpc,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  MEM_Helper,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: C_NPC,
                                                name: selfBak,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  selfBak,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: Hlp_GetNpc,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  self,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: Wld_InsertNpc,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  MEM_HELPER_INST,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  MEM_FARFARAWAY,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_Helper,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: Hlp_GetNpc,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  self,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  self,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: Hlp_GetNpc,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  selfBak,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_SwitchG1G2,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: g1Val,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: g2Val,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  GOTHIC_BASE_VERSION,
                                        ),
                                        right: Int(
                                            1,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  g1Val,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                ReturnStatement(
                                    Some(
                                        Identifier(
                                            VarAccess:  g2Val,
                                        ),
                                    ),
                                ),
                            ],
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ReadInt,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: address,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  address,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_ReadInt: address is NULL,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushVar,
                            params: [
                                Identifier(
                                    VarAccess:  address,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushInt,
                            params: [
                                Call(
                                    Call {
                                        func: MEMINT_StackPopInt,
                                        params: [],
                                    },
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ReadString,
            typ: string,
            params: [
                VarDeclaration {
                    typ: int,
                    name: address,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  address,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_ReadString: address is NULL,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            String(
                                                ,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushVar,
                            params: [
                                Identifier(
                                    VarAccess:  address,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_OldWriteInt,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: address,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: val,
                    array_size: None,
                },
            ],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_Helper.enemy,
                        op: Eq,
                        exp: Binary(
                            BinaryExpression {
                                op: Minus,
                                left: Identifier(
                                    VarAccess:  address,
                                ),
                                right: Identifier(
                                    VarAccess:  MEM_NpcID_Offset,
                                ),
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: res,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  res,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: Npc_GetTarget,
                                params: [
                                    Identifier(
                                        VarAccess:  MEM_Helper,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  other.id,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  val,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_PrepareAssignments,
            typ: void,
            params: [],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: symTab,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: MEMINT_Assign_Sym,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: MEMINT_Assign_StackPos,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: stackStart,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  symTab,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  ContentParserAddress,
                                            ),
                                            right: Identifier(
                                                VarAccess:  zCParser_symtab_table_array_offset,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  stackStart,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  ContentParserAddress,
                                            ),
                                            right: Identifier(
                                                VarAccess:  zCParser_stack_offset,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_Assign_Sym,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  symTab,
                                            ),
                                            right: Binary(
                                                BinaryExpression {
                                                    op: Multiply,
                                                    left: Int(
                                                        4,
                                                    ),
                                                    right: Binary(
                                                        BinaryExpression {
                                                            op: Plus,
                                                            left: Identifier(
                                                                VarAccess:  MEMINT_AssignPredecessor,
                                                            ),
                                                            right: Int(
                                                                1,
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_Assign_StackPos,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  MEMINT_Assign_Sym,
                                            ),
                                            right: Identifier(
                                                VarAccess:  zCParSymbol_content_offset,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_GetMemHelper,
                            params: [],
                        },
                    ),
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: C_NPC,
                            name: othBak,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  othBak,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: Hlp_GetNpc,
                                params: [
                                    Identifier(
                                        VarAccess:  other,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OldWriteInt,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  stackStart,
                                        ),
                                        right: Identifier(
                                            VarAccess:  MEMINT_Assign_StackPos,
                                        ),
                                    },
                                ),
                                Binary(
                                    BinaryExpression {
                                        op: BitOr,
                                        left: Binary(
                                            BinaryExpression {
                                                op: BitOr,
                                                left: Binary(
                                                    BinaryExpression {
                                                        op: BitOr,
                                                        left: Binary(
                                                            BinaryExpression {
                                                                op: LSL,
                                                                left: Identifier(
                                                                    VarAccess:  zPAR_OP_IS,
                                                                ),
                                                                right: Int(
                                                                    0,
                                                                ),
                                                            },
                                                        ),
                                                        right: Binary(
                                                            BinaryExpression {
                                                                op: LSL,
                                                                left: Identifier(
                                                                    VarAccess:  zPAR_TOK_RET,
                                                                ),
                                                                right: Int(
                                                                    8,
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                right: Binary(
                                                    BinaryExpression {
                                                        op: LSL,
                                                        left: Identifier(
                                                            VarAccess:  zPAR_TOK_RET,
                                                        ),
                                                        right: Int(
                                                            16,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: LSL,
                                                left: Identifier(
                                                    VarAccess:  zPAR_TOK_RET,
                                                ),
                                                right: Int(
                                                    24,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OldWriteInt,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Plus,
                                                left: Identifier(
                                                    VarAccess:  stackStart,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  MEMINT_Assign_StackPos,
                                                ),
                                            },
                                        ),
                                        right: Int(
                                            4,
                                        ),
                                    },
                                ),
                                Binary(
                                    BinaryExpression {
                                        op: BitOr,
                                        left: Binary(
                                            BinaryExpression {
                                                op: BitOr,
                                                left: Binary(
                                                    BinaryExpression {
                                                        op: BitOr,
                                                        left: Binary(
                                                            BinaryExpression {
                                                                op: LSL,
                                                                left: Identifier(
                                                                    VarAccess:  zPAR_TOK_RET,
                                                                ),
                                                                right: Int(
                                                                    0,
                                                                ),
                                                            },
                                                        ),
                                                        right: Binary(
                                                            BinaryExpression {
                                                                op: LSL,
                                                                left: Identifier(
                                                                    VarAccess:  zPAR_OP_IS,
                                                                ),
                                                                right: Int(
                                                                    8,
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                right: Binary(
                                                    BinaryExpression {
                                                        op: LSL,
                                                        left: Identifier(
                                                            VarAccess:  zPAR_TOK_RET,
                                                        ),
                                                        right: Int(
                                                            16,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: LSL,
                                                left: Identifier(
                                                    VarAccess:  zPAR_TOK_RET,
                                                ),
                                                right: Int(
                                                    24,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OldWriteInt,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Plus,
                                                left: Identifier(
                                                    VarAccess:  stackStart,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  MEMINT_Assign_StackPos,
                                                ),
                                            },
                                        ),
                                        right: Int(
                                            8,
                                        ),
                                    },
                                ),
                                Binary(
                                    BinaryExpression {
                                        op: BitOr,
                                        left: Binary(
                                            BinaryExpression {
                                                op: BitOr,
                                                left: Binary(
                                                    BinaryExpression {
                                                        op: BitOr,
                                                        left: Binary(
                                                            BinaryExpression {
                                                                op: LSL,
                                                                left: Identifier(
                                                                    VarAccess:  zPAR_TOK_ASSIGNSTR,
                                                                ),
                                                                right: Int(
                                                                    0,
                                                                ),
                                                            },
                                                        ),
                                                        right: Binary(
                                                            BinaryExpression {
                                                                op: LSL,
                                                                left: Identifier(
                                                                    VarAccess:  zPAR_TOK_RET,
                                                                ),
                                                                right: Int(
                                                                    8,
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                right: Binary(
                                                    BinaryExpression {
                                                        op: LSL,
                                                        left: Identifier(
                                                            VarAccess:  zPAR_TOK_RET,
                                                        ),
                                                        right: Int(
                                                            16,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: LSL,
                                                left: Identifier(
                                                    VarAccess:  zPAR_TOK_RET,
                                                ),
                                                right: Int(
                                                    24,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OldWriteInt,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Plus,
                                                left: Identifier(
                                                    VarAccess:  stackStart,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  MEMINT_Assign_StackPos,
                                                ),
                                            },
                                        ),
                                        right: Int(
                                            12,
                                        ),
                                    },
                                ),
                                Binary(
                                    BinaryExpression {
                                        op: BitOr,
                                        left: Binary(
                                            BinaryExpression {
                                                op: BitOr,
                                                left: Binary(
                                                    BinaryExpression {
                                                        op: BitOr,
                                                        left: Binary(
                                                            BinaryExpression {
                                                                op: LSL,
                                                                left: Identifier(
                                                                    VarAccess:  zPAR_TOK_RET,
                                                                ),
                                                                right: Int(
                                                                    0,
                                                                ),
                                                            },
                                                        ),
                                                        right: Binary(
                                                            BinaryExpression {
                                                                op: LSL,
                                                                left: Identifier(
                                                                    VarAccess:  zPAR_TOK_ASSIGNSTR,
                                                                ),
                                                                right: Int(
                                                                    8,
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                right: Binary(
                                                    BinaryExpression {
                                                        op: LSL,
                                                        left: Identifier(
                                                            VarAccess:  zPAR_TOK_RET,
                                                        ),
                                                        right: Int(
                                                            16,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: LSL,
                                                left: Identifier(
                                                    VarAccess:  zPAR_TOK_RET,
                                                ),
                                                right: Int(
                                                    24,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_Helper.enemy,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  other,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: Hlp_GetNpc,
                                params: [
                                    Identifier(
                                        VarAccess:  othBak,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
            ],
        },
    ),
    Var(
        [
            VarDeclaration {
                typ: MEMINT_HelperClass,
                name: MEMINT_AssignPredecessor,
                array_size: None,
            },
        ],
    ),
    Func(
        Function {
            name: MEMINT_Assign,
            typ: void,
            params: [],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEMINT_PrepareAssignments,
                            params: [],
                        },
                    ),
                ),
                ReturnStatement(
                    None,
                ),
                ReturnStatement(
                    None,
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_StrAssign,
            typ: void,
            params: [],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEMINT_PrepareAssignments,
                            params: [],
                        },
                    ),
                ),
                ReturnStatement(
                    None,
                ),
                ReturnStatement(
                    None,
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_WriteInt,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: address,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: val,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  address,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_WriteInt: address is NULL,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushInt,
                            params: [
                                Identifier(
                                    VarAccess:  val,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushVar,
                            params: [
                                Identifier(
                                    VarAccess:  address,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_Assign,
                            params: [],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_WriteString,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: address,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: val,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  address,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_WriteString: address is NULL,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushString,
                            params: [
                                Identifier(
                                    VarAccess:  val,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushVar,
                            params: [
                                Identifier(
                                    VarAccess:  address,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StrAssign,
                            params: [],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ReadByte,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: adr,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: BitAnd,
                                left: Call(
                                    Call {
                                        func: MEM_ReadInt,
                                        params: [
                                            Identifier(
                                                VarAccess:  adr,
                                            ),
                                        ],
                                    },
                                ),
                                right: Int(
                                    255,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_WriteByte,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: adr,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: val,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: BitAnd,
                                        left: Identifier(
                                            VarAccess:  val,
                                        ),
                                        right: Unary(
                                            UnaryExpression {
                                                op: Flip,
                                                right: Int(
                                                    255,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Warn,
                                                params: [
                                                    String(
                                                        MEM_WriteByte: Val out of range! Truncating to 8 bits.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  val,
                                            op: Eq,
                                            exp: Binary(
                                                BinaryExpression {
                                                    op: BitAnd,
                                                    left: Identifier(
                                                        VarAccess:  val,
                                                    ),
                                                    right: Int(
                                                        255,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Identifier(
                                    VarAccess:  adr,
                                ),
                                Binary(
                                    BinaryExpression {
                                        op: BitOr,
                                        left: Binary(
                                            BinaryExpression {
                                                op: BitAnd,
                                                left: Call(
                                                    Call {
                                                        func: MEM_ReadInt,
                                                        params: [
                                                            Identifier(
                                                                VarAccess:  adr,
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                right: Unary(
                                                    UnaryExpression {
                                                        op: Flip,
                                                        right: Int(
                                                            255,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Identifier(
                                            VarAccess:  val,
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ReadIntArray,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: arrayAddress,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  arrayAddress,
                                            ),
                                            right: Binary(
                                                BinaryExpression {
                                                    op: Multiply,
                                                    left: Int(
                                                        4,
                                                    ),
                                                    right: Identifier(
                                                        VarAccess:  offset,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_WriteIntArray,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: arrayAddress,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: value,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  arrayAddress,
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: Multiply,
                                                left: Int(
                                                    4,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  offset,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                Identifier(
                                    VarAccess:  value,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ReadByteArray,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: arrayAddress,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_ReadByte,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  arrayAddress,
                                            ),
                                            right: Identifier(
                                                VarAccess:  offset,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_WriteByteArray,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: arrayAddress,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: value,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteByte,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  arrayAddress,
                                        ),
                                        right: Identifier(
                                            VarAccess:  offset,
                                        ),
                                    },
                                ),
                                Identifier(
                                    VarAccess:  value,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_WriteStringArray,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: arrayAddress,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: value,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteString,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  arrayAddress,
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: Multiply,
                                                left: Identifier(
                                                    VarAccess:  sizeof_zString,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  offset,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                Identifier(
                                    VarAccess:  value,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Const(
        ConstDeclaration {
            name: currParserAddress,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: currSymbolTableAddress,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: currSymbolTableLength,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: currSortedSymbolTableAddress,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: currParserStackAddress,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: contentSymbolTableAddress,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Func(
        Function {
            name: MEM_ReinitParser,
            typ: void,
            params: [],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  currParserAddress,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  ContentParserAddress,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  currSymbolTableAddress,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  currParserAddress,
                                            ),
                                            right: Identifier(
                                                VarAccess:  zCParser_symtab_table_array_offset,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  currSymbolTableLength,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Binary(
                                                BinaryExpression {
                                                    op: Plus,
                                                    left: Identifier(
                                                        VarAccess:  currParserAddress,
                                                    ),
                                                    right: Identifier(
                                                        VarAccess:  zCParser_symtab_table_array_offset,
                                                    ),
                                                },
                                            ),
                                            right: Int(
                                                8,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  currSortedSymbolTableAddress,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  currParserAddress,
                                            ),
                                            right: Identifier(
                                                VarAccess:  zCParser_sorted_symtab_table_array_offset,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  currParserStackAddress,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  currParserAddress,
                                            ),
                                            right: Identifier(
                                                VarAccess:  zCParser_stack_offset,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  contentSymbolTableAddress,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  ContentParserAddress,
                                            ),
                                            right: Identifier(
                                                VarAccess:  zCParser_symtab_table_array_offset,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_SetParser,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ID,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ID,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Warn,
                                                params: [
                                                    String(
                                                        MEM_SetParser was removed in Ikarus Version 1.2 and should not be used any more.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Exp(
                                    Call(
                                        Call {
                                            func: MEM_Error,
                                            params: [
                                                String(
                                                    MEM_SetParser was removed in Ikarus Version 1.2 and cannot be used to change the current parser any more.,
                                                ),
                                            ],
                                        },
                                    ),
                                ),
                            ],
                        ),
                    },
                ),
            ],
        },
    ),
    Var(
        [
            VarDeclaration {
                typ: int,
                name: MEM_AssignInstSuppressNullWarning,
                array_size: None,
            },
        ],
    ),
    Func(
        Function {
            name: MEM_AssignInst,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: inst,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LE,
                                        left: Identifier(
                                            VarAccess:  inst,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: ConcatStrings,
                                                            params: [
                                                                String(
                                                                    MEM_AssignInst: Invalid instance: ,
                                                                ),
                                                                Call(
                                                                    Call {
                                                                        func: IntToString,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  inst,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: And,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Eq,
                                                left: Identifier(
                                                    VarAccess:  ptr,
                                                ),
                                                right: Int(
                                                    0,
                                                ),
                                            },
                                        ),
                                        right: Unary(
                                            UnaryExpression {
                                                op: Negate,
                                                right: Identifier(
                                                    VarAccess:  MEM_AssignInstSuppressNullWarning,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Warn,
                                                params: [
                                                    String(
                                                        MEM_AssignInst: ptr is NULL. Use MEM_AssignInstNull if that's what you want.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: sym,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  sym,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadIntArray,
                                params: [
                                    Identifier(
                                        VarAccess:  currSymbolTableAddress,
                                    ),
                                    Identifier(
                                        VarAccess:  inst,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  sym,
                                        ),
                                        right: Identifier(
                                            VarAccess:  zCParSymbol_offset_offset,
                                        ),
                                    },
                                ),
                                Identifier(
                                    VarAccess:  ptr,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_AssignInstNull,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: inst,
                    array_size: None,
                },
            ],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_AssignInstSuppressNullWarning,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  true,
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_AssignInst,
                            params: [
                                Identifier(
                                    VarAccess:  inst,
                                ),
                                Int(
                                    0,
                                ),
                            ],
                        },
                    ),
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_AssignInstSuppressNullWarning,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  false,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_PtrToInst,
            typ: MEMINT_HelperClass,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: MEMINT_HelperClass,
                            name: hlp,
                            array_size: None,
                        },
                    ],
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: hlpOffsetPtr,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  hlpOffsetPtr,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  hlpOffsetPtr,
                                            op: Eq,
                                            exp: Binary(
                                                BinaryExpression {
                                                    op: Plus,
                                                    left: Call(
                                                        Call {
                                                            func: MEM_ReadIntArray,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  currSymbolTableAddress,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  hlp,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    right: Identifier(
                                                        VarAccess:  zCParSymbol_offset_offset,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: And,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Eq,
                                                left: Identifier(
                                                    VarAccess:  ptr,
                                                ),
                                                right: Int(
                                                    0,
                                                ),
                                            },
                                        ),
                                        right: Unary(
                                            UnaryExpression {
                                                op: Negate,
                                                right: Identifier(
                                                    VarAccess:  MEM_AssignInstSuppressNullWarning,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Warn,
                                                params: [
                                                    String(
                                                        MEM_PtrToInst: ptr is NULL. Use MEM_NullToInst if that's what you want.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_WriteInt,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  hlpOffsetPtr,
                                                    ),
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Exp(
                                    Call(
                                        Call {
                                            func: MEM_WriteInt,
                                            params: [
                                                Identifier(
                                                    VarAccess:  hlpOffsetPtr,
                                                ),
                                                Identifier(
                                                    VarAccess:  ptr,
                                                ),
                                            ],
                                        },
                                    ),
                                ),
                            ],
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushInst,
                            params: [
                                Identifier(
                                    VarAccess:  hlp,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: _^,
            typ: MEMINT_HelperClass,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_PtrToInst,
                            params: [
                                Identifier(
                                    VarAccess:  ptr,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_NullToInst,
            typ: MEMINT_HelperClass,
            params: [],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: MEMINT_HelperClass,
                            name: hlp,
                            array_size: None,
                        },
                    ],
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushInst,
                            params: [
                                Identifier(
                                    VarAccess:  hlp,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_CpyInst,
            typ: MEMINT_HelperClass,
            params: [
                VarDeclaration {
                    typ: int,
                    name: inst,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushInst,
                            params: [
                                Identifier(
                                    VarAccess:  inst,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_AssignContentInst,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: inst,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: once,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  once,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  once,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  true,
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Warn,
                                                params: [
                                                    String(
                                                        MEM_AssignContentInst: This function was deprecated in Ikarus Version 1.2. Use the equivalent MEM_AssignInst instead.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_AssignInst,
                            params: [
                                Identifier(
                                    VarAccess:  inst,
                                ),
                                Identifier(
                                    VarAccess:  ptr,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_AssignContentInstNull,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: inst,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: once,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  once,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  once,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  true,
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Warn,
                                                params: [
                                                    String(
                                                        MEM_AssignContentInstNull: This function was deprecated in Ikarus Version 1.2. Use the equivalent MEM_AssignInstNull instead.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_AssignInstNull,
                            params: [
                                Identifier(
                                    VarAccess:  inst,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_InstToPtr,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: inst,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LE,
                                        left: Identifier(
                                            VarAccess:  inst,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: ConcatStrings,
                                                            params: [
                                                                String(
                                                                    MEM_InstGetOffset: Invalid inst: ,
                                                                ),
                                                                Call(
                                                                    Call {
                                                                        func: IntToString,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  inst,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: symb,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  symb,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadIntArray,
                                params: [
                                    Identifier(
                                        VarAccess:  currSymbolTableAddress,
                                    ),
                                    Identifier(
                                        VarAccess:  inst,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  symb,
                                            ),
                                            right: Identifier(
                                                VarAccess:  zCParSymbol_offset_offset,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_InstGetOffset,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: inst,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_InstToPtr,
                                params: [
                                    Identifier(
                                        VarAccess:  inst,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Inst(
        [
            Instance {
                name: currParserSymb,
                class: zCPar_Symbol,
                body: [],
            },
        ],
    ),
    Func(
        Function {
            name: MEM_SetCurrParserSymb,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: inst,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LE,
                                        left: Identifier(
                                            VarAccess:  inst,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: ConcatStrings,
                                                            params: [
                                                                String(
                                                                    MEM_SetCurrParserSymb: Invalid inst: ,
                                                                ),
                                                                Call(
                                                                    Call {
                                                                        func: IntToString,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  inst,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: symOffset,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: currParserSymOffset,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  symOffset,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadIntArray,
                                params: [
                                    Identifier(
                                        VarAccess:  currSymbolTableAddress,
                                    ),
                                    Identifier(
                                        VarAccess:  inst,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  currParserSymOffset,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadIntArray,
                                params: [
                                    Identifier(
                                        VarAccess:  contentSymbolTableAddress,
                                    ),
                                    Identifier(
                                        VarAccess:  currParserSymb,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  currParserSymOffset,
                                        ),
                                        right: Identifier(
                                            VarAccess:  zCParSymbol_offset_offset,
                                        ),
                                    },
                                ),
                                Identifier(
                                    VarAccess:  symOffset,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Class(
        Class {
            name: MEMINT_StackPos,
            members: [
                VarDeclaration {
                    typ: int,
                    name: position,
                    array_size: None,
                },
            ],
        },
    ),
    Var(
        [
            VarDeclaration {
                typ: MEMINT_StackPos,
                name: MEM_StackPos,
                array_size: None,
            },
        ],
    ),
    Func(
        Function {
            name: MEM_InitLabels,
            typ: void,
            params: [],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_StackPos,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  ContentParserAddress,
                                            ),
                                            right: Identifier(
                                                VarAccess:  zCParser_stack_stackPtr_offset,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_CallByPtr,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_StackPos.position,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  ptr,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_CallByOffset,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_CallByPtr,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  offset,
                                        ),
                                        right: Identifier(
                                            VarAccess:  currParserStackAddress,
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetFuncID,
            typ: int,
            params: [
                VarDeclaration {
                    typ: func,
                    name: fnc,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCPar_Symbol,
                            name: symb,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  symb,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_PtrToInst,
                                params: [
                                    Call(
                                        Call {
                                            func: MEM_ReadIntArray,
                                            params: [
                                                Identifier(
                                                    VarAccess:  contentSymbolTableAddress,
                                                ),
                                                Binary(
                                                    BinaryExpression {
                                                        op: Minus,
                                                        left: Identifier(
                                                            VarAccess:  symb,
                                                        ),
                                                        right: Int(
                                                            1,
                                                        ),
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: res,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loop,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loop,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: NotEq,
                                        left: Binary(
                                            BinaryExpression {
                                                op: BitAnd,
                                                left: Identifier(
                                                    VarAccess:  symb.bitfield,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  zCPar_Symbol_bitfield_type,
                                                ),
                                            },
                                        ),
                                        right: Identifier(
                                            VarAccess:  zPAR_TYPE_FUNC,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Warn,
                                                params: [
                                                    String(
                                                        MEM_GetFuncID: Unresolvable request (probably uninitialised function variable).,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Unary(
                                                UnaryExpression {
                                                    op: Minus,
                                                    right: Int(
                                                        1,
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: BitAnd,
                                        left: Identifier(
                                            VarAccess:  symb.bitfield,
                                        ),
                                        right: Identifier(
                                            VarAccess:  zPAR_FLAG_CONST,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Unary(
                                                UnaryExpression {
                                                    op: Plus,
                                                    right: Identifier(
                                                        VarAccess:  res,
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Ass(
                                    Assignment {
                                        var: VarAccess:  res,
                                        op: Eq,
                                        exp: Identifier(
                                            VarAccess:  symb.content,
                                        ),
                                    },
                                ),
                                Ass(
                                    Assignment {
                                        var: VarAccess:  symb,
                                        op: Eq,
                                        exp: Call(
                                            Call {
                                                func: MEM_PtrToInst,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: MEM_ReadIntArray,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  contentSymbolTableAddress,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  res,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                Ass(
                                    Assignment {
                                        var: VarAccess:  MEM_StackPos.position,
                                        op: Eq,
                                        exp: Identifier(
                                            VarAccess:  loop,
                                        ),
                                    },
                                ),
                            ],
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetFuncOffset,
            typ: int,
            params: [
                VarDeclaration {
                    typ: func,
                    name: fnc,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: r,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  r,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_GetFuncID,
                                params: [
                                    Identifier(
                                        VarAccess:  fnc,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  r,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadIntArray,
                                params: [
                                    Identifier(
                                        VarAccess:  contentSymbolTableAddress,
                                    ),
                                    Identifier(
                                        VarAccess:  r,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  r,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  r,
                                            ),
                                            right: Identifier(
                                                VarAccess:  zCParSymbol_content_offset,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: Plus,
                                left: Identifier(
                                    VarAccess:  r,
                                ),
                                right: Int(
                                    0,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetFuncPtr,
            typ: int,
            params: [
                VarDeclaration {
                    typ: func,
                    name: fnc,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: Plus,
                                left: Call(
                                    Call {
                                        func: MEM_GetFuncOffset,
                                        params: [
                                            Identifier(
                                                VarAccess:  fnc,
                                            ),
                                        ],
                                    },
                                ),
                                right: Identifier(
                                    VarAccess:  currParserStackAddress,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ReplaceFunc,
            typ: void,
            params: [
                VarDeclaration {
                    typ: func,
                    name: f1,
                    array_size: None,
                },
                VarDeclaration {
                    typ: func,
                    name: f2,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ptr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ptr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_GetFuncPtr,
                                params: [
                                    Identifier(
                                        VarAccess:  f1,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: target,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  target,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_GetFuncOffset,
                                params: [
                                    Identifier(
                                        VarAccess:  f2,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteByte,
                            params: [
                                Identifier(
                                    VarAccess:  ptr,
                                ),
                                Identifier(
                                    VarAccess:  zPAR_TOK_JUMP,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  ptr,
                                        ),
                                        right: Int(
                                            1,
                                        ),
                                    },
                                ),
                                Identifier(
                                    VarAccess:  target,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Var(
        [
            VarDeclaration {
                typ: int,
                name: MEMINT_OverrideFunc_Ptr,
                array_size: None,
            },
        ],
    ),
    Func(
        Function {
            name: MEMINT_InitOverideFunc,
            typ: void,
            params: [
                VarDeclaration {
                    typ: func,
                    name: f,
                    array_size: None,
                },
            ],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_OverrideFunc_Ptr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_GetFuncPtr,
                                params: [
                                    Identifier(
                                        VarAccess:  f,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_OFTok,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: tok,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteByte,
                            params: [
                                Identifier(
                                    VarAccess:  MEMINT_OverrideFunc_Ptr,
                                ),
                                Identifier(
                                    VarAccess:  tok,
                                ),
                            ],
                        },
                    ),
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_OverrideFunc_Ptr,
                        op: PlusEq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_OFTokPar,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: tok,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: param,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OFTok,
                            params: [
                                Identifier(
                                    VarAccess:  tok,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Identifier(
                                    VarAccess:  MEMINT_OverrideFunc_Ptr,
                                ),
                                Identifier(
                                    VarAccess:  param,
                                ),
                            ],
                        },
                    ),
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_OverrideFunc_Ptr,
                        op: PlusEq,
                        exp: Int(
                            4,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetIntAddress,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: i,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_Error,
                            params: [
                                String(
                                    MEM_GetIntAddress called before MEM_GetAddress_Init!,
                                ),
                            ],
                        },
                    ),
                ),
                ReturnStatement(
                    Some(
                        Int(
                            0,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetFloatAddress,
            typ: int,
            params: [
                VarDeclaration {
                    typ: float,
                    name: f,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_Error,
                            params: [
                                String(
                                    MEM_GetFloatAddress called before MEM_GetAddress_Init!,
                                ),
                            ],
                        },
                    ),
                ),
                ReturnStatement(
                    Some(
                        Int(
                            0,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetStringAddress,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: s,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_Error,
                            params: [
                                String(
                                    MEM_GetStringAddress called before MEM_GetAddress_Init!,
                                ),
                            ],
                        },
                    ),
                ),
                ReturnStatement(
                    Some(
                        Int(
                            0,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: _@,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: i,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_Error,
                            params: [
                                String(
                                    _@ called before MEM_GetAddress_Init!,
                                ),
                            ],
                        },
                    ),
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Int(
                            0,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: _@s,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: s,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_Error,
                            params: [
                                String(
                                    _@s called before MEM_GetAddress_Init!,
                                ),
                            ],
                        },
                    ),
                ),
                ReturnStatement(
                    Some(
                        Int(
                            0,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: _@f,
            typ: int,
            params: [
                VarDeclaration {
                    typ: float,
                    name: f,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_Error,
                            params: [
                                String(
                                    _@f called before MEM_GetAddress_Init!,
                                ),
                            ],
                        },
                    ),
                ),
                ReturnStatement(
                    Some(
                        Int(
                            0,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_GetAddress_Init,
            typ: void,
            params: [
                VarDeclaration {
                    typ: func,
                    name: f,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: MEMINT_HelperClass,
                            name: symb,
                            array_size: None,
                        },
                    ],
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_InitOverideFunc,
                            params: [
                                Identifier(
                                    VarAccess:  f,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OFTokPar,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHINST,
                                ),
                                Identifier(
                                    VarAccess:  symb,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OFTok,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_ASSIGNINST,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OFTokPar,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHINST,
                                ),
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHINT,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OFTok,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_RET,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetAddress_Init,
            typ: void,
            params: [],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: init_done,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  init_done,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_GetAddress_Init,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  MEM_GetIntAddress,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_GetAddress_Init,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  MEM_GetFloatAddress,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_GetAddress_Init,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  MEM_GetStringAddress,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_GetAddress_Init,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  STR_GetAddress,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_GetAddress_Init,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  _@f,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_GetAddress_Init,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  _@s,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_InitOverideFunc,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  _@,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_OFTokPar,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  zPAR_TOK_PUSHINST,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  zPAR_TOK_PUSHINT,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_OFTokPar,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  zPAR_TOK_PUSHINT,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  zPAR_TOK_PUSHINT,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_OFTok,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  zPAR_OP_EQUAL,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_OFTokPar,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  zPAR_TOK_JUMPF,
                                                    ),
                                                    Binary(
                                                        BinaryExpression {
                                                            op: Minus,
                                                            left: Binary(
                                                                BinaryExpression {
                                                                    op: Plus,
                                                                    left: Identifier(
                                                                        VarAccess:  MEMINT_OverrideFunc_Ptr,
                                                                    ),
                                                                    right: Int(
                                                                        16,
                                                                    ),
                                                                },
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  currParserStackAddress,
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_OFTokPar,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  zPAR_TOK_PUSHINST,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  zPAR_TOK_PUSHINT,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_OFTokPar,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  zPAR_TOK_CALL,
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEM_GetFuncOffset,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  MEM_InstToPtr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_OFTok,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  zPAR_TOK_RET,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_OFTokPar,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  zPAR_TOK_PUSHINST,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  zPAR_TOK_PUSHINT,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_OFTok,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  zPAR_TOK_RET,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  init_done,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  true,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: STR_GetAddressInit,
            typ: void,
            params: [],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_GetAddress_Init,
                            params: [],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: STR_GetAddress,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
            ],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  str,
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_GetAddress_Init,
                            params: [],
                        },
                    ),
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: STR_GetAddress,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_ReadStatArr,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  offset,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_ReadStatArr: Offset < 0!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPopInst,
                            params: [],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushInst,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHINT,
                                ),
                            ],
                        },
                    ),
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: adr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  adr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEMINT_StackPopInt,
                                params: [],
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_ReadIntArray,
                                params: [
                                    Identifier(
                                        VarAccess:  adr,
                                    ),
                                    Identifier(
                                        VarAccess:  offset,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_WriteStatArr,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: value,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  offset,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_WriteStatArr: Offset < 0!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPopInst,
                            params: [],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushInst,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHINT,
                                ),
                            ],
                        },
                    ),
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: adr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  adr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEMINT_StackPopInt,
                                params: [],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteIntArray,
                            params: [
                                Identifier(
                                    VarAccess:  adr,
                                ),
                                Identifier(
                                    VarAccess:  offset,
                                ),
                                Identifier(
                                    VarAccess:  value,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_WriteStatStringArr,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: value,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  offset,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_WriteStatStringArr: Offset < 0!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPopInst,
                            params: [],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushInst,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHINT,
                                ),
                            ],
                        },
                    ),
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: adr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  adr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEMINT_StackPopInt,
                                params: [],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  adr,
                        op: PlusEq,
                        exp: Binary(
                            BinaryExpression {
                                op: Multiply,
                                left: Identifier(
                                    VarAccess:  sizeof_zString,
                                ),
                                right: Identifier(
                                    VarAccess:  offset,
                                ),
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteString,
                            params: [
                                Identifier(
                                    VarAccess:  adr,
                                ),
                                Identifier(
                                    VarAccess:  value,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_ReadStatStringArr,
            typ: string,
            params: [
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  offset,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_ReadStatStringArr: Offset < 0!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            String(
                                                ,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPopInst,
                            params: [],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushInst,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHINT,
                                ),
                            ],
                        },
                    ),
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: adr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  adr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEMINT_StackPopInt,
                                params: [],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  adr,
                        op: PlusEq,
                        exp: Binary(
                            BinaryExpression {
                                op: Multiply,
                                left: Identifier(
                                    VarAccess:  sizeof_zString,
                                ),
                                right: Identifier(
                                    VarAccess:  offset,
                                ),
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_ReadString,
                                params: [
                                    Identifier(
                                        VarAccess:  adr,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_WriteStatArr,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: array,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: value,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_Error,
                            params: [
                                String(
                                    MEM_WriteStatArr was called before MEM_InitStatArrs!,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ReadStatArr,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: array,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_Error,
                            params: [
                                String(
                                    MEM_ReadStatArr was called before MEM_InitStatArrs!,
                                ),
                            ],
                        },
                    ),
                ),
                ReturnStatement(
                    Some(
                        Int(
                            0,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_WriteStatStringArr,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: array,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: value,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_Error,
                            params: [
                                String(
                                    MEM_WriteStatStringArr was called before MEM_InitStatArrs!,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ReadStatStringArr,
            typ: string,
            params: [
                VarDeclaration {
                    typ: string,
                    name: array,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_Error,
                            params: [
                                String(
                                    MEM_ReadStatStringArr was called before MEM_InitStatArrs!,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_InitStatArrs,
            typ: void,
            params: [],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: done,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  done,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ReplaceFunc,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  MEM_WriteStatArr,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  MEMINT_WriteStatArr,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ReplaceFunc,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  MEM_ReadStatArr,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  MEMINT_ReadStatArr,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ReplaceFunc,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  MEM_WriteStatStringArr,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  MEMINT_WriteStatStringArr,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ReplaceFunc,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  MEM_ReadStatStringArr,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  MEMINT_ReadStatStringArr,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  done,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  true,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_Alloc,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: amount,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: strPtr,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: string,
                            name: str,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: String(
                            AAAA,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  strPtr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@s,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zString,
                            name: zstr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zstr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  strPtr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Identifier(
                                    VarAccess:  zstr.ptr,
                                ),
                                Int(
                                    0,
                                ),
                            ],
                        },
                    ),
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: size,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  size,
                        op: Eq,
                        exp: Int(
                            4,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loopStart,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loopStart,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ConcatStrings,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  size,
                        op: MultiplyEq,
                        exp: Int(
                            2,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  size,
                                        ),
                                        right: Identifier(
                                            VarAccess:  amount,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loopStart,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: res,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  res,
                        op: Eq,
                        exp: Binary(
                            BinaryExpression {
                                op: Minus,
                                left: Identifier(
                                    VarAccess:  zstr.ptr,
                                ),
                                right: Int(
                                    1,
                                ),
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zstr.ptr,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zstr.len,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zstr.res,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ConcatStrings,
                                params: [
                                    String(
                                        ,
                                    ),
                                    String(
                                        ,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  res,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_Free,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Warn,
                                                params: [
                                                    String(
                                                        MEM_Free: ptr is 0. Ignoring request.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteByte,
                            params: [
                                Identifier(
                                    VarAccess:  ptr,
                                ),
                                Int(
                                    0,
                                ),
                            ],
                        },
                    ),
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ptr,
                        op: PlusEq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: strPtr,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: string,
                            name: str,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: String(
                            ,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  strPtr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@s,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zString,
                            name: zstr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zstr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  strPtr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zstr.ptr,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  ptr,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zstr.len,
                        op: Eq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zstr.res,
                        op: Eq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: String(
                            ,
                        ),
                    },
                ),
            ],
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_movImToECX,
            typ: int,
            initializer: Int(
                185,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_movImToEDX,
            typ: int,
            initializer: Int(
                186,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_pushIm,
            typ: int,
            initializer: Int(
                104,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_call,
            typ: int,
            initializer: Int(
                232,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_retn,
            typ: int,
            initializer: Int(
                195,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_nop,
            typ: int,
            initializer: Int(
                144,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_jmp,
            typ: int,
            initializer: Int(
                233,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_PushEAX,
            typ: int,
            initializer: Int(
                80,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_pusha,
            typ: int,
            initializer: Int(
                96,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_popa,
            typ: int,
            initializer: Int(
                97,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_movMemToEAX,
            typ: int,
            initializer: Int(
                161,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_movEAXToMem,
            typ: int,
            initializer: Int(
                1417,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_floatStoreToMem,
            typ: int,
            initializer: Int(
                7641,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_addImToESP,
            typ: int,
            initializer: Int(
                50307,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_movMemToECX,
            typ: int,
            initializer: Int(
                3467,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_movMemToEDX,
            typ: int,
            initializer: Int(
                5515,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_movECXtoEAX,
            typ: int,
            initializer: Int(
                49547,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_movESPtoEAX,
            typ: int,
            initializer: Int(
                50315,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_movEAXtoECX,
            typ: int,
            initializer: Int(
                49545,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_movEBXtoEAX,
            typ: int,
            initializer: Int(
                55433,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_movEBPtoEAX,
            typ: int,
            initializer: Int(
                50571,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_movEDItoEAX,
            typ: int,
            initializer: Int(
                51083,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_OP_addImToEAX,
            typ: int,
            initializer: Int(
                49283,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASM_StandardStreamLength,
            typ: int,
            initializer: Int(
                256,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_InternalStack,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_InternalStackWalker,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_InternalStackSize,
            typ: int,
            initializer: Int(
                1024,
            ),
        },
    ),
    Func(
        Function {
            name: ASMINT_Push,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: data,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: GE,
                                        left: Identifier(
                                            VarAccess:  ASMINT_InternalStackWalker,
                                        ),
                                        right: Identifier(
                                            VarAccess:  ASMINT_InternalStackSize,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        ASMINT_Push: You seem to nest Engine Calls very extensively (or there is an Error in the ASM / CALL Package of Ikarus. Please contact Sekti with this problem!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteIntArray,
                            params: [
                                Identifier(
                                    VarAccess:  ASMINT_InternalStack,
                                ),
                                Identifier(
                                    VarAccess:  ASMINT_InternalStackWalker,
                                ),
                                Identifier(
                                    VarAccess:  data,
                                ),
                            ],
                        },
                    ),
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ASMINT_InternalStackWalker,
                        op: PlusEq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: ASMINT_Pop,
            typ: int,
            params: [],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LE,
                                        left: Identifier(
                                            VarAccess:  ASMINT_InternalStackWalker,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        ASMINT_Pop: Underflow! This is probably connected to wrong use of the Call functions.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ASMINT_InternalStackWalker,
                        op: MinusEq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_ReadIntArray,
                                params: [
                                    Identifier(
                                        VarAccess:  ASMINT_InternalStack,
                                    ),
                                    Identifier(
                                        VarAccess:  ASMINT_InternalStackWalker,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_CallTarget,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Func(
        Function {
            name: ASMINT_MyExternal,
            typ: void,
            params: [],
            body: [],
        },
    ),
    Func(
        Function {
            name: ASMINT_CallMyExternal,
            typ: void,
            params: [],
            body: [
                Exp(
                    Call(
                        Call {
                            func: ExitGame,
                            params: [],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: ASMINT_Init,
            typ: void,
            params: [],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ASMINT_InternalStack,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  ASMINT_InternalStack,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_Alloc,
                                                    params: [
                                                        Binary(
                                                            BinaryExpression {
                                                                op: Multiply,
                                                                left: Int(
                                                                    4,
                                                                ),
                                                                right: Identifier(
                                                                    VarAccess:  ASMINT_InternalStackSize,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  ASMINT_CallTarget,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_ReadIntArray,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  currSymbolTableAddress,
                                                        ),
                                                        Call(
                                                            Call {
                                                                func: MEM_GetFuncID,
                                                                params: [
                                                                    Identifier(
                                                                        VarAccess:  ASMINT_MYEXTERNAL,
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: zCPar_Symbol,
                                                name: symb,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  symb,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: _^,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  ASMINT_CallTarget,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  ASMINT_CallTarget,
                                            op: PlusEq,
                                            exp: Identifier(
                                                VarAccess:  zCParSymbol_content_offset,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  symb.bitfield,
                                            op: Eq,
                                            exp: Binary(
                                                BinaryExpression {
                                                    op: BitOr,
                                                    left: Binary(
                                                        BinaryExpression {
                                                            op: BitOr,
                                                            left: Identifier(
                                                                VarAccess:  zPAR_TYPE_FUNC,
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  zPAR_FLAG_EXTERNAL,
                                                            ),
                                                        },
                                                    ),
                                                    right: Identifier(
                                                        VarAccess:  zPAR_FLAG_CONST,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_WriteInt,
                                                params: [
                                                    Binary(
                                                        BinaryExpression {
                                                            op: Plus,
                                                            left: Call(
                                                                Call {
                                                                    func: MEM_GetFuncPtr,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  ASMINT_CallMyExternal,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            right: Int(
                                                                1,
                                                            ),
                                                        },
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEM_GetFuncID,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ASMINT_MyExternal,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_currRun,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_cursor,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: ASMINT_Length,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Func(
        Function {
            name: ASM_Open,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: space,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  ASMINT_currRun,
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        ASM_Open: Only one stream of assembler code can be constructed at any given time (ASM_Open was called again before closing operation).,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  space,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  space,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  ASM_StandardStreamLength,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ASMINT_currRun,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_Alloc,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  space,
                                            ),
                                            right: Int(
                                                3,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ASMINT_Length,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  space,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ASMINT_cursor,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  ASMINT_currRun,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: ASM,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: data,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: length,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ASMINT_currRun,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_Open,
                                                params: [
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: GT,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Plus,
                                                left: Binary(
                                                    BinaryExpression {
                                                        op: Minus,
                                                        left: Identifier(
                                                            VarAccess:  ASMINT_cursor,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  ASMINT_currRun,
                                                        ),
                                                    },
                                                ),
                                                right: Identifier(
                                                    VarAccess:  length,
                                                ),
                                            },
                                        ),
                                        right: Identifier(
                                            VarAccess:  ASMINT_Length,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        ASM: Reserved length is exceeded.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Identifier(
                                    VarAccess:  ASMINT_cursor,
                                ),
                                Identifier(
                                    VarAccess:  data,
                                ),
                            ],
                        },
                    ),
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ASMINT_cursor,
                        op: PlusEq,
                        exp: Identifier(
                            VarAccess:  length,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: ASM_1,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: data,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: ASM,
                            params: [
                                Identifier(
                                    VarAccess:  data,
                                ),
                                Int(
                                    1,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: ASM_2,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: data,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: ASM,
                            params: [
                                Identifier(
                                    VarAccess:  data,
                                ),
                                Int(
                                    2,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: ASM_3,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: data,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: ASM,
                            params: [
                                Identifier(
                                    VarAccess:  data,
                                ),
                                Int(
                                    3,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: ASM_4,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: data,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: ASM,
                            params: [
                                Identifier(
                                    VarAccess:  data,
                                ),
                                Int(
                                    4,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: ASM_Here,
            typ: int,
            params: [],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ASMINT_currRun,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_Open,
                                                params: [
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  ASMINT_cursor,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: ASM_Close,
            typ: int,
            params: [],
            body: [
                Exp(
                    Call(
                        Call {
                            func: ASM,
                            params: [
                                Identifier(
                                    VarAccess:  ASMINT_OP_retn,
                                ),
                                Int(
                                    1,
                                ),
                            ],
                        },
                    ),
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: res,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  res,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  ASMINT_currRun,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ASMINT_currRun,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  res,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: ASM_Run,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Identifier(
                                    VarAccess:  ASMINT_CallTarget,
                                ),
                                Identifier(
                                    VarAccess:  ptr,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: ASMINT_CallMyExternal,
                            params: [],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: ASM_RunOnce,
            typ: void,
            params: [],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ASMINT_currRun,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        ASM: ASM_Open has to be called before calling ASM_RunOnce.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: ASM,
                            params: [
                                Identifier(
                                    VarAccess:  ASMINT_OP_retn,
                                ),
                                Int(
                                    1,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: ASMINT_Push,
                            params: [
                                Identifier(
                                    VarAccess:  ASMINT_currRun,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Identifier(
                                    VarAccess:  ASMINT_CallTarget,
                                ),
                                Identifier(
                                    VarAccess:  ASMINT_currRun,
                                ),
                            ],
                        },
                    ),
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ASMINT_currRun,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: ASMINT_CallMyExternal,
                            params: [],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_Free,
                            params: [
                                Call(
                                    Call {
                                        func: ASMINT_Pop,
                                        params: [],
                                    },
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Const(
        ConstDeclaration {
            name: CALLINT_CodeMode,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: CALLINT_CodeMode_Disposable,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: CALLINT_CodeMode_Recyclable,
            typ: int,
            initializer: Int(
                1,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: CALLINT_numParams,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: CALLINT_RetValStructSize,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: CALLINT_RetValIsFloat,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: CALLINT_PutRetValTo,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Func(
        Function {
            name: ASMINT_PushContext,
            typ: void,
            params: [],
            body: [
                Exp(
                    Call(
                        Call {
                            func: ASMINT_Push,
                            params: [
                                Identifier(
                                    VarAccess:  CALLINT_RetValStructSize,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: ASMINT_Push,
                            params: [
                                Identifier(
                                    VarAccess:  CALLINT_RetValIsFloat,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: ASMINT_Push,
                            params: [
                                Identifier(
                                    VarAccess:  CALLINT_PutRetValTo,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: ASMINT_Push,
                            params: [
                                Identifier(
                                    VarAccess:  CALLINT_numParams,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: ASMINT_Push,
                            params: [
                                Identifier(
                                    VarAccess:  CALLINT_CodeMode,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: ASMINT_Push,
                            params: [
                                Identifier(
                                    VarAccess:  ASMINT_currRun,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: ASMINT_Push,
                            params: [
                                Identifier(
                                    VarAccess:  ASMINT_cursor,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: ASMINT_Push,
                            params: [
                                Identifier(
                                    VarAccess:  ASMINT_Length,
                                ),
                            ],
                        },
                    ),
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ASMINT_currRun,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_CodeMode,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  CALLINT_CodeMode_Disposable,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_numParams,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_RetValIsFloat,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_PutRetValTo,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_RetValStructSize,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: ASMINT_PopContext,
            typ: void,
            params: [],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  ASMINT_Length,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ASMINT_Pop,
                                params: [],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ASMINT_cursor,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ASMINT_Pop,
                                params: [],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ASMINT_currRun,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ASMINT_Pop,
                                params: [],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_CodeMode,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ASMINT_Pop,
                                params: [],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_numParams,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ASMINT_Pop,
                                params: [],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_PutRetValTo,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ASMINT_Pop,
                                params: [],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_RetValIsFloat,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ASMINT_Pop,
                                params: [],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_RetValStructSize,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ASMINT_Pop,
                                params: [],
                            },
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_Open,
            typ: void,
            params: [],
            body: [
                Exp(
                    Call(
                        Call {
                            func: ASMINT_PushContext,
                            params: [],
                        },
                    ),
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_CodeMode,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  CALLINT_CodeMode_Recyclable,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_Begin,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  ptr,
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_Run,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ptr,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: CALL_Open,
                            params: [],
                        },
                    ),
                ),
                ReturnStatement(
                    Some(
                        Int(
                            1,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_Close,
            typ: int,
            params: [],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: NotEq,
                                        left: Identifier(
                                            VarAccess:  CALLINT_CodeMode,
                                        ),
                                        right: Identifier(
                                            VarAccess:  CALLINT_CodeMode_Recyclable,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        CALL_Close: CALL_End or CALL_Close without matching CALL_Begin / CALL_Open? There is some serious problem with your code.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ptr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ptr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ASM_Close,
                                params: [],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: ASMINT_PopContext,
                            params: [],
                        },
                    ),
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  ptr,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_End,
            typ: int,
            params: [],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ptr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ptr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: CALL_Close,
                                params: [],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: ASMINT_Push,
                            params: [
                                Identifier(
                                    VarAccess:  ptr,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: ASM_Run,
                            params: [
                                Identifier(
                                    VarAccess:  ptr,
                                ),
                            ],
                        },
                    ),
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: ASMINT_Pop,
                                params: [],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_IntParam,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: param,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  CALLINT_CodeMode,
                                        ),
                                        right: Identifier(
                                            VarAccess:  CALLINT_CodeMode_Recyclable,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_1,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ASMINT_OP_movMemToEAX,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_4,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  param,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_1,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ASMINT_OP_PushEAX,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Exp(
                                    Call(
                                        Call {
                                            func: ASM_1,
                                            params: [
                                                Identifier(
                                                    VarAccess:  ASMINT_OP_pushIm,
                                                ),
                                            ],
                                        },
                                    ),
                                ),
                                Exp(
                                    Call(
                                        Call {
                                            func: ASM_4,
                                            params: [
                                                Identifier(
                                                    VarAccess:  param,
                                                ),
                                            ],
                                        },
                                    ),
                                ),
                            ],
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_numParams,
                        op: PlusEq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_PtrParam,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: param,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: CALL_IntParam,
                            params: [
                                Identifier(
                                    VarAccess:  param,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_FloatParam,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: param,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: CALL_IntParam,
                            params: [
                                Identifier(
                                    VarAccess:  param,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALLINT_PushString,
            typ: string,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: n,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  n,
                        op: PlusEq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            10,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  n,
                                            op: Eq,
                                            exp: Int(
                                                0,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s0,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s0,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            1,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s1,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s1,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s1,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            2,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s2,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s2,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s2,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            3,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s3,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s3,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s3,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            4,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s4,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s4,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s4,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            5,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s5,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s5,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s5,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            6,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s6,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s6,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s6,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            7,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s7,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s7,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s7,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            8,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s8,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s8,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s8,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            9,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s9,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s9,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s9,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_AssertFail,
                            params: [
                                String(
                                    Should be never here.,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALLINT_GetStringAddress,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: _@s,
                                params: [
                                    Call(
                                        Call {
                                            func: CALLINT_PushString,
                                            params: [
                                                Identifier(
                                                    VarAccess:  str,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_zStringPtrParam,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: param,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: NotEq,
                                        left: Identifier(
                                            VarAccess:  CALLINT_CodeMode,
                                        ),
                                        right: Identifier(
                                            VarAccess:  CALLINT_CodeMode_Disposable,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        CALL_zStringPtrParam: This function only works when writing a disposable call!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: CALL_IntParam,
                            params: [
                                Call(
                                    Call {
                                        func: CALLINT_GetStringAddress,
                                        params: [
                                            Identifier(
                                                VarAccess:  param,
                                            ),
                                        ],
                                    },
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_cStringPtrParam,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: param,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: NotEq,
                                        left: Identifier(
                                            VarAccess:  CALLINT_CodeMode,
                                        ),
                                        right: Identifier(
                                            VarAccess:  CALLINT_CodeMode_Disposable,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        CALL_cStringPtrParam: This function only works when writing a disposable call!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zString,
                            name: str,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: CALLINT_GetStringAddress,
                                            params: [
                                                Identifier(
                                                    VarAccess:  param,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: CALL_IntParam,
                            params: [
                                Identifier(
                                    VarAccess:  str.ptr,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_StructParam,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: words,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  CALLINT_CodeMode,
                                        ),
                                        right: Identifier(
                                            VarAccess:  CALLINT_CodeMode_Recyclable,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Binary(
                                                        BinaryExpression {
                                                            op: Plus,
                                                            left: Identifier(
                                                                VarAccess:  ptr,
                                                            ),
                                                            right: Binary(
                                                                BinaryExpression {
                                                                    op: Multiply,
                                                                    left: Int(
                                                                        4,
                                                                    ),
                                                                    right: Binary(
                                                                        BinaryExpression {
                                                                            op: Minus,
                                                                            left: Identifier(
                                                                                VarAccess:  words,
                                                                            ),
                                                                            right: Int(
                                                                                1,
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_StructParam,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ptr,
                                                    ),
                                                    Binary(
                                                        BinaryExpression {
                                                            op: Minus,
                                                            left: Identifier(
                                                                VarAccess:  words,
                                                            ),
                                                            right: Int(
                                                                1,
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: GT,
                                        left: Identifier(
                                            VarAccess:  words,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: MEM_ReadIntArray,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ptr,
                                                                ),
                                                                Binary(
                                                                    BinaryExpression {
                                                                        op: Minus,
                                                                        left: Identifier(
                                                                            VarAccess:  words,
                                                                        ),
                                                                        right: Int(
                                                                            1,
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_StructParam,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ptr,
                                                    ),
                                                    Binary(
                                                        BinaryExpression {
                                                            op: Minus,
                                                            left: Identifier(
                                                                VarAccess:  words,
                                                            ),
                                                            right: Int(
                                                                1,
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_RetValIsStruct,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: size,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  CALLINT_CodeMode,
                                        ),
                                        right: Identifier(
                                            VarAccess:  CALLINT_CodeMode_Recyclable,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        CALL_RetValIsStruct: Only supported in disposable calls (not with CALL_Begin and CALL_End).,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_RetValStructSize,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  size,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_RetValIszString,
            typ: void,
            params: [],
            body: [
                Exp(
                    Call(
                        Call {
                            func: CALL_RetValIsStruct,
                            params: [
                                Identifier(
                                    VarAccess:  sizeof_zString,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_RetValIsFloat,
            typ: void,
            params: [],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_RetValIsFloat,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  true,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_PutRetValTo,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: adr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  adr,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  CALLINT_PutRetValTo,
                                            op: Eq,
                                            exp: Unary(
                                                UnaryExpression {
                                                    op: Minus,
                                                    right: Int(
                                                        1,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Ass(
                                    Assignment {
                                        var: VarAccess:  CALLINT_PutRetValTo,
                                        op: Eq,
                                        exp: Identifier(
                                            VarAccess:  adr,
                                        ),
                                    },
                                ),
                            ],
                        ),
                    },
                ),
            ],
        },
    ),
    Var(
        [
            VarDeclaration {
                typ: int,
                name: CALLINT_Result,
                array_size: None,
            },
        ],
    ),
    Func(
        Function {
            name: CALL_RetValAsInt,
            typ: int,
            params: [],
            body: [
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  CALLINT_Result,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_RetValAsFloat,
            typ: int,
            params: [],
            body: [
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  CALLINT_Result,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_RetValAsPtr,
            typ: int,
            params: [],
            body: [
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  CALLINT_Result,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_RetValAsStructPtr,
            typ: MEMINT_HelperClass,
            params: [],
            body: [
                Exp(
                    Call(
                        Call {
                            func: _^,
                            params: [
                                Identifier(
                                    VarAccess:  CALLINT_Result,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_RetValAszStringPtr,
            typ: string,
            params: [],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  CALLINT_Result,
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_StackPushVar,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  CALLINT_Result,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                ReturnStatement(
                                    Some(
                                        String(
                                            ,
                                        ),
                                    ),
                                ),
                            ],
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL_RetValAszString,
            typ: string,
            params: [],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: string,
                            name: ret,
                            array_size: None,
                        },
                    ],
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  CALLINT_Result,
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  ret,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_RetValAszStringPtr,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_StackPushString,
                                                params: [
                                                    String(
                                                        ,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_RetValAszStringPtr,
                                                params: [],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_StrAssign,
                                                params: [],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Free,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  CALLINT_Result,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  CALLINT_Result,
                                            op: Eq,
                                            exp: Int(
                                                0,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  ret,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALLINT_makecall,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: adr,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: cleanStack,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  CALLINT_RetValStructSize,
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: MEM_Alloc,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  CALLINT_RetValStructSize,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  CALLINT_RetValStructSize,
                                            op: Eq,
                                            exp: Int(
                                                0,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: ASM_1,
                            params: [
                                Identifier(
                                    VarAccess:  ASMINT_OP_call,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: ASM_4,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Minus,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Minus,
                                                left: Identifier(
                                                    VarAccess:  adr,
                                                ),
                                                right: Call(
                                                    Call {
                                                        func: ASM_Here,
                                                        params: [],
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Int(
                                            4,
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: NotEq,
                                        left: Identifier(
                                            VarAccess:  CALLINT_PutRetValTo,
                                        ),
                                        right: Unary(
                                            UnaryExpression {
                                                op: Minus,
                                                right: Int(
                                                    1,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Unary(
                                                        UnaryExpression {
                                                            op: Negate,
                                                            right: Identifier(
                                                                VarAccess:  CALLINT_RetValIsFloat,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: ASM_2,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  ASMINT_OP_movEAXToMem,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: Some(
                                                [
                                                    Exp(
                                                        Call(
                                                            Call {
                                                                func: ASM_2,
                                                                params: [
                                                                    Identifier(
                                                                        VarAccess:  ASMINT_OP_floatStoreToMem,
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Identifier(
                                                        VarAccess:  CALLINT_PutRetValTo,
                                                    ),
                                                    body: [
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: ASM_4,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  CALLINT_PutRetValTo,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: Some(
                                                [
                                                    Exp(
                                                        Call(
                                                            Call {
                                                                func: ASM_4,
                                                                params: [
                                                                    Call(
                                                                        Call {
                                                                            func: MEM_GetIntAddress,
                                                                            params: [
                                                                                Identifier(
                                                                                    VarAccess:  CALLINT_Result,
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                ],
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_RetValIsFloat,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  false,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_PutRetValTo,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  cleanStack,
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_2,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ASMINT_OP_addImToESP,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_1,
                                                params: [
                                                    Binary(
                                                        BinaryExpression {
                                                            op: Multiply,
                                                            left: Identifier(
                                                                VarAccess:  CALLINT_numParams,
                                                            ),
                                                            right: Int(
                                                                4,
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  CALLINT_numParams,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: NotEq,
                                        left: Identifier(
                                            VarAccess:  CALLINT_CodeMode,
                                        ),
                                        right: Identifier(
                                            VarAccess:  CALLINT_CodeMode_Recyclable,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_RunOnce,
                                                params: [],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL__stdcall,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: adr,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: CALLINT_makecall,
                            params: [
                                Identifier(
                                    VarAccess:  adr,
                                ),
                                Identifier(
                                    VarAccess:  false,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL__cdecl,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: adr,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: CALLINT_makecall,
                            params: [
                                Identifier(
                                    VarAccess:  adr,
                                ),
                                Identifier(
                                    VarAccess:  true,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL__thiscall,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: this,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: adr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  CALLINT_CodeMode,
                                        ),
                                        right: Identifier(
                                            VarAccess:  CALLINT_CodeMode_Recyclable,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_2,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ASMINT_OP_movMemToECX,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Exp(
                                    Call(
                                        Call {
                                            func: ASM_1,
                                            params: [
                                                Identifier(
                                                    VarAccess:  ASMINT_OP_movImToECX,
                                                ),
                                            ],
                                        },
                                    ),
                                ),
                            ],
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: ASM_4,
                            params: [
                                Identifier(
                                    VarAccess:  this,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: CALL__stdcall,
                            params: [
                                Identifier(
                                    VarAccess:  adr,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: CALL__fastcall,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ecx,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: edx,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: adr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  CALLINT_CodeMode,
                                        ),
                                        right: Identifier(
                                            VarAccess:  CALLINT_CodeMode_Recyclable,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_2,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ASMINT_OP_movMemToEDX,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Exp(
                                    Call(
                                        Call {
                                            func: ASM_1,
                                            params: [
                                                Identifier(
                                                    VarAccess:  ASMINT_OP_movImToEDX,
                                                ),
                                            ],
                                        },
                                    ),
                                ),
                            ],
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: ASM_4,
                            params: [
                                Identifier(
                                    VarAccess:  edx,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: CALL__thiscall,
                            params: [
                                Identifier(
                                    VarAccess:  ecx,
                                ),
                                Identifier(
                                    VarAccess:  adr,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_SetShowDebug,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: on,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Identifier(
                                    VarAccess:  showDebugAddress,
                                ),
                                Identifier(
                                    VarAccess:  on,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_CopyBytes,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: src,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: dst,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: byteCount,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: memcpy_G1,
                        typ: int,
                        initializer: Int(
                            7846464,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: memcpy_G2,
                        typ: int,
                        initializer: Int(
                            8213280,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  byteCount,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  src,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  dst,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__cdecl,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  memcpy_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  memcpy_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_CopyWords,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: src,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: dst,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: wordcount,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_CopyBytes,
                            params: [
                                Identifier(
                                    VarAccess:  src,
                                ),
                                Identifier(
                                    VarAccess:  dst,
                                ),
                                Binary(
                                    BinaryExpression {
                                        op: Multiply,
                                        left: Identifier(
                                            VarAccess:  wordcount,
                                        ),
                                        right: Int(
                                            4,
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_Copy,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: src,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: dst,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: wordcount,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_CopyBytes,
                            params: [
                                Identifier(
                                    VarAccess:  src,
                                ),
                                Identifier(
                                    VarAccess:  dst,
                                ),
                                Binary(
                                    BinaryExpression {
                                        op: Multiply,
                                        left: Identifier(
                                            VarAccess:  wordcount,
                                        ),
                                        right: Int(
                                            4,
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_SwapBytes,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: src,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: dst,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: byteCount,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: swap_G1,
                        typ: int,
                        initializer: Int(
                            7829281,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: swap_G2,
                        typ: int,
                        initializer: Int(
                            8196369,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  byteCount,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  src,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  dst,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__cdecl,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  swap_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  swap_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_Swap,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: src,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: dst,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: wordCount,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_SwapBytes,
                            params: [
                                Identifier(
                                    VarAccess:  src,
                                ),
                                Identifier(
                                    VarAccess:  dst,
                                ),
                                Binary(
                                    BinaryExpression {
                                        op: Multiply,
                                        left: Identifier(
                                            VarAccess:  wordCount,
                                        ),
                                        right: Int(
                                            4,
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_SwapWords,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: src,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: dst,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: wordCount,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_SwapBytes,
                            params: [
                                Identifier(
                                    VarAccess:  src,
                                ),
                                Identifier(
                                    VarAccess:  dst,
                                ),
                                Binary(
                                    BinaryExpression {
                                        op: Multiply,
                                        left: Identifier(
                                            VarAccess:  wordCount,
                                        ),
                                        right: Int(
                                            4,
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_Clear,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: size,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: memset_G1,
                        typ: int,
                        initializer: Int(
                            7877040,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: memset_G2,
                        typ: int,
                        initializer: Int(
                            8243856,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: null,
                            array_size: None,
                        },
                    ],
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  size,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  null,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ptr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__cdecl,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  memset_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  memset_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_Realloc,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: oldsize,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: newsize,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Unary(
                                                        UnaryExpression {
                                                            op: Negate,
                                                            right: Identifier(
                                                                VarAccess:  oldsize,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_Error,
                                                                    params: [
                                                                        String(
                                                                            MEM_Realloc: ptr is 0 but oldsize is not 0.,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Call(
                                                Call {
                                                    func: MEM_Alloc,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  newsize,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: realloc_G1,
                        typ: int,
                        initializer: Int(
                            7712186,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: realloc_G2,
                        typ: int,
                        initializer: Int(
                            8078522,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  newsize,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ptr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ptr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__cdecl,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  realloc_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  realloc_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  oldsize,
                                        ),
                                        right: Identifier(
                                            VarAccess:  newsize,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Clear,
                                                params: [
                                                    Binary(
                                                        BinaryExpression {
                                                            op: Plus,
                                                            left: Identifier(
                                                                VarAccess:  ptr,
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  oldsize,
                                                            ),
                                                        },
                                                    ),
                                                    Binary(
                                                        BinaryExpression {
                                                            op: Minus,
                                                            left: Identifier(
                                                                VarAccess:  newsize,
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  oldsize,
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  ptr,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_CompareBytes,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr1,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: ptr2,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: byteCount,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  byteCount,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_CompareBytes: Cannot compare less than 0 bytes!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  byteCount,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Eq,
                                                left: Identifier(
                                                    VarAccess:  ptr1,
                                                ),
                                                right: Int(
                                                    0,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: Eq,
                                                left: Identifier(
                                                    VarAccess:  ptr2,
                                                ),
                                                right: Int(
                                                    0,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_CompareBytes: ptr1 or ptr2 is Null,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loopPos,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loopPos,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: GE,
                                        left: Identifier(
                                            VarAccess:  byteCount,
                                        ),
                                        right: Int(
                                            4,
                                        ),
                                    },
                                ),
                                body: [
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: NotEq,
                                                            left: Call(
                                                                Call {
                                                                    func: MEM_ReadInt,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  ptr1,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            right: Call(
                                                                Call {
                                                                    func: MEM_ReadInt,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  ptr2,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        ReturnStatement(
                                                            Some(
                                                                Int(
                                                                    0,
                                                                ),
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  ptr1,
                                            op: PlusEq,
                                            exp: Int(
                                                4,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  ptr2,
                                            op: PlusEq,
                                            exp: Int(
                                                4,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  byteCount,
                                            op: MinusEq,
                                            exp: Int(
                                                4,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loopPos,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: mask,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  mask,
                        op: Eq,
                        exp: Binary(
                            BinaryExpression {
                                op: Minus,
                                left: Binary(
                                    BinaryExpression {
                                        op: Multiply,
                                        left: Binary(
                                            BinaryExpression {
                                                op: LSL,
                                                left: Int(
                                                    1,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  byteCount,
                                                ),
                                            },
                                        ),
                                        right: Int(
                                            8,
                                        ),
                                    },
                                ),
                                right: Int(
                                    1,
                                ),
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: Eq,
                                left: Binary(
                                    BinaryExpression {
                                        op: BitAnd,
                                        left: Call(
                                            Call {
                                                func: MEM_ReadInt,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ptr1,
                                                    ),
                                                ],
                                            },
                                        ),
                                        right: Identifier(
                                            VarAccess:  mask,
                                        ),
                                    },
                                ),
                                right: Binary(
                                    BinaryExpression {
                                        op: BitAnd,
                                        left: Call(
                                            Call {
                                                func: MEM_ReadInt,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ptr2,
                                                    ),
                                                ],
                                            },
                                        ),
                                        right: Identifier(
                                            VarAccess:  mask,
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_CompareWords,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr0,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: ptr1,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: wordCount,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_CompareBytes,
                                params: [
                                    Identifier(
                                        VarAccess:  ptr0,
                                    ),
                                    Identifier(
                                        VarAccess:  ptr1,
                                    ),
                                    Binary(
                                        BinaryExpression {
                                            op: Multiply,
                                            left: Identifier(
                                                VarAccess:  wordCount,
                                            ),
                                            right: Int(
                                                4,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_Compare,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr0,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: ptr1,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: wordCount,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_CompareBytes,
                                params: [
                                    Identifier(
                                        VarAccess:  ptr0,
                                    ),
                                    Identifier(
                                        VarAccess:  ptr1,
                                    ),
                                    Binary(
                                        BinaryExpression {
                                            op: Multiply,
                                            left: Identifier(
                                                VarAccess:  wordCount,
                                            ),
                                            right: Int(
                                                4,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: LoadLibrary,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: lpFileName,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: WinAPI__LoadLibrary,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: Eq,
                                                            left: Identifier(
                                                                VarAccess:  GOTHIC_BASE_VERSION,
                                                            ),
                                                            right: Int(
                                                                2,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  WinAPI__LoadLibrary,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: MEM_ReadInt,
                                                                        params: [
                                                                            Int(
                                                                                8577604,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: Some(
                                                [
                                                    Ass(
                                                        Assignment {
                                                            var: VarAccess:  WinAPI__LoadLibrary,
                                                            op: Eq,
                                                            exp: Call(
                                                                Call {
                                                                    func: MEM_ReadInt,
                                                                    params: [
                                                                        Int(
                                                                            8192588,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Binary(
                                                        BinaryExpression {
                                                            op: Plus,
                                                            left: Call(
                                                                Call {
                                                                    func: _@s,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  lpFileName,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            right: Int(
                                                                8,
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ret,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__stdcall,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  WinAPI__LoadLibrary,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ret,
                            array_size: None,
                        },
                    ],
                ),
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  ret,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: GetProcAddress,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: hModule,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: lpProcName,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: WinAPI__GetProcAddress,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: Eq,
                                                            left: Identifier(
                                                                VarAccess:  GOTHIC_BASE_VERSION,
                                                            ),
                                                            right: Int(
                                                                2,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  WinAPI__GetProcAddress,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: MEM_ReadInt,
                                                                        params: [
                                                                            Int(
                                                                                8577688,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: Some(
                                                [
                                                    Ass(
                                                        Assignment {
                                                            var: VarAccess:  WinAPI__GetProcAddress,
                                                            op: Eq,
                                                            exp: Call(
                                                                Call {
                                                                    func: MEM_ReadInt,
                                                                    params: [
                                                                        Int(
                                                                            8192260,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Binary(
                                                        BinaryExpression {
                                                            op: Plus,
                                                            left: Call(
                                                                Call {
                                                                    func: _@s,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  lpProcName,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            right: Int(
                                                                8,
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  hModule,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ret,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__stdcall,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  WinAPI__GetProcAddress,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ret,
                            array_size: None,
                        },
                    ],
                ),
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  ret,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: FindKernelDllFunction,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: name,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: KERNEL32DLL,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  KERNEL32DLL,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  KERNEL32DLL,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: LoadLibrary,
                                                    params: [
                                                        String(
                                                            KERNEL32.DLL,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: GetProcAddress,
                                params: [
                                    Identifier(
                                        VarAccess:  KERNEL32DLL,
                                    ),
                                    Identifier(
                                        VarAccess:  name,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Const(
        ConstDeclaration {
            name: PAGE_EXECUTE,
            typ: int,
            initializer: Int(
                16,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: PAGE_EXECUTE_READ,
            typ: int,
            initializer: Int(
                32,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: PAGE_EXECUTE_READWRITE,
            typ: int,
            initializer: Int(
                64,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: PAGE_EXECUTE_WRITECOPY,
            typ: int,
            initializer: Int(
                128,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: PAGE_NOACCESS,
            typ: int,
            initializer: Int(
                1,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: PAGE_READONLY,
            typ: int,
            initializer: Int(
                2,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: PAGE_READWRITE,
            typ: int,
            initializer: Int(
                4,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: PAGE_WRITECOPY,
            typ: int,
            initializer: Int(
                8,
            ),
        },
    ),
    Func(
        Function {
            name: VirtualProtect,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: lpAddress,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: dwSize,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: flNewProtect,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: adr,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  adr,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  adr,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: FindKernelDllFunction,
                                                    params: [
                                                        String(
                                                            VirtualProtect,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: lpflOldProtect,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: lpflOldProtectPtr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  lpflOldProtectPtr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@,
                                params: [
                                    Identifier(
                                        VarAccess:  lpflOldProtect,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  lpflOldProtectPtr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  flNewProtect,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  dwSize,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  lpAddress,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__stdcall,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  adr,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  lpflOldProtect,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MemoryProtectionOverride,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: address,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: size,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: resDump,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  resDump,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: VirtualProtect,
                                params: [
                                    Identifier(
                                        VarAccess:  address,
                                    ),
                                    Identifier(
                                        VarAccess:  size,
                                    ),
                                    Identifier(
                                        VarAccess:  PAGE_EXECUTE_READWRITE,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
            ],
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_OK,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_OKCANCEL,
            typ: int,
            initializer: Int(
                1,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_ABORTRETRYIGNORE,
            typ: int,
            initializer: Int(
                2,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_YESNOCANCEL,
            typ: int,
            initializer: Int(
                3,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_YESNO,
            typ: int,
            initializer: Int(
                4,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_RETRYCANCEL,
            typ: int,
            initializer: Int(
                5,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_CANCELTRYCONTINUE,
            typ: int,
            initializer: Int(
                6,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_ICONERROR,
            typ: int,
            initializer: Int(
                16,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_ICONQUESTION,
            typ: int,
            initializer: Int(
                32,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_ICONWARNING,
            typ: int,
            initializer: Int(
                48,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_ICONINFORMATION,
            typ: int,
            initializer: Int(
                64,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_ICONEXCLAMATION,
            typ: int,
            initializer: Identifier(
                VarAccess:  MB_ICONWARNING,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_ICONASTERISK,
            typ: int,
            initializer: Identifier(
                VarAccess:  MB_ICONINFORMATION,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_ICONSTOP,
            typ: int,
            initializer: Identifier(
                VarAccess:  MB_ICONERROR,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_ICONHAND,
            typ: int,
            initializer: Identifier(
                VarAccess:  MB_ICONERROR,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_DEFBUTTON1,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_DEFBUTTON2,
            typ: int,
            initializer: Int(
                256,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_DEFBUTTON3,
            typ: int,
            initializer: Int(
                512,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MB_DEFBUTTON4,
            typ: int,
            initializer: Int(
                768,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: IDOK,
            typ: int,
            initializer: Int(
                1,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: IDCANCEL,
            typ: int,
            initializer: Int(
                2,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: IDABORT,
            typ: int,
            initializer: Int(
                3,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: IDRETRY,
            typ: int,
            initializer: Int(
                4,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: IDIGNORE,
            typ: int,
            initializer: Int(
                5,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: IDYES,
            typ: int,
            initializer: Int(
                6,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: IDNO,
            typ: int,
            initializer: Int(
                7,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: IDTRYAGAIN,
            typ: int,
            initializer: Int(
                10,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: IDCONTINUE,
            typ: int,
            initializer: Int(
                11,
            ),
        },
    ),
    Func(
        Function {
            name: MEM_MessageBox,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: txt,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: caption,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: type,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: WinAPI__MessageBox_G2,
                        typ: int,
                        initializer: Int(
                            8079592,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: WinAPI__MessageBox_G1,
                        typ: int,
                        initializer: Int(
                            7713298,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: MB_TASKMODAL,
                        typ: int,
                        initializer: Int(
                            8192,
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: CALL_IntParam,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: BitOr,
                                        left: Identifier(
                                            VarAccess:  type,
                                        ),
                                        right: Identifier(
                                            VarAccess:  MB_TASKMODAL,
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: CALL_cStringPtrParam,
                            params: [
                                Identifier(
                                    VarAccess:  caption,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: CALL_cStringPtrParam,
                            params: [
                                Identifier(
                                    VarAccess:  txt,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: CALL_IntParam,
                            params: [
                                Int(
                                    0,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: CALL__stdcall,
                            params: [
                                Call(
                                    Call {
                                        func: MEMINT_SwitchG1G2,
                                        params: [
                                            Identifier(
                                                VarAccess:  WinAPI__MessageBox_G1,
                                            ),
                                            Identifier(
                                                VarAccess:  WinAPI__MessageBox_G2,
                                            ),
                                        ],
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: CALL_RetValAsInt,
                                params: [],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_InfoBox,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: txt,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: res,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  res,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_MessageBox,
                                params: [
                                    Identifier(
                                        VarAccess:  txt,
                                    ),
                                    String(
                                        Information:,
                                    ),
                                    Binary(
                                        BinaryExpression {
                                            op: BitOr,
                                            left: Identifier(
                                                VarAccess:  MB_OK,
                                            ),
                                            right: Identifier(
                                                VarAccess:  MB_ICONINFORMATION,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ArrayCreate,
            typ: int,
            params: [],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_Alloc,
                                params: [
                                    Identifier(
                                        VarAccess:  sizeof_zCArray,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ArrayFree,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: zCArray_ptr,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: array,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Identifier(
                                        VarAccess:  zCArray_ptr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  array,
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Free,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  array,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_Free,
                            params: [
                                Identifier(
                                    VarAccess:  zCArray_ptr,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ArrayClear,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: zCArray_ptr,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: array,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  zCArray_ptr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  array.array,
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Free,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  array.array,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  array.array,
                                            op: Eq,
                                            exp: Int(
                                                0,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array.numAlloc,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array.numInArray,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ArraySize,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: zCArray_ptr,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  zCArray_ptr,
                                            ),
                                            right: Int(
                                                8,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ArrayWrite,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: zCArray_ptr,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: pos,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: value,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: array,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  zCArray_ptr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: LT,
                                                left: Identifier(
                                                    VarAccess:  pos,
                                                ),
                                                right: Int(
                                                    0,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: LE,
                                                left: Identifier(
                                                    VarAccess:  array.numInArray,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  pos,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: ConcatStrings,
                                                            params: [
                                                                String(
                                                                    MEM_ArrayWrite: pos out of bounds: ,
                                                                ),
                                                                Call(
                                                                    Call {
                                                                        func: IntToString,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  pos,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteIntArray,
                            params: [
                                Identifier(
                                    VarAccess:  array.array,
                                ),
                                Identifier(
                                    VarAccess:  pos,
                                ),
                                Identifier(
                                    VarAccess:  value,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ArrayRead,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: zCArray_ptr,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: pos,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: array,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  zCArray_ptr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: LT,
                                                left: Identifier(
                                                    VarAccess:  pos,
                                                ),
                                                right: Int(
                                                    0,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: LE,
                                                left: Identifier(
                                                    VarAccess:  array.numInArray,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  pos,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: ConcatStrings,
                                                            params: [
                                                                String(
                                                                    MEM_ArrayRead: pos out of bounds: ,
                                                                ),
                                                                Call(
                                                                    Call {
                                                                        func: IntToString,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  pos,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_ReadIntArray,
                                params: [
                                    Identifier(
                                        VarAccess:  array.array,
                                    ),
                                    Identifier(
                                        VarAccess:  pos,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ArrayInsert,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: zCArray_ptr,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: value,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: array,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  zCArray_ptr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  array.array,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  array.numAlloc,
                                            op: Eq,
                                            exp: Int(
                                                16,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  array.array,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_Alloc,
                                                    params: [
                                                        Binary(
                                                            BinaryExpression {
                                                                op: Multiply,
                                                                left: Identifier(
                                                                    VarAccess:  array.numAlloc,
                                                                ),
                                                                right: Int(
                                                                    4,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: GE,
                                        left: Identifier(
                                            VarAccess:  array.numInArray,
                                        ),
                                        right: Identifier(
                                            VarAccess:  array.numAlloc,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  array.numAlloc,
                                            op: Eq,
                                            exp: Binary(
                                                BinaryExpression {
                                                    op: Multiply,
                                                    left: Int(
                                                        2,
                                                    ),
                                                    right: Identifier(
                                                        VarAccess:  array.numAlloc,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  array.array,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_Realloc,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  array.array,
                                                        ),
                                                        Binary(
                                                            BinaryExpression {
                                                                op: Multiply,
                                                                left: Identifier(
                                                                    VarAccess:  array.numInArray,
                                                                ),
                                                                right: Int(
                                                                    4,
                                                                ),
                                                            },
                                                        ),
                                                        Binary(
                                                            BinaryExpression {
                                                                op: Multiply,
                                                                left: Identifier(
                                                                    VarAccess:  array.numAlloc,
                                                                ),
                                                                right: Int(
                                                                    4,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteIntArray,
                            params: [
                                Identifier(
                                    VarAccess:  array.array,
                                ),
                                Identifier(
                                    VarAccess:  array.numInArray,
                                ),
                                Identifier(
                                    VarAccess:  value,
                                ),
                            ],
                        },
                    ),
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array.numInArray,
                        op: PlusEq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ArrayPush,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: zCArray_ptr,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: value,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayInsert,
                            params: [
                                Identifier(
                                    VarAccess:  zCArray_ptr,
                                ),
                                Identifier(
                                    VarAccess:  value,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ArrayPop,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: zCArray_ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  zCArray_ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_ArrayPop: Invalid address: zCArray_ptr may not be null!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: array,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  zCArray_ptr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  array.numInArray,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_ArrayPop: Underflow! Cannot pop from empty array.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array.numInArray,
                        op: MinusEq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_ReadIntArray,
                                params: [
                                    Identifier(
                                        VarAccess:  array.array,
                                    ),
                                    Identifier(
                                        VarAccess:  array.numInArray,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ArrayTop,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: zCArray_ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  zCArray_ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_ArrayTop: Invalid address: zCArray_ptr may not be null!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: array,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  zCArray_ptr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  array.numInArray,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_ArrayTop: Underflow! Cannot pop from empty array.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_ReadIntArray,
                                params: [
                                    Identifier(
                                        VarAccess:  array.array,
                                    ),
                                    Binary(
                                        BinaryExpression {
                                            op: Minus,
                                            left: Identifier(
                                                VarAccess:  array.numInArray,
                                            ),
                                            right: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ArrayIndexOf,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: zCArray_ptr,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: value,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  zCArray_ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_ArrayIndexOf: Invalid address: zCArray_ptr may not be null!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Unary(
                                                UnaryExpression {
                                                    op: Minus,
                                                    right: Int(
                                                        1,
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: array,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  zCArray_ptr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: i,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loop,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loop,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  i,
                                        ),
                                        right: Identifier(
                                            VarAccess:  array.numInArray,
                                        ),
                                    },
                                ),
                                body: [
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: Eq,
                                                            left: Call(
                                                                Call {
                                                                    func: MEM_ReadIntArray,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  array.array,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  i,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  value,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        ReturnStatement(
                                                            Some(
                                                                Identifier(
                                                                    VarAccess:  i,
                                                                ),
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  i,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loop,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Minus,
                                right: Int(
                                    1,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ArrayRemoveIndex,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: zCArray_ptr,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: index,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  zCArray_ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_ArrayRemoveIndex: Invalid address: zCArray_ptr may not be null!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: array,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  zCArray_ptr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LE,
                                        left: Identifier(
                                            VarAccess:  array.numInArray,
                                        ),
                                        right: Identifier(
                                            VarAccess:  index,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_ArrayRemoveIndex: index lies beyond the end of the array!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array.numInArray,
                        op: MinusEq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteIntArray,
                            params: [
                                Identifier(
                                    VarAccess:  array.array,
                                ),
                                Identifier(
                                    VarAccess:  index,
                                ),
                                Call(
                                    Call {
                                        func: MEM_ReadIntArray,
                                        params: [
                                            Identifier(
                                                VarAccess:  array.array,
                                            ),
                                            Identifier(
                                                VarAccess:  array.numInArray,
                                            ),
                                        ],
                                    },
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Var(
        [
            VarDeclaration {
                typ: int,
                name: MEMINT_ArrayRemoveValue_OnlyOnce,
                array_size: None,
            },
        ],
    ),
    Func(
        Function {
            name: MEM_ArrayRemoveValue,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: zCArray_ptr,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: value,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  zCArray_ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_ArrayRemoveValue: Invalid address: zCArray_ptr may not be null!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: array,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  zCArray_ptr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: i,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loop,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loop,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  i,
                                        ),
                                        right: Identifier(
                                            VarAccess:  array.numInArray,
                                        ),
                                    },
                                ),
                                body: [
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: Eq,
                                                            left: Call(
                                                                Call {
                                                                    func: MEM_ReadIntArray,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  array.array,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  i,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  value,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  array.numInArray,
                                                                op: MinusEq,
                                                                exp: Int(
                                                                    1,
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteIntArray,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  array.array,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  i,
                                                                        ),
                                                                        Call(
                                                                            Call {
                                                                                func: MEM_ReadIntArray,
                                                                                params: [
                                                                                    Identifier(
                                                                                        VarAccess:  array.array,
                                                                                    ),
                                                                                    Identifier(
                                                                                        VarAccess:  array.numInArray,
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        If(
                                                            IfStatement {
                                                                branches: [
                                                                    IfBranch {
                                                                        cond: Identifier(
                                                                            VarAccess:  MEMINT_ArrayRemoveValue_OnlyOnce,
                                                                        ),
                                                                        body: [
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  MEMINT_ArrayRemoveValue_OnlyOnce,
                                                                                    op: Eq,
                                                                                    exp: Int(
                                                                                        2,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            ReturnStatement(
                                                                                None,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ],
                                                                else_branch: None,
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: Some(
                                                [
                                                    Ass(
                                                        Assignment {
                                                            var: VarAccess:  i,
                                                            op: PlusEq,
                                                            exp: Int(
                                                                1,
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loop,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ArrayRemoveValueOnce,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: zCArray_ptr,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: value,
                    array_size: None,
                },
            ],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_ArrayRemoveValue_OnlyOnce,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  true,
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayRemoveValue,
                            params: [
                                Identifier(
                                    VarAccess:  zCArray_ptr,
                                ),
                                Identifier(
                                    VarAccess:  value,
                                ),
                            ],
                        },
                    ),
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: NotEq,
                                        left: Identifier(
                                            VarAccess:  MEMINT_ArrayRemoveValue_OnlyOnce,
                                        ),
                                        right: Int(
                                            2,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Warn,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: ConcatStrings,
                                                            params: [
                                                                String(
                                                                    MEM_ArrayRemoveValueOnce: Could not find value: ,
                                                                ),
                                                                Call(
                                                                    Call {
                                                                        func: IntToString,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  value,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_ArrayRemoveValue_OnlyOnce,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  false,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_QSort,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: base,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: num,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: size,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: comparator,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: qsort_G1,
                        typ: int,
                        initializer: Int(
                            7828863,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: qsort_G2,
                        typ: int,
                        initializer: Int(
                            8195951,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: compare_G1,
                        typ: int,
                        initializer: Int(
                            5502288,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: compare_G2,
                        typ: int,
                        initializer: Int(
                            5586080,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  comparator,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  comparator,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEMINT_SwitchG1G2,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  compare_G1,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  compare_G2,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: qsort,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  qsort,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEMINT_SwitchG1G2,
                                params: [
                                    Identifier(
                                        VarAccess:  qsort_G1,
                                    ),
                                    Identifier(
                                        VarAccess:  qsort_G2,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  comparator,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  size,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  num,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  base,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__cdecl,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  qsort,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ArraySort,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: zCArray_ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  zCArray_ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_ArraySort: Invalid address: zCArray_ptr may not be null!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: array,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  zCArray_ptr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_QSort,
                            params: [
                                Identifier(
                                    VarAccess:  array.array,
                                ),
                                Identifier(
                                    VarAccess:  array.numInArray,
                                ),
                                Int(
                                    4,
                                ),
                                Int(
                                    0,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ArrayUnique,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: zCArray_ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  zCArray_ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_ArrayUnique: Invalid address: zCArray_ptr may not be null!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: array,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  zCArray_ptr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: reader,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: writer,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: oldVal,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: newVal,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  reader,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  writer,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loop,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loop,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  reader,
                                        ),
                                        right: Identifier(
                                            VarAccess:  array.numInArray,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  newVal,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_ReadIntArray,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  array.array,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  reader,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: Or,
                                                            left: Unary(
                                                                UnaryExpression {
                                                                    op: Negate,
                                                                    right: Identifier(
                                                                        VarAccess:  reader,
                                                                    ),
                                                                },
                                                            ),
                                                            right: Binary(
                                                                BinaryExpression {
                                                                    op: NotEq,
                                                                    left: Identifier(
                                                                        VarAccess:  newVal,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  oldVal,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteIntArray,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  array.array,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  writer,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  newVal,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  writer,
                                                                op: PlusEq,
                                                                exp: Int(
                                                                    1,
                                                                ),
                                                            },
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  oldVal,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  newVal,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  reader,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loop,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array.numInArray,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  writer,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ArrayToString,
            typ: string,
            params: [
                VarDeclaration {
                    typ: int,
                    name: zCArray_ptr,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: string,
                            name: res,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  res,
                        op: Eq,
                        exp: String(
                            ,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  zCArray_ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_ArrayRemoveValue: Invalid address: zCArray_ptr may not be null!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            String(
                                                ,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: array,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  zCArray_ptr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: i,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loop,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loop,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  i,
                                        ),
                                        right: Identifier(
                                            VarAccess:  array.numInArray,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  res,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: ConcatStrings,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  res,
                                                        ),
                                                        Call(
                                                            Call {
                                                                func: IntToString,
                                                                params: [
                                                                    Call(
                                                                        Call {
                                                                            func: MEM_ReadIntArray,
                                                                            params: [
                                                                                Identifier(
                                                                                    VarAccess:  array.array,
                                                                                ),
                                                                                Identifier(
                                                                                    VarAccess:  i,
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: LT,
                                                            left: Identifier(
                                                                VarAccess:  i,
                                                            ),
                                                            right: Binary(
                                                                BinaryExpression {
                                                                    op: Minus,
                                                                    left: Identifier(
                                                                        VarAccess:  array.numInArray,
                                                                    ),
                                                                    right: Int(
                                                                        1,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  res,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: ConcatStrings,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  res,
                                                                            ),
                                                                            String(
                                                                                ,,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  i,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loop,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  res,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: STR_GetCharAt,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: pos,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zString,
                            name: zStr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zStr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: _@s,
                                            params: [
                                                Identifier(
                                                    VarAccess:  str,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: LT,
                                                left: Identifier(
                                                    VarAccess:  pos,
                                                ),
                                                right: Int(
                                                    0,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: GE,
                                                left: Identifier(
                                                    VarAccess:  pos,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  zStr.len,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Warn,
                                                params: [
                                                    String(
                                                        STR_GetCharAt: Reading out of bounds! returning 0.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_ReadByte,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  zStr.ptr,
                                            ),
                                            right: Identifier(
                                                VarAccess:  pos,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: STR_Len,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zString,
                            name: zStr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zStr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: _@s,
                                            params: [
                                                Identifier(
                                                    VarAccess:  str,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  zStr.len,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: STR_toChar,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zString,
                            name: zStr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zStr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: _@s,
                                            params: [
                                                Identifier(
                                                    VarAccess:  str,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  zStr.ptr,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: STRINT_toChar,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: STR_ToChar,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: STR_FromChar,
            typ: string,
            params: [
                VarDeclaration {
                    typ: int,
                    name: char,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: string,
                            name: str,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: String(
                            ,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ptr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ptr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@s,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  char,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__thiscall,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ptr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Int(
                                                                    4199328,
                                                                ),
                                                                Int(
                                                                    4198592,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  str,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: STR_SubStr,
            typ: string,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: start,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: count,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: LT,
                                                left: Identifier(
                                                    VarAccess:  start,
                                                ),
                                                right: Int(
                                                    0,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: LT,
                                                left: Identifier(
                                                    VarAccess:  count,
                                                ),
                                                right: Int(
                                                    0,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        STR_SubStr: start and count may not be negative.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            String(
                                                ,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zString,
                            name: zStrSrc,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zString,
                            name: zStrDst,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: string,
                            name: dstStr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  dstStr,
                        op: Eq,
                        exp: String(
                            ,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zStrSrc,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: _@s,
                                            params: [
                                                Identifier(
                                                    VarAccess:  str,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zStrDst,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: _@s,
                                            params: [
                                                Identifier(
                                                    VarAccess:  dstStr,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  zStrSrc.len,
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: Plus,
                                                left: Identifier(
                                                    VarAccess:  start,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  count,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: LT,
                                                            left: Identifier(
                                                                VarAccess:  zStrSrc.len,
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  start,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_Warn,
                                                                    params: [
                                                                        String(
                                                                            STR_SubStr: The desired start of the substring lies beyond the end of the string.,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        ReturnStatement(
                                                            Some(
                                                                String(
                                                                    ,
                                                                ),
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: Some(
                                                [
                                                    VarDeclarations(
                                                        [
                                                            VarDeclaration {
                                                                typ: string,
                                                                name: saveStr,
                                                                array_size: None,
                                                            },
                                                        ],
                                                    ),
                                                    VarDeclarations(
                                                        [
                                                            VarDeclaration {
                                                                typ: int,
                                                                name: saveStart,
                                                                array_size: None,
                                                            },
                                                        ],
                                                    ),
                                                    VarDeclarations(
                                                        [
                                                            VarDeclaration {
                                                                typ: int,
                                                                name: saveCount,
                                                                array_size: None,
                                                            },
                                                        ],
                                                    ),
                                                    Ass(
                                                        Assignment {
                                                            var: VarAccess:  saveStr,
                                                            op: Eq,
                                                            exp: Identifier(
                                                                VarAccess:  str,
                                                            ),
                                                        },
                                                    ),
                                                    Ass(
                                                        Assignment {
                                                            var: VarAccess:  saveStart,
                                                            op: Eq,
                                                            exp: Identifier(
                                                                VarAccess:  start,
                                                            ),
                                                        },
                                                    ),
                                                    Ass(
                                                        Assignment {
                                                            var: VarAccess:  saveCount,
                                                            op: Eq,
                                                            exp: Identifier(
                                                                VarAccess:  count,
                                                            ),
                                                        },
                                                    ),
                                                    Exp(
                                                        Call(
                                                            Call {
                                                                func: MEM_Warn,
                                                                params: [
                                                                    String(
                                                                        STR_SubStr: The end of the desired substring exceeds the end of the string.,
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                    Ass(
                                                        Assignment {
                                                            var: VarAccess:  str,
                                                            op: Eq,
                                                            exp: Identifier(
                                                                VarAccess:  saveStr,
                                                            ),
                                                        },
                                                    ),
                                                    Ass(
                                                        Assignment {
                                                            var: VarAccess:  start,
                                                            op: Eq,
                                                            exp: Identifier(
                                                                VarAccess:  saveStart,
                                                            ),
                                                        },
                                                    ),
                                                    Ass(
                                                        Assignment {
                                                            var: VarAccess:  count,
                                                            op: Eq,
                                                            exp: Identifier(
                                                                VarAccess:  saveCount,
                                                            ),
                                                        },
                                                    ),
                                                    Ass(
                                                        Assignment {
                                                            var: VarAccess:  count,
                                                            op: Eq,
                                                            exp: Binary(
                                                                BinaryExpression {
                                                                    op: Minus,
                                                                    left: Identifier(
                                                                        VarAccess:  zStrSrc.len,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  start,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zStrDst.ptr,
                        op: Eq,
                        exp: Binary(
                            BinaryExpression {
                                op: Plus,
                                left: Call(
                                    Call {
                                        func: MEM_Alloc,
                                        params: [
                                            Binary(
                                                BinaryExpression {
                                                    op: Plus,
                                                    left: Identifier(
                                                        VarAccess:  count,
                                                    ),
                                                    right: Int(
                                                        2,
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                right: Int(
                                    1,
                                ),
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zStrDst.res,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  count,
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_CopyBytes,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  zStrSrc.ptr,
                                        ),
                                        right: Identifier(
                                            VarAccess:  start,
                                        ),
                                    },
                                ),
                                Identifier(
                                    VarAccess:  zStrDst.ptr,
                                ),
                                Identifier(
                                    VarAccess:  count,
                                ),
                            ],
                        },
                    ),
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zStrDst.len,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  count,
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  dstStr,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: STR_Prefix,
            typ: string,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: len,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: STR_SubStr,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                    Int(
                                        0,
                                    ),
                                    Identifier(
                                        VarAccess:  len,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Const(
        ConstDeclaration {
            name: STR_GREATER,
            typ: int,
            initializer: Int(
                1,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: STR_EQUAL,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: STR_SMALLER,
            typ: int,
            initializer: Unary(
                UnaryExpression {
                    op: Minus,
                    right: Int(
                        1,
                    ),
                },
            ),
        },
    ),
    Func(
        Function {
            name: STR_Compare,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str1,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: str2,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: strncmp_G1,
                        typ: int,
                        initializer: Int(
                            7887344,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: strncmp_G2,
                        typ: int,
                        initializer: Int(
                            8254144,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ptr1,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ptr1,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@s,
                                params: [
                                    Identifier(
                                        VarAccess:  str1,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ptr2,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ptr2,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@s,
                                params: [
                                    Identifier(
                                        VarAccess:  str2,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: len1,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  len1,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  ptr1,
                                            ),
                                            right: Int(
                                                12,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: len2,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  len2,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  ptr2,
                                            ),
                                            right: Int(
                                                12,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: n,
                            array_size: None,
                        },
                    ],
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: GT,
                                        left: Identifier(
                                            VarAccess:  len1,
                                        ),
                                        right: Identifier(
                                            VarAccess:  len2,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  n,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  len2,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Ass(
                                    Assignment {
                                        var: VarAccess:  n,
                                        op: Eq,
                                        exp: Identifier(
                                            VarAccess:  len1,
                                        ),
                                    },
                                ),
                            ],
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ptr1,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  ptr1,
                                            ),
                                            right: Int(
                                                8,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ptr2,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  ptr2,
                                            ),
                                            right: Int(
                                                8,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: And,
                                        left: Unary(
                                            UnaryExpression {
                                                op: Negate,
                                                right: Identifier(
                                                    VarAccess:  ptr1,
                                                ),
                                            },
                                        ),
                                        right: Unary(
                                            UnaryExpression {
                                                op: Negate,
                                                right: Identifier(
                                                    VarAccess:  ptr2,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  STR_EQUAL,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ptr1,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  STR_SMALLER,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ptr2,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  STR_GREATER,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  n,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ptr2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ptr1,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ret,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__cdecl,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  strncmp_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  strncmp_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ret,
                            array_size: None,
                        },
                    ],
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  ret,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: GT,
                                                            left: Identifier(
                                                                VarAccess:  len1,
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  len2,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        ReturnStatement(
                                                            Some(
                                                                Identifier(
                                                                    VarAccess:  STR_GREATER,
                                                                ),
                                                            ),
                                                        ),
                                                    ],
                                                },
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: LT,
                                                            left: Identifier(
                                                                VarAccess:  len1,
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  len2,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        ReturnStatement(
                                                            Some(
                                                                Identifier(
                                                                    VarAccess:  STR_SMALLER,
                                                                ),
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  ret,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: STR_ToInt,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: len,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  len,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: STR_Len,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: buf,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: index,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  buf,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: STR_toChar,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  index,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: res,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  res,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: minus,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  minus,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  FALSE,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loopStart,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loopStart,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  index,
                                        ),
                                        right: Identifier(
                                            VarAccess:  len,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: chr,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  chr,
                                            op: Eq,
                                            exp: Binary(
                                                BinaryExpression {
                                                    op: BitAnd,
                                                    left: Call(
                                                        Call {
                                                            func: MEM_ReadInt,
                                                            params: [
                                                                Binary(
                                                                    BinaryExpression {
                                                                        op: Plus,
                                                                        left: Identifier(
                                                                            VarAccess:  buf,
                                                                        ),
                                                                        right: Identifier(
                                                                            VarAccess:  index,
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    right: Int(
                                                        255,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: And,
                                                            left: Binary(
                                                                BinaryExpression {
                                                                    op: GE,
                                                                    left: Identifier(
                                                                        VarAccess:  chr,
                                                                    ),
                                                                    right: Int(
                                                                        48,
                                                                    ),
                                                                },
                                                            ),
                                                            right: Binary(
                                                                BinaryExpression {
                                                                    op: LE,
                                                                    left: Identifier(
                                                                        VarAccess:  chr,
                                                                    ),
                                                                    right: Int(
                                                                        57,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  res,
                                                                op: Eq,
                                                                exp: Binary(
                                                                    BinaryExpression {
                                                                        op: Plus,
                                                                        left: Binary(
                                                                            BinaryExpression {
                                                                                op: Multiply,
                                                                                left: Identifier(
                                                                                    VarAccess:  res,
                                                                                ),
                                                                                right: Int(
                                                                                    10,
                                                                                ),
                                                                            },
                                                                        ),
                                                                        right: Binary(
                                                                            BinaryExpression {
                                                                                op: Minus,
                                                                                left: Identifier(
                                                                                    VarAccess:  chr,
                                                                                ),
                                                                                right: Int(
                                                                                    48,
                                                                                ),
                                                                            },
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: Eq,
                                                            left: Identifier(
                                                                VarAccess:  index,
                                                            ),
                                                            right: Int(
                                                                0,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        If(
                                                            IfStatement {
                                                                branches: [
                                                                    IfBranch {
                                                                        cond: Binary(
                                                                            BinaryExpression {
                                                                                op: Eq,
                                                                                left: Identifier(
                                                                                    VarAccess:  chr,
                                                                                ),
                                                                                right: Int(
                                                                                    43,
                                                                                ),
                                                                            },
                                                                        ),
                                                                        body: [],
                                                                    },
                                                                    IfBranch {
                                                                        cond: Binary(
                                                                            BinaryExpression {
                                                                                op: Eq,
                                                                                left: Identifier(
                                                                                    VarAccess:  chr,
                                                                                ),
                                                                                right: Int(
                                                                                    45,
                                                                                ),
                                                                            },
                                                                        ),
                                                                        body: [
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  minus,
                                                                                    op: Eq,
                                                                                    exp: Identifier(
                                                                                        VarAccess:  true,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ],
                                                                else_branch: Some(
                                                                    [
                                                                        Exp(
                                                                            Call(
                                                                                Call {
                                                                                    func: MEM_Warn,
                                                                                    params: [
                                                                                        Call(
                                                                                            Call {
                                                                                                func: ConcatStrings,
                                                                                                params: [
                                                                                                    String(
                                                                                                        STR_ToInt: cannot convert string: ,
                                                                                                    ),
                                                                                                    Identifier(
                                                                                                        VarAccess:  str,
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                        ReturnStatement(
                                                                            Some(
                                                                                Int(
                                                                                    0,
                                                                                ),
                                                                            ),
                                                                        ),
                                                                    ],
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: Some(
                                                [
                                                    Exp(
                                                        Call(
                                                            Call {
                                                                func: MEM_Warn,
                                                                params: [
                                                                    Call(
                                                                        Call {
                                                                            func: ConcatStrings,
                                                                            params: [
                                                                                String(
                                                                                    STR_ToInt: cannot convert string: ,
                                                                                ),
                                                                                Identifier(
                                                                                    VarAccess:  str,
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                    ReturnStatement(
                                                        Some(
                                                            Int(
                                                                0,
                                                            ),
                                                        ),
                                                    ),
                                                ],
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  index,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loopStart,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  minus,
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Unary(
                                                UnaryExpression {
                                                    op: Minus,
                                                    right: Identifier(
                                                        VarAccess:  res,
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                ReturnStatement(
                                    Some(
                                        Unary(
                                            UnaryExpression {
                                                op: Plus,
                                                right: Identifier(
                                                    VarAccess:  res,
                                                ),
                                            },
                                        ),
                                    ),
                                ),
                            ],
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: STR_IndexOf,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: tok,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zString,
                            name: zStr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zStr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: _@s,
                                            params: [
                                                Identifier(
                                                    VarAccess:  str,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zString,
                            name: zTok,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zTok,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: _@s,
                                            params: [
                                                Identifier(
                                                    VarAccess:  tok,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  zTok.len,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  zStr.len,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Unary(
                                                UnaryExpression {
                                                    op: Minus,
                                                    right: Int(
                                                        1,
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: startPos,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  startPos,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  zStr.ptr,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: startMax,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  startMax,
                        op: Eq,
                        exp: Binary(
                            BinaryExpression {
                                op: Minus,
                                left: Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  zStr.ptr,
                                        ),
                                        right: Identifier(
                                            VarAccess:  zStr.len,
                                        ),
                                    },
                                ),
                                right: Identifier(
                                    VarAccess:  zTok.len,
                                ),
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loopPos,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loopPos,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LE,
                                        left: Identifier(
                                            VarAccess:  startPos,
                                        ),
                                        right: Identifier(
                                            VarAccess:  startMax,
                                        ),
                                    },
                                ),
                                body: [
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Call(
                                                        Call {
                                                            func: MEM_CompareBytes,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  startPos,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  zTok.ptr,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  zTok.len,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    body: [
                                                        ReturnStatement(
                                                            Some(
                                                                Binary(
                                                                    BinaryExpression {
                                                                        op: Minus,
                                                                        left: Identifier(
                                                                            VarAccess:  startPos,
                                                                        ),
                                                                        right: Identifier(
                                                                            VarAccess:  zStr.ptr,
                                                                        ),
                                                                    },
                                                                ),
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  startPos,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loopPos,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Minus,
                                right: Int(
                                    1,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Const(
        ConstDeclaration {
            name: STRINT_SplitArray,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Func(
        Function {
            name: STRINT_SplitReset,
            typ: void,
            params: [],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  STRINT_SplitArray,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  STRINT_SplitArray,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_ArrayCreate,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: arr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  arr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  STRINT_SplitArray,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: i,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loopPos,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loopPos,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  i,
                                        ),
                                        right: Identifier(
                                            VarAccess:  arr.numInArray,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Free,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: MEM_ReadIntArray,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  arr.array,
                                                                ),
                                                                Binary(
                                                                    BinaryExpression {
                                                                        op: Plus,
                                                                        left: Identifier(
                                                                            VarAccess:  i,
                                                                        ),
                                                                        right: Int(
                                                                            1,
                                                                        ),
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  i,
                                            op: PlusEq,
                                            exp: Int(
                                                2,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loopPos,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayClear,
                            params: [
                                Identifier(
                                    VarAccess:  STRINT_SplitArray,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: STRINT_Split,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: Str,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: seperator,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: STRINT_SplitReset,
                            params: [],
                        },
                    ),
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zString,
                            name: zStr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zStr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: _@s,
                                            params: [
                                                Identifier(
                                                    VarAccess:  Str,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: NotEq,
                                        left: Call(
                                            Call {
                                                func: STR_Len,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  seperator,
                                                    ),
                                                ],
                                            },
                                        ),
                                        right: Int(
                                            1,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        STR_Split: Seperator must be a string of length 1!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  zStr.len,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ArrayInsert,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  STRINT_SplitArray,
                                                    ),
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ArrayInsert,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  STRINT_SplitArray,
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEM_Alloc,
                                                            params: [
                                                                Int(
                                                                    0,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: cSep,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  cSep,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: STR_GetCharAt,
                                params: [
                                    Identifier(
                                        VarAccess:  seperator,
                                    ),
                                    Int(
                                        0,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: currTokStart,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  currTokStart,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  zStr.ptr,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: strEnd,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  strEnd,
                        op: Eq,
                        exp: Binary(
                            BinaryExpression {
                                op: Plus,
                                left: Identifier(
                                    VarAccess:  zStr.ptr,
                                ),
                                right: Identifier(
                                    VarAccess:  zStr.len,
                                ),
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: walker,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  walker,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  currTokStart,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loopPos,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loopPos,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LE,
                                        left: Identifier(
                                            VarAccess:  walker,
                                        ),
                                        right: Identifier(
                                            VarAccess:  strEnd,
                                        ),
                                    },
                                ),
                                body: [
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: Or,
                                                            left: Binary(
                                                                BinaryExpression {
                                                                    op: Eq,
                                                                    left: Identifier(
                                                                        VarAccess:  walker,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  strEnd,
                                                                    ),
                                                                },
                                                            ),
                                                            right: Binary(
                                                                BinaryExpression {
                                                                    op: Eq,
                                                                    left: Call(
                                                                        Call {
                                                                            func: MEM_ReadByte,
                                                                            params: [
                                                                                Identifier(
                                                                                    VarAccess:  walker,
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  cSep,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        VarDeclarations(
                                                            [
                                                                VarDeclaration {
                                                                    typ: int,
                                                                    name: len,
                                                                    array_size: None,
                                                                },
                                                            ],
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  len,
                                                                op: Eq,
                                                                exp: Binary(
                                                                    BinaryExpression {
                                                                        op: Minus,
                                                                        left: Identifier(
                                                                            VarAccess:  walker,
                                                                        ),
                                                                        right: Identifier(
                                                                            VarAccess:  currTokStart,
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        VarDeclarations(
                                                            [
                                                                VarDeclaration {
                                                                    typ: int,
                                                                    name: subStr,
                                                                    array_size: None,
                                                                },
                                                            ],
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  subStr,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: MEM_Alloc,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  len,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_CopyBytes,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  currTokStart,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  subStr,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  len,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_ArrayInsert,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  STRINT_SplitArray,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  len,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_ArrayInsert,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  STRINT_SplitArray,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  subStr,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  currTokStart,
                                                                op: Eq,
                                                                exp: Binary(
                                                                    BinaryExpression {
                                                                        op: Plus,
                                                                        left: Identifier(
                                                                            VarAccess:  walker,
                                                                        ),
                                                                        right: Int(
                                                                            1,
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  walker,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loopPos,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: STRINT_SplitGet,
            typ: string,
            params: [
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: arr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  arr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  STRINT_SplitArray,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LE,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Divide,
                                                left: Identifier(
                                                    VarAccess:  arr.numInArray,
                                                ),
                                                right: Int(
                                                    2,
                                                ),
                                            },
                                        ),
                                        right: Identifier(
                                            VarAccess:  offset,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        STR_Split: The string does not decompose into that many substrings!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            String(
                                                ,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: string,
                            name: str,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: String(
                            ,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zString,
                            name: zstr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zstr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: _@s,
                                            params: [
                                                Identifier(
                                                    VarAccess:  str,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: len,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  len,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadIntArray,
                                params: [
                                    Identifier(
                                        VarAccess:  arr.array,
                                    ),
                                    Binary(
                                        BinaryExpression {
                                            op: Multiply,
                                            left: Int(
                                                2,
                                            ),
                                            right: Identifier(
                                                VarAccess:  offset,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zstr.ptr,
                        op: Eq,
                        exp: Binary(
                            BinaryExpression {
                                op: Plus,
                                left: Call(
                                    Call {
                                        func: MEM_Alloc,
                                        params: [
                                            Binary(
                                                BinaryExpression {
                                                    op: Plus,
                                                    left: Identifier(
                                                        VarAccess:  len,
                                                    ),
                                                    right: Int(
                                                        2,
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                right: Int(
                                    1,
                                ),
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zstr.len,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  len,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zstr.res,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  len,
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_CopyBytes,
                            params: [
                                Call(
                                    Call {
                                        func: MEM_ReadIntArray,
                                        params: [
                                            Identifier(
                                                VarAccess:  arr.array,
                                            ),
                                            Binary(
                                                BinaryExpression {
                                                    op: Plus,
                                                    left: Binary(
                                                        BinaryExpression {
                                                            op: Multiply,
                                                            left: Int(
                                                                2,
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  offset,
                                                            ),
                                                        },
                                                    ),
                                                    right: Int(
                                                        1,
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                Identifier(
                                    VarAccess:  zstr.ptr,
                                ),
                                Identifier(
                                    VarAccess:  len,
                                ),
                            ],
                        },
                    ),
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  str,
                        ),
                    ),
                ),
            ],
        },
    ),
    Var(
        [
            VarDeclaration {
                typ: string,
                name: STRINT_SplitCache,
                array_size: None,
            },
        ],
    ),
    Var(
        [
            VarDeclaration {
                typ: string,
                name: STRINT_SplitSeperatorCache,
                array_size: None,
            },
        ],
    ),
    Func(
        Function {
            name: STR_Split,
            typ: string,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: separator,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: And,
                                        left: Binary(
                                            BinaryExpression {
                                                op: And,
                                                left: Call(
                                                    Call {
                                                        func: Hlp_StrCmp,
                                                        params: [
                                                            Identifier(
                                                                VarAccess:  STRINT_SplitCache,
                                                            ),
                                                            Identifier(
                                                                VarAccess:  str,
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                right: Unary(
                                                    UnaryExpression {
                                                        op: Negate,
                                                        right: Call(
                                                            Call {
                                                                func: Hlp_StrCmp,
                                                                params: [
                                                                    Identifier(
                                                                        VarAccess:  STRINT_SplitCache,
                                                                    ),
                                                                    String(
                                                                        ,
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Call(
                                            Call {
                                                func: Hlp_StrCmp,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  STRINT_SplitSeperatorCache,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  separator,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Call(
                                                Call {
                                                    func: STRINT_SplitGet,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  offset,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: STRINT_Split,
                            params: [
                                Identifier(
                                    VarAccess:  str,
                                ),
                                Identifier(
                                    VarAccess:  separator,
                                ),
                            ],
                        },
                    ),
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  STRINT_SplitCache,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  str,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  STRINT_SplitSeperatorCache,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  separator,
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: STRINT_SplitGet,
                                params: [
                                    Identifier(
                                        VarAccess:  offset,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: STR_SplitCount,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: seperator,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Or,
                                                left: Unary(
                                                    UnaryExpression {
                                                        op: Negate,
                                                        right: Call(
                                                            Call {
                                                                func: Hlp_StrCmp,
                                                                params: [
                                                                    Identifier(
                                                                        VarAccess:  STRINT_SplitCache,
                                                                    ),
                                                                    Identifier(
                                                                        VarAccess:  str,
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                                right: Unary(
                                                    UnaryExpression {
                                                        op: Negate,
                                                        right: Call(
                                                            Call {
                                                                func: Hlp_StrCmp,
                                                                params: [
                                                                    Identifier(
                                                                        VarAccess:  STRINT_SplitSeperatorCache,
                                                                    ),
                                                                    Identifier(
                                                                        VarAccess:  seperator,
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Call(
                                            Call {
                                                func: Hlp_StrCmp,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  STRINT_SplitCache,
                                                    ),
                                                    String(
                                                        ,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: STRINT_Split,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  str,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  seperator,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  STRINT_SplitCache,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  STRINT_SplitSeperatorCache,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  seperator,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: arr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  arr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  STRINT_SplitArray,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: Divide,
                                left: Identifier(
                                    VarAccess:  arr.numInArray,
                                ),
                                right: Int(
                                    2,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: STR_Upper,
            typ: string,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: zSTRING__Upper_G1,
                        typ: int,
                        initializer: Int(
                            4608912,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: zSTRING__Upper_G2,
                        typ: int,
                        initializer: Int(
                            4631296,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ptr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ptr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@s,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__thiscall,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ptr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  zSTRING__Upper_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  zSTRING__Upper_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  str,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_GetBuf_8K_Sub,
            typ: int,
            params: [],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: buf,
                            array_size: Some(
                                Size(
                                    2048,
                                ),
                            ),
                        },
                    ],
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  buf,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_GetBuf_8K,
            typ: int,
            params: [],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEMINT_GetBuf_8K_Sub,
                            params: [],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPopInst,
                            params: [],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushInst,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHINT,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_FindParserSymbol,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: inst,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: zCParser__GetIndex_G1,
                        typ: int,
                        initializer: Int(
                            7250112,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: zCParser__GetIndex_G2,
                        typ: int,
                        initializer: Int(
                            7943280,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ptr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ptr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@s,
                                params: [
                                    Identifier(
                                        VarAccess:  inst,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ptr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ret,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__thiscall,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  currParserAddress,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  zCParser__GetIndex_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  zCParser__GetIndex_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ret,
                            array_size: None,
                        },
                    ],
                ),
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  ret,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetSymbolIndex,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: inst,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_FindParserSymbol,
                                params: [
                                    Identifier(
                                        VarAccess:  inst,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetParserSymbol,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: inst,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: symID,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  symID,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_FindParserSymbol,
                                params: [
                                    Identifier(
                                        VarAccess:  inst,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  symID,
                                        ),
                                        right: Unary(
                                            UnaryExpression {
                                                op: Minus,
                                                right: Int(
                                                    1,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                ReturnStatement(
                                    Some(
                                        Call(
                                            Call {
                                                func: MEM_ReadIntArray,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  currSymbolTableAddress,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  symID,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ),
                            ],
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetSymbol,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: inst,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_GetParserSymbol,
                                params: [
                                    Identifier(
                                        VarAccess:  inst,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetSymbolByIndex,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: id,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: LT,
                                                left: Identifier(
                                                    VarAccess:  id,
                                                ),
                                                right: Int(
                                                    0,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: GE,
                                                left: Identifier(
                                                    VarAccess:  id,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  currSymbolTableLength,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: ConcatStrings,
                                                            params: [
                                                                String(
                                                                    MEM_GetSymbolByIndex: Index is not in valid bounds: ,
                                                                ),
                                                                Call(
                                                                    Call {
                                                                        func: IntToString,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  id,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_ReadIntArray,
                                params: [
                                    Identifier(
                                        VarAccess:  currSymbolTableAddress,
                                    ),
                                    Identifier(
                                        VarAccess:  id,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_PushIntParam,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: param,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  param,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_PushIntParam,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: param,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEMINT_PushIntParam,
                            params: [
                                Identifier(
                                    VarAccess:  param,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_PushInstParam,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: inst,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEMINT_StackPushInst,
                            params: [
                                Identifier(
                                    VarAccess:  inst,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_PushStringParamSub,
            typ: string,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: n,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  n,
                        op: PlusEq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            10,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  n,
                                            op: Eq,
                                            exp: Int(
                                                0,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s0,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s0,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            1,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s1,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s1,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s1,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            2,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s2,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s2,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s2,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            3,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s3,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s3,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s3,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            4,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s4,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s4,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s4,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            5,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s5,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s5,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s5,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            6,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s6,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s6,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s6,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            7,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s7,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s7,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s7,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            8,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s8,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s8,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s8,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  n,
                                        ),
                                        right: Int(
                                            9,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: s9,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  s9,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  str,
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  s9,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_AssertFail,
                            params: [
                                String(
                                    Should be never here.,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_PushStringParam,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEMINT_PushStringParamSub,
                            params: [
                                Identifier(
                                    VarAccess:  str,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_PopIntResult,
            typ: int,
            params: [],
            body: [],
        },
    ),
    Func(
        Function {
            name: MEM_PopStringResult,
            typ: string,
            params: [],
            body: [],
        },
    ),
    Func(
        Function {
            name: MEM_PopInstResult,
            typ: MEMINT_HelperClass,
            params: [],
            body: [],
        },
    ),
    Func(
        Function {
            name: MEM_CallByID,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: symbID,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  symbID,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: ConcatStrings,
                                                            params: [
                                                                String(
                                                                    MEM_CallByID: symbID may not be negative but is ,
                                                                ),
                                                                Call(
                                                                    Call {
                                                                        func: IntToString,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  symbID,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCPar_Symbol,
                            name: sym,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  sym,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: MEM_ReadIntArray,
                                            params: [
                                                Identifier(
                                                    VarAccess:  contentSymbolTableAddress,
                                                ),
                                                Identifier(
                                                    VarAccess:  symbID,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: type,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  type,
                        op: Eq,
                        exp: Binary(
                            BinaryExpression {
                                op: BitAnd,
                                left: Identifier(
                                    VarAccess:  sym.bitfield,
                                ),
                                right: Identifier(
                                    VarAccess:  zCPar_Symbol_bitfield_type,
                                ),
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: And,
                                        left: Binary(
                                            BinaryExpression {
                                                op: And,
                                                left: Binary(
                                                    BinaryExpression {
                                                        op: NotEq,
                                                        left: Identifier(
                                                            VarAccess:  type,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  zPAR_TYPE_FUNC,
                                                        ),
                                                    },
                                                ),
                                                right: Binary(
                                                    BinaryExpression {
                                                        op: NotEq,
                                                        left: Identifier(
                                                            VarAccess:  type,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  zPAR_TYPE_PROTOTYPE,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: NotEq,
                                                left: Identifier(
                                                    VarAccess:  type,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  zPAR_TYPE_INSTANCE,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: ConcatStrings,
                                                            params: [
                                                                String(
                                                                    MEM_CallByID: Provided symbol is not callable (not function, prototype or instance): ,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  sym.name,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: BitAnd,
                                        left: Identifier(
                                            VarAccess:  sym.bitfield,
                                        ),
                                        right: Identifier(
                                            VarAccess:  zPAR_FLAG_EXTERNAL,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__stdcall,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  sym.content,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Exp(
                                    Call(
                                        Call {
                                            func: MEM_CallByPtr,
                                            params: [
                                                Binary(
                                                    BinaryExpression {
                                                        op: Plus,
                                                        left: Identifier(
                                                            VarAccess:  sym.content,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  currParserStackAddress,
                                                        ),
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ),
                            ],
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_CallByString,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: fnc,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: Hlp_StrCmp,
                                        params: [
                                            Identifier(
                                                VarAccess:  fnc,
                                            ),
                                            String(
                                                ,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_CallByString: fnc may not be an empty string!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: symbID,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: string,
                            name: cacheFunc,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: cacheSymbID,
                            array_size: None,
                        },
                    ],
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: Hlp_StrCmp,
                                        params: [
                                            Identifier(
                                                VarAccess:  cacheFunc,
                                            ),
                                            Identifier(
                                                VarAccess:  fnc,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  symbID,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  cacheSymbID,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Ass(
                                    Assignment {
                                        var: VarAccess:  symbID,
                                        op: Eq,
                                        exp: Call(
                                            Call {
                                                func: MEM_FindParserSymbol,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  fnc,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                If(
                                    IfStatement {
                                        branches: [
                                            IfBranch {
                                                cond: Binary(
                                                    BinaryExpression {
                                                        op: Eq,
                                                        left: Identifier(
                                                            VarAccess:  symbID,
                                                        ),
                                                        right: Unary(
                                                            UnaryExpression {
                                                                op: Minus,
                                                                right: Int(
                                                                    1,
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                body: [
                                                    Exp(
                                                        Call(
                                                            Call {
                                                                func: MEM_Error,
                                                                params: [
                                                                    Call(
                                                                        Call {
                                                                            func: ConcatStrings,
                                                                            params: [
                                                                                String(
                                                                                    MEM_CallByString: Undefined symbol: ,
                                                                                ),
                                                                                Identifier(
                                                                                    VarAccess:  fnc,
                                                                                ),
                                                                            ],
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ),
                                                    ReturnStatement(
                                                        None,
                                                    ),
                                                ],
                                            },
                                        ],
                                        else_branch: None,
                                    },
                                ),
                                Ass(
                                    Assignment {
                                        var: VarAccess:  cacheFunc,
                                        op: Eq,
                                        exp: Identifier(
                                            VarAccess:  fnc,
                                        ),
                                    },
                                ),
                                Ass(
                                    Assignment {
                                        var: VarAccess:  cacheSymbID,
                                        op: Eq,
                                        exp: Identifier(
                                            VarAccess:  symbID,
                                        ),
                                    },
                                ),
                            ],
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_CallByID,
                            params: [
                                Identifier(
                                    VarAccess:  symbID,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_Call,
            typ: void,
            params: [
                VarDeclaration {
                    typ: func,
                    name: fnc,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_CallByID,
                            params: [
                                Call(
                                    Call {
                                        func: MEM_GetFuncID,
                                        params: [
                                            Identifier(
                                                VarAccess:  fnc,
                                            ),
                                        ],
                                    },
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_BuildFuncStartsArray,
            typ: int,
            params: [],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: array,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ArrayCreate,
                                params: [],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: lastOffset,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  lastOffset,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: wasSorted,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  wasSorted,
                        op: Eq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: i,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loop,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loop,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  i,
                                        ),
                                        right: Identifier(
                                            VarAccess:  MEM_Parser.symtab_table_numInArray,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: zCPar_Symbol,
                                                name: symb,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  symb,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: _^,
                                                    params: [
                                                        Call(
                                                            Call {
                                                                func: MEM_ReadIntArray,
                                                                params: [
                                                                    Identifier(
                                                                        VarAccess:  MEM_Parser.symtab_table_array,
                                                                    ),
                                                                    Identifier(
                                                                        VarAccess:  i,
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: And,
                                                            left: Binary(
                                                                BinaryExpression {
                                                                    op: And,
                                                                    left: Binary(
                                                                        BinaryExpression {
                                                                            op: BitAnd,
                                                                            left: Identifier(
                                                                                VarAccess:  symb.bitfield,
                                                                            ),
                                                                            right: Identifier(
                                                                                VarAccess:  zPAR_FLAG_CONST,
                                                                            ),
                                                                        },
                                                                    ),
                                                                    right: Unary(
                                                                        UnaryExpression {
                                                                            op: Negate,
                                                                            right: Binary(
                                                                                BinaryExpression {
                                                                                    op: BitAnd,
                                                                                    left: Identifier(
                                                                                        VarAccess:  symb.bitfield,
                                                                                    ),
                                                                                    right: Identifier(
                                                                                        VarAccess:  zPAR_FLAG_EXTERNAL,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                            right: Binary(
                                                                BinaryExpression {
                                                                    op: Eq,
                                                                    left: Binary(
                                                                        BinaryExpression {
                                                                            op: BitAnd,
                                                                            left: Identifier(
                                                                                VarAccess:  symb.bitfield,
                                                                            ),
                                                                            right: Identifier(
                                                                                VarAccess:  zCPar_Symbol_bitfield_type,
                                                                            ),
                                                                        },
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  zPAR_TYPE_FUNC,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        If(
                                                            IfStatement {
                                                                branches: [
                                                                    IfBranch {
                                                                        cond: Binary(
                                                                            BinaryExpression {
                                                                                op: And,
                                                                                left: Identifier(
                                                                                    VarAccess:  wasSorted,
                                                                                ),
                                                                                right: Binary(
                                                                                    BinaryExpression {
                                                                                        op: GT,
                                                                                        left: Identifier(
                                                                                            VarAccess:  lastOffset,
                                                                                        ),
                                                                                        right: Identifier(
                                                                                            VarAccess:  symb.content,
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        body: [
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  wasSorted,
                                                                                    op: Eq,
                                                                                    exp: Int(
                                                                                        0,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            Exp(
                                                                                Call(
                                                                                    Call {
                                                                                        func: MEM_Info,
                                                                                        params: [
                                                                                            String(
                                                                                                The functions in the symbol table do not seem to be sorted by stack-offset.,
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                ],
                                                                else_branch: None,
                                                            },
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  lastOffset,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  symb.content,
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_ArrayInsert,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  array,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  symb.content,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_ArrayInsert,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  array,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  i,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  i,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loop,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  wasSorted,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: zCArray,
                                                name: zcarr,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  zcarr,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: _^,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  array,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_QSort,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  zcarr.array,
                                                    ),
                                                    Binary(
                                                        BinaryExpression {
                                                            op: Divide,
                                                            left: Identifier(
                                                                VarAccess:  zcarr.numInArray,
                                                            ),
                                                            right: Int(
                                                                2,
                                                            ),
                                                        },
                                                    ),
                                                    Int(
                                                        8,
                                                    ),
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  array,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetFuncIDByOffset,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: offset,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: funcStartsArray,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  funcStartsArray,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  funcStartsArray,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEMINT_BuildFuncStartsArray,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: LT,
                                                left: Identifier(
                                                    VarAccess:  offset,
                                                ),
                                                right: Int(
                                                    0,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: GE,
                                                left: Identifier(
                                                    VarAccess:  offset,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  MEM_Parser.stack_stacksize,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_GetFuncIDByOffset: Offset is not in valid bounds (0 <= offset < ParserStackSize).,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Unary(
                                                UnaryExpression {
                                                    op: Minus,
                                                    right: Int(
                                                        1,
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: array,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  array,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  funcStartsArray,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: res,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  res,
                        op: Eq,
                        exp: Unary(
                            UnaryExpression {
                                op: Minus,
                                right: Int(
                                    1,
                                ),
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: low,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  low,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: high,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  high,
                        op: Eq,
                        exp: Binary(
                            BinaryExpression {
                                op: Minus,
                                left: Binary(
                                    BinaryExpression {
                                        op: Divide,
                                        left: Identifier(
                                            VarAccess:  array.numInArray,
                                        ),
                                        right: Int(
                                            2,
                                        ),
                                    },
                                ),
                                right: Int(
                                    1,
                                ),
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loop,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loop,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: med,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  med,
                        op: Eq,
                        exp: Binary(
                            BinaryExpression {
                                op: Divide,
                                left: Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  low,
                                        ),
                                        right: Identifier(
                                            VarAccess:  high,
                                        ),
                                    },
                                ),
                                right: Int(
                                    2,
                                ),
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: medOffset,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  medOffset,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadIntArray,
                                params: [
                                    Identifier(
                                        VarAccess:  array.array,
                                    ),
                                    Binary(
                                        BinaryExpression {
                                            op: Multiply,
                                            left: Int(
                                                2,
                                            ),
                                            right: Identifier(
                                                VarAccess:  med,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: GE,
                                        left: Identifier(
                                            VarAccess:  medOffset,
                                        ),
                                        right: Identifier(
                                            VarAccess:  offset,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  high,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  med,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                If(
                                    IfStatement {
                                        branches: [
                                            IfBranch {
                                                cond: Binary(
                                                    BinaryExpression {
                                                        op: Eq,
                                                        left: Identifier(
                                                            VarAccess:  low,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  med,
                                                        ),
                                                    },
                                                ),
                                                body: [
                                                    If(
                                                        IfStatement {
                                                            branches: [
                                                                IfBranch {
                                                                    cond: Binary(
                                                                        BinaryExpression {
                                                                            op: LE,
                                                                            left: Call(
                                                                                Call {
                                                                                    func: MEM_ReadIntArray,
                                                                                    params: [
                                                                                        Identifier(
                                                                                            VarAccess:  array.array,
                                                                                        ),
                                                                                        Binary(
                                                                                            BinaryExpression {
                                                                                                op: Multiply,
                                                                                                left: Int(
                                                                                                    2,
                                                                                                ),
                                                                                                right: Identifier(
                                                                                                    VarAccess:  high,
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                            right: Identifier(
                                                                                VarAccess:  offset,
                                                                            ),
                                                                        },
                                                                    ),
                                                                    body: [
                                                                        Ass(
                                                                            Assignment {
                                                                                var: VarAccess:  res,
                                                                                op: Eq,
                                                                                exp: Identifier(
                                                                                    VarAccess:  high,
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ],
                                                            else_branch: Some(
                                                                [
                                                                    Ass(
                                                                        Assignment {
                                                                            var: VarAccess:  res,
                                                                            op: Eq,
                                                                            exp: Identifier(
                                                                                VarAccess:  low,
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ],
                                        else_branch: Some(
                                            [
                                                Ass(
                                                    Assignment {
                                                        var: VarAccess:  low,
                                                        op: Eq,
                                                        exp: Identifier(
                                                            VarAccess:  med,
                                                        ),
                                                    },
                                                ),
                                            ],
                                        ),
                                    },
                                ),
                            ],
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  low,
                                        ),
                                        right: Identifier(
                                            VarAccess:  high,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  res,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  low,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: NotEq,
                                        left: Identifier(
                                            VarAccess:  res,
                                        ),
                                        right: Unary(
                                            UnaryExpression {
                                                op: Minus,
                                                right: Int(
                                                    1,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Call(
                                                Call {
                                                    func: MEM_ReadIntArray,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  array.array,
                                                        ),
                                                        Binary(
                                                            BinaryExpression {
                                                                op: Plus,
                                                                left: Binary(
                                                                    BinaryExpression {
                                                                        op: Multiply,
                                                                        left: Int(
                                                                            2,
                                                                        ),
                                                                        right: Identifier(
                                                                            VarAccess:  res,
                                                                        ),
                                                                    },
                                                                ),
                                                                right: Int(
                                                                    1,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_StackPos.position,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  loop,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_GetESP,
            typ: int,
            params: [],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ESP,
                            array_size: None,
                        },
                    ],
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_2,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ASMINT_OP_movESPtoEAX,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_2,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ASMINT_OP_movEAXToMem,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_4,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ESP,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_1,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ASMINT_OP_retn,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Call(
                                                        Call {
                                                            func: CALL_Begin,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  call,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    body: [],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  ESP,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_IsFrameBoundary,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ESP,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: retAdr,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  retAdr,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  retAdr,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEMINT_SwitchG1G2,
                                                    params: [
                                                        Int(
                                                            7246244,
                                                        ),
                                                        Int(
                                                            7939332,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: And,
                                left: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Call(
                                            Call {
                                                func: MEM_ReadInt,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ESP,
                                                    ),
                                                ],
                                            },
                                        ),
                                        right: Unary(
                                            UnaryExpression {
                                                op: Minus,
                                                right: Int(
                                                    1,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                right: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Call(
                                            Call {
                                                func: MEM_ReadInt,
                                                params: [
                                                    Binary(
                                                        BinaryExpression {
                                                            op: Plus,
                                                            left: Identifier(
                                                                VarAccess:  ESP,
                                                            ),
                                                            right: Int(
                                                                4,
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                        right: Identifier(
                                            VarAccess:  retAdr,
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_FindFrameBoundary,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ESP,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: searchWordsMAX,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loop,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loop,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  searchWordsMAX,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Call(
                                            Call {
                                                func: MEMINT_IsFrameBoundary,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ESP,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  ESP,
                                            op: PlusEq,
                                            exp: Int(
                                                4,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  searchWordsMAX,
                                            op: MinusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loop,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  ESP,
                        ),
                    ),
                ),
            ],
        },
    ),
    Const(
        ConstDeclaration {
            name: MEMINT_DoStackFrameSize,
            typ: int,
            initializer: Int(
                88,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MEMINT_DoStackPopPosOffset,
            typ: int,
            initializer: Binary(
                BinaryExpression {
                    op: Minus,
                    left: Binary(
                        BinaryExpression {
                            op: Plus,
                            left: Identifier(
                                VarAccess:  MEMINT_DoStackFrameSize,
                            ),
                            right: Identifier(
                                VarAccess:  MEMINT_DoStackFrameSize,
                            ),
                        },
                    ),
                    right: Binary(
                        BinaryExpression {
                            op: Multiply,
                            left: Int(
                                6,
                            ),
                            right: Int(
                                4,
                            ),
                        },
                    ),
                },
            ),
        },
    ),
    Func(
        Function {
            name: MEM_GetFrameBoundary,
            typ: int,
            params: [],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: offset,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ESP,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ESP,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEMINT_GetESP,
                                params: [],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  offset,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: realESP,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  realESP,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  ESP,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  realESP,
                                            op: PlusEq,
                                            exp: Binary(
                                                BinaryExpression {
                                                    op: Multiply,
                                                    left: Int(
                                                        4,
                                                    ),
                                                    right: Identifier(
                                                        VarAccess:  MEMINT_DoStackFrameSize,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  realESP,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEMINT_FindFrameBoundary,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  realESP,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  MEMINT_DoStackFrameSize,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Unary(
                                                        UnaryExpression {
                                                            op: Negate,
                                                            right: Identifier(
                                                                VarAccess:  realESP,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_AssertFail,
                                                                    params: [
                                                                        String(
                                                                            MEM_GetFrameBoundary: Could not locate start of stackframe.,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        ReturnStatement(
                                                            Some(
                                                                Int(
                                                                    0,
                                                                ),
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: myID,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  myID,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_GetFuncID,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  MEM_GetFrameBoundary,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: loop,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  loop,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  MEM_StackPos.position,
                                            ),
                                        },
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: popPos,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  popPos,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_ReadIntArray,
                                                    params: [
                                                        Binary(
                                                            BinaryExpression {
                                                                op: Minus,
                                                                left: Identifier(
                                                                    VarAccess:  realESP,
                                                                ),
                                                                right: Identifier(
                                                                    VarAccess:  MEMINT_DoStackPopPosOffset,
                                                                ),
                                                            },
                                                        ),
                                                        Int(
                                                            0,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  realESP,
                                            op: PlusEq,
                                            exp: Identifier(
                                                VarAccess:  MEMINT_DoStackFrameSize,
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: NotEq,
                                                            left: Call(
                                                                Call {
                                                                    func: MEM_GetFuncIDByOffset,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  popPos,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  myID,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  MEM_StackPos.position,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  loop,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  offset,
                                            op: Eq,
                                            exp: Binary(
                                                BinaryExpression {
                                                    op: Minus,
                                                    left: Identifier(
                                                        VarAccess:  realESP,
                                                    ),
                                                    right: Identifier(
                                                        VarAccess:  ESP,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: Plus,
                                left: Identifier(
                                    VarAccess:  ESP,
                                ),
                                right: Identifier(
                                    VarAccess:  offset,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetCallerStackPos,
            typ: int,
            params: [],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Minus,
                                            left: Binary(
                                                BinaryExpression {
                                                    op: Plus,
                                                    left: Call(
                                                        Call {
                                                            func: MEM_GetFrameBoundary,
                                                            params: [],
                                                        },
                                                    ),
                                                    right: Binary(
                                                        BinaryExpression {
                                                            op: Multiply,
                                                            left: Int(
                                                                2,
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  MEMINT_DoStackFrameSize,
                                                            ),
                                                        },
                                                    ),
                                                },
                                            ),
                                            right: Identifier(
                                                VarAccess:  MEMINT_DoStackPopPosOffset,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_SetCallerStackPos,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: popPos,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Minus,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Plus,
                                                left: Call(
                                                    Call {
                                                        func: MEM_GetFrameBoundary,
                                                        params: [],
                                                    },
                                                ),
                                                right: Binary(
                                                    BinaryExpression {
                                                        op: Multiply,
                                                        left: Int(
                                                            2,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  MEMINT_DoStackFrameSize,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Identifier(
                                            VarAccess:  MEMINT_DoStackPopPosOffset,
                                        ),
                                    },
                                ),
                                Identifier(
                                    VarAccess:  popPos,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_TokenizeFunction,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: funcID,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: tokenArray,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: paramArray,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: posArr,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: pos,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCPar_Symbol,
                            name: symb,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  symb,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: MEM_ReadIntArray,
                                            params: [
                                                Identifier(
                                                    VarAccess:  contentSymbolTableAddress,
                                                ),
                                                Identifier(
                                                    VarAccess:  funcID,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  pos,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  symb.content,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  pos,
                        op: PlusEq,
                        exp: Identifier(
                            VarAccess:  currParserStackAddress,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loop,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loop,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayInsert,
                            params: [
                                Identifier(
                                    VarAccess:  posArr,
                                ),
                                Identifier(
                                    VarAccess:  pos,
                                ),
                            ],
                        },
                    ),
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: tok,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  tok,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadByte,
                                params: [
                                    Identifier(
                                        VarAccess:  pos,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  pos,
                        op: PlusEq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: param,
                            array_size: None,
                        },
                    ],
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Or,
                                                left: Binary(
                                                    BinaryExpression {
                                                        op: Or,
                                                        left: Binary(
                                                            BinaryExpression {
                                                                op: Or,
                                                                left: Binary(
                                                                    BinaryExpression {
                                                                        op: Eq,
                                                                        left: Identifier(
                                                                            VarAccess:  tok,
                                                                        ),
                                                                        right: Identifier(
                                                                            VarAccess:  zPAR_TOK_CALL,
                                                                        ),
                                                                    },
                                                                ),
                                                                right: Binary(
                                                                    BinaryExpression {
                                                                        op: Eq,
                                                                        left: Identifier(
                                                                            VarAccess:  tok,
                                                                        ),
                                                                        right: Identifier(
                                                                            VarAccess:  zPAR_TOK_CALLEXTERN,
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        right: Binary(
                                                            BinaryExpression {
                                                                op: Or,
                                                                left: Binary(
                                                                    BinaryExpression {
                                                                        op: Eq,
                                                                        left: Identifier(
                                                                            VarAccess:  tok,
                                                                        ),
                                                                        right: Identifier(
                                                                            VarAccess:  zPAR_TOK_PUSHINT,
                                                                        ),
                                                                    },
                                                                ),
                                                                right: Binary(
                                                                    BinaryExpression {
                                                                        op: Eq,
                                                                        left: Identifier(
                                                                            VarAccess:  tok,
                                                                        ),
                                                                        right: Identifier(
                                                                            VarAccess:  zPAR_TOK_PUSHVAR,
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                right: Binary(
                                                    BinaryExpression {
                                                        op: Or,
                                                        left: Binary(
                                                            BinaryExpression {
                                                                op: Eq,
                                                                left: Identifier(
                                                                    VarAccess:  tok,
                                                                ),
                                                                right: Identifier(
                                                                    VarAccess:  zPAR_TOK_PUSHINST,
                                                                ),
                                                            },
                                                        ),
                                                        right: Binary(
                                                            BinaryExpression {
                                                                op: Eq,
                                                                left: Identifier(
                                                                    VarAccess:  tok,
                                                                ),
                                                                right: Identifier(
                                                                    VarAccess:  zPAR_TOK_SETINSTANCE,
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: Or,
                                                left: Binary(
                                                    BinaryExpression {
                                                        op: Eq,
                                                        left: Identifier(
                                                            VarAccess:  tok,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  zPAR_TOK_JUMP,
                                                        ),
                                                    },
                                                ),
                                                right: Binary(
                                                    BinaryExpression {
                                                        op: Eq,
                                                        left: Identifier(
                                                            VarAccess:  tok,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  zPAR_TOK_JUMPF,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  param,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_ReadInt,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  pos,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  pos,
                                            op: PlusEq,
                                            exp: Int(
                                                4,
                                            ),
                                        },
                                    ),
                                ],
                            },
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  tok,
                                        ),
                                        right: Identifier(
                                            VarAccess:  zPAR_TOK_PUSH_ARRAYVAR,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  param,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_ReadInt,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  pos,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  pos,
                                            op: PlusEq,
                                            exp: Int(
                                                4,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  pos,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                ],
                            },
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: GT,
                                        left: Identifier(
                                            VarAccess:  tok,
                                        ),
                                        right: Identifier(
                                            VarAccess:  zPAR_TOK_SETINSTANCE,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: string,
                                                name: err,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  err,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: ConcatStrings,
                                                    params: [
                                                        String(
                                                            MEMINT_TokenizeFunction: Invalid Token in function ,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  symb.name,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  err,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: ConcatStrings,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  err,
                                                        ),
                                                        String(
                                                            . Did you break it? This will probably cause more errors.,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  err,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Ass(
                                    Assignment {
                                        var: VarAccess:  param,
                                        op: Eq,
                                        exp: Int(
                                            0,
                                        ),
                                    },
                                ),
                            ],
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayInsert,
                            params: [
                                Identifier(
                                    VarAccess:  tokenArray,
                                ),
                                Identifier(
                                    VarAccess:  tok,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayInsert,
                            params: [
                                Identifier(
                                    VarAccess:  paramArray,
                                ),
                                Identifier(
                                    VarAccess:  param,
                                ),
                            ],
                        },
                    ),
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  tok,
                                        ),
                                        right: Identifier(
                                            VarAccess:  zPAR_TOK_RET,
                                        ),
                                    },
                                ),
                                body: [
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: NotEq,
                                                            left: Call(
                                                                Call {
                                                                    func: MEM_GetFuncIDByOffset,
                                                                    params: [
                                                                        Binary(
                                                                            BinaryExpression {
                                                                                op: Minus,
                                                                                left: Identifier(
                                                                                    VarAccess:  pos,
                                                                                ),
                                                                                right: Identifier(
                                                                                    VarAccess:  currParserStackAddress,
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  funcID,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_ArrayInsert,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  posArr,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  pos,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_ArrayInsert,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  tokenArray,
                                                                        ),
                                                                        Unary(
                                                                            UnaryExpression {
                                                                                op: Minus,
                                                                                right: Int(
                                                                                    1,
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_ArrayInsert,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  paramArray,
                                                                        ),
                                                                        Unary(
                                                                            UnaryExpression {
                                                                                op: Minus,
                                                                                right: Int(
                                                                                    1,
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        ReturnStatement(
                                                            None,
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_StackPos.position,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  loop,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_TraceParameter,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: pos,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: tokenArr,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: paramArr,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: paramsNeeded,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  paramsNeeded,
                        op: Eq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loop,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loop,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  pos,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEMINT_TraceParameter: The parameter was pushed outside the function.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Unary(
                                                UnaryExpression {
                                                    op: Minus,
                                                    right: Int(
                                                        1,
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  pos,
                        op: MinusEq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: tok,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  tok,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ArrayRead,
                                params: [
                                    Identifier(
                                        VarAccess:  tokenArr,
                                    ),
                                    Identifier(
                                        VarAccess:  pos,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Or,
                                                left: Binary(
                                                    BinaryExpression {
                                                        op: Or,
                                                        left: Binary(
                                                            BinaryExpression {
                                                                op: Eq,
                                                                left: Identifier(
                                                                    VarAccess:  tok,
                                                                ),
                                                                right: Identifier(
                                                                    VarAccess:  zPAR_TOK_PUSHINT,
                                                                ),
                                                            },
                                                        ),
                                                        right: Binary(
                                                            BinaryExpression {
                                                                op: Eq,
                                                                left: Identifier(
                                                                    VarAccess:  tok,
                                                                ),
                                                                right: Identifier(
                                                                    VarAccess:  zPAR_TOK_PUSHVAR,
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                right: Binary(
                                                    BinaryExpression {
                                                        op: Eq,
                                                        left: Identifier(
                                                            VarAccess:  tok,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  zPAR_TOK_PUSH_ARRAYVAR,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: Eq,
                                                left: Identifier(
                                                    VarAccess:  tok,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  zPAR_TOK_PUSHINST,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  paramsNeeded,
                                            op: MinusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                ],
                            },
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Or,
                                                left: Binary(
                                                    BinaryExpression {
                                                        op: And,
                                                        left: Binary(
                                                            BinaryExpression {
                                                                op: GE,
                                                                left: Identifier(
                                                                    VarAccess:  tok,
                                                                ),
                                                                right: Identifier(
                                                                    VarAccess:  zPAR_TOK_ASSIGNSTR,
                                                                ),
                                                            },
                                                        ),
                                                        right: Binary(
                                                            BinaryExpression {
                                                                op: LE,
                                                                left: Identifier(
                                                                    VarAccess:  tok,
                                                                ),
                                                                right: Identifier(
                                                                    VarAccess:  zPAR_TOK_ASSIGNINST,
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                                right: Binary(
                                                    BinaryExpression {
                                                        op: Eq,
                                                        left: Identifier(
                                                            VarAccess:  tok,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  zPAR_OP_IS,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: And,
                                                left: Binary(
                                                    BinaryExpression {
                                                        op: LE,
                                                        left: Identifier(
                                                            VarAccess:  tok,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  zPAR_OP_ISDIV,
                                                        ),
                                                    },
                                                ),
                                                right: Binary(
                                                    BinaryExpression {
                                                        op: GE,
                                                        left: Identifier(
                                                            VarAccess:  tok,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  zPAR_OP_ISPLUS,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEMINT_TraceParameter: Assignment within expression that is expected to produce non-void result. This does not make sense.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  paramsNeeded,
                                            op: PlusEq,
                                            exp: Int(
                                                2,
                                            ),
                                        },
                                    ),
                                ],
                            },
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Eq,
                                                left: Identifier(
                                                    VarAccess:  tok,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  zPAR_TOK_CALL,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: Eq,
                                                left: Identifier(
                                                    VarAccess:  tok,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  zPAR_TOK_CALLEXTERN,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: zCPar_Symbol,
                                                name: symb,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: symbID,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: Eq,
                                                            left: Identifier(
                                                                VarAccess:  tok,
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  zPAR_TOK_CALL,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  symbID,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: MEM_GetFuncIDByOffset,
                                                                        params: [
                                                                            Call(
                                                                                Call {
                                                                                    func: MEM_ArrayRead,
                                                                                    params: [
                                                                                        Identifier(
                                                                                            VarAccess:  paramArr,
                                                                                        ),
                                                                                        Identifier(
                                                                                            VarAccess:  pos,
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: Some(
                                                [
                                                    Ass(
                                                        Assignment {
                                                            var: VarAccess:  symbID,
                                                            op: Eq,
                                                            exp: Call(
                                                                Call {
                                                                    func: MEM_ArrayRead,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  paramArr,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  pos,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  symb,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: _^,
                                                    params: [
                                                        Call(
                                                            Call {
                                                                func: MEM_GetSymbolByIndex,
                                                                params: [
                                                                    Identifier(
                                                                        VarAccess:  symbID,
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  paramsNeeded,
                                            op: PlusEq,
                                            exp: Binary(
                                                BinaryExpression {
                                                    op: BitAnd,
                                                    left: Identifier(
                                                        VarAccess:  symb.bitfield,
                                                    ),
                                                    right: Identifier(
                                                        VarAccess:  zCPar_Symbol_bitfield_ele,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  paramsNeeded,
                                            op: MinusEq,
                                            exp: Binary(
                                                BinaryExpression {
                                                    op: NotEq,
                                                    left: Identifier(
                                                        VarAccess:  symb.offset,
                                                    ),
                                                    right: Int(
                                                        0,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: And,
                                                left: Binary(
                                                    BinaryExpression {
                                                        op: GE,
                                                        left: Identifier(
                                                            VarAccess:  tok,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  zPAR_OP_UNARY,
                                                        ),
                                                    },
                                                ),
                                                right: Binary(
                                                    BinaryExpression {
                                                        op: LE,
                                                        left: Identifier(
                                                            VarAccess:  tok,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  zPAR_OP_MAX,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: Eq,
                                                left: Identifier(
                                                    VarAccess:  tok,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  zPAR_TOK_SETINSTANCE,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [],
                            },
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LE,
                                        left: Identifier(
                                            VarAccess:  tok,
                                        ),
                                        right: Identifier(
                                            VarAccess:  zPAR_OP_HIGHER_EQ,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  paramsNeeded,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Exp(
                                    Call(
                                        Call {
                                            func: MEM_Error,
                                            params: [
                                                String(
                                                    MEMINT_TraceParameter: Invalid token!,
                                                ),
                                            ],
                                        },
                                    ),
                                ),
                            ],
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  paramsNeeded,
                                        ),
                                        right: Int(
                                            0,
                                        ),
                                    },
                                ),
                                body: [
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: GT,
                                                            left: Identifier(
                                                                VarAccess:  pos,
                                                            ),
                                                            right: Int(
                                                                0,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        If(
                                                            IfStatement {
                                                                branches: [
                                                                    IfBranch {
                                                                        cond: Binary(
                                                                            BinaryExpression {
                                                                                op: Eq,
                                                                                left: Call(
                                                                                    Call {
                                                                                        func: MEM_ArrayRead,
                                                                                        params: [
                                                                                            Identifier(
                                                                                                VarAccess:  tokenArr,
                                                                                            ),
                                                                                            Binary(
                                                                                                BinaryExpression {
                                                                                                    op: Minus,
                                                                                                    left: Identifier(
                                                                                                        VarAccess:  pos,
                                                                                                    ),
                                                                                                    right: Int(
                                                                                                        1,
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                                right: Identifier(
                                                                                    VarAccess:  zPAR_TOK_SETINSTANCE,
                                                                                ),
                                                                            },
                                                                        ),
                                                                        body: [
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  pos,
                                                                                    op: MinusEq,
                                                                                    exp: Int(
                                                                                        1,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ],
                                                                else_branch: None,
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  pos,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_StackPos.position,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  loop,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_GetLabelName,
            typ: string,
            params: [
                VarDeclaration {
                    typ: int,
                    name: labelValue,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: And,
                                        left: Binary(
                                            BinaryExpression {
                                                op: LT,
                                                left: Int(
                                                    1000,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  labelValue,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: LT,
                                                left: Identifier(
                                                    VarAccess:  labelValue,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  MEM_Parser.symtab_table_numInArray,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: zCPar_Symbol,
                                                name: symb,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  symb,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: _^,
                                                    params: [
                                                        Call(
                                                            Call {
                                                                func: MEM_ReadIntArray,
                                                                params: [
                                                                    Identifier(
                                                                        VarAccess:  contentSymbolTableAddress,
                                                                    ),
                                                                    Identifier(
                                                                        VarAccess:  labelValue,
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  symb.name,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                ReturnStatement(
                                    Some(
                                        Call(
                                            Call {
                                                func: IntToString,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  labelValue,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ),
                            ],
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_PrepareLoopsAndJumps,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: stackPos,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: tokenArr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  tokenArr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ArrayCreate,
                                params: [],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: paramArr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  paramArr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ArrayCreate,
                                params: [],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: posArr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  posArr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ArrayCreate,
                                params: [],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: size,
                            array_size: None,
                        },
                    ],
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_TokenizeFunction,
                            params: [
                                Call(
                                    Call {
                                        func: MEM_GetFuncIDByOffset,
                                        params: [
                                            Identifier(
                                                VarAccess:  stackPos,
                                            ),
                                        ],
                                    },
                                ),
                                Identifier(
                                    VarAccess:  tokenArr,
                                ),
                                Identifier(
                                    VarAccess:  paramArr,
                                ),
                                Identifier(
                                    VarAccess:  posArr,
                                ),
                            ],
                        },
                    ),
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  size,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ArraySize,
                                params: [
                                    Identifier(
                                        VarAccess:  posArr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: labelFunc,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  labelFunc,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_GetFuncOffset,
                                params: [
                                    Identifier(
                                        VarAccess:  MEM_Label,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: labelsArr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  labelsArr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ArrayCreate,
                                params: [],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: labelPosArr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  labelPosArr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ArrayCreate,
                                params: [],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: gotoFunc,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  gotoFunc,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_GetFuncOffset,
                                params: [
                                    Identifier(
                                        VarAccess:  MEM_Goto,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: gotoArr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  gotoArr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ArrayCreate,
                                params: [],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: gotoPosArr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  gotoPosArr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ArrayCreate,
                                params: [],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: usedLabels,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  usedLabels,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ArrayCreate,
                                params: [],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: i,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loop,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loop,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  i,
                                        ),
                                        right: Identifier(
                                            VarAccess:  size,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: type,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    ConstDeclaration(
                                        ConstDeclaration {
                                            name: goto,
                                            typ: int,
                                            initializer: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    ConstDeclaration(
                                        ConstDeclaration {
                                            name: label,
                                            typ: int,
                                            initializer: Int(
                                                2,
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: NotEq,
                                                            left: Call(
                                                                Call {
                                                                    func: MEM_ArrayRead,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  tokenArr,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  i,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  zPAR_TOK_CALL,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  type,
                                                                op: Eq,
                                                                exp: Int(
                                                                    0,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: Eq,
                                                            left: Call(
                                                                Call {
                                                                    func: MEM_ArrayRead,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  paramArr,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  i,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  gotoFunc,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  type,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  goto,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: Eq,
                                                            left: Call(
                                                                Call {
                                                                    func: MEM_ArrayRead,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  paramArr,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  i,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  labelFunc,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  type,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  label,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: Some(
                                                [
                                                    Ass(
                                                        Assignment {
                                                            var: VarAccess:  type,
                                                            op: Eq,
                                                            exp: Int(
                                                                0,
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Identifier(
                                                        VarAccess:  type,
                                                    ),
                                                    body: [
                                                        VarDeclarations(
                                                            [
                                                                VarDeclaration {
                                                                    typ: int,
                                                                    name: labelValue,
                                                                    array_size: None,
                                                                },
                                                            ],
                                                        ),
                                                        VarDeclarations(
                                                            [
                                                                VarDeclaration {
                                                                    typ: int,
                                                                    name: pushingTok,
                                                                    array_size: None,
                                                                },
                                                            ],
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  pushingTok,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: MEM_ArrayRead,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  tokenArr,
                                                                            ),
                                                                            Binary(
                                                                                BinaryExpression {
                                                                                    op: Minus,
                                                                                    left: Identifier(
                                                                                        VarAccess:  i,
                                                                                    ),
                                                                                    right: Int(
                                                                                        1,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        If(
                                                            IfStatement {
                                                                branches: [
                                                                    IfBranch {
                                                                        cond: Binary(
                                                                            BinaryExpression {
                                                                                op: Eq,
                                                                                left: Identifier(
                                                                                    VarAccess:  pushingTok,
                                                                                ),
                                                                                right: Identifier(
                                                                                    VarAccess:  zPAR_TOK_PUSHINT,
                                                                                ),
                                                                            },
                                                                        ),
                                                                        body: [
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  labelValue,
                                                                                    op: Eq,
                                                                                    exp: Call(
                                                                                        Call {
                                                                                            func: MEM_ArrayRead,
                                                                                            params: [
                                                                                                Identifier(
                                                                                                    VarAccess:  paramArr,
                                                                                                ),
                                                                                                Binary(
                                                                                                    BinaryExpression {
                                                                                                        op: Minus,
                                                                                                        left: Identifier(
                                                                                                            VarAccess:  i,
                                                                                                        ),
                                                                                                        right: Int(
                                                                                                            1,
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                    IfBranch {
                                                                        cond: Binary(
                                                                            BinaryExpression {
                                                                                op: Eq,
                                                                                left: Identifier(
                                                                                    VarAccess:  pushingTok,
                                                                                ),
                                                                                right: Identifier(
                                                                                    VarAccess:  zPAR_TOK_PUSHVAR,
                                                                                ),
                                                                            },
                                                                        ),
                                                                        body: [
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  labelValue,
                                                                                    op: Eq,
                                                                                    exp: Call(
                                                                                        Call {
                                                                                            func: MEM_ArrayRead,
                                                                                            params: [
                                                                                                Identifier(
                                                                                                    VarAccess:  paramArr,
                                                                                                ),
                                                                                                Binary(
                                                                                                    BinaryExpression {
                                                                                                        op: Minus,
                                                                                                        left: Identifier(
                                                                                                            VarAccess:  i,
                                                                                                        ),
                                                                                                        right: Int(
                                                                                                            1,
                                                                                                        ),
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            VarDeclarations(
                                                                                [
                                                                                    VarDeclaration {
                                                                                        typ: zCPar_Symbol,
                                                                                        name: symb,
                                                                                        array_size: None,
                                                                                    },
                                                                                ],
                                                                            ),
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  symb,
                                                                                    op: Eq,
                                                                                    exp: Call(
                                                                                        Call {
                                                                                            func: _^,
                                                                                            params: [
                                                                                                Call(
                                                                                                    Call {
                                                                                                        func: MEM_ReadIntArray,
                                                                                                        params: [
                                                                                                            Identifier(
                                                                                                                VarAccess:  contentSymbolTableAddress,
                                                                                                            ),
                                                                                                            Identifier(
                                                                                                                VarAccess:  labelValue,
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  labelValue,
                                                                                    op: Eq,
                                                                                    exp: Identifier(
                                                                                        VarAccess:  symb.content,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ],
                                                                else_branch: Some(
                                                                    [
                                                                        Exp(
                                                                            Call(
                                                                                Call {
                                                                                    func: MEM_Error,
                                                                                    params: [
                                                                                        String(
                                                                                            MEMINT_PrepareLoopsAndJumps: Invalid label found. The parameters for MEM_Goto and MEM_Label must be a constant!,
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                        Ass(
                                                                            Assignment {
                                                                                var: VarAccess:  i,
                                                                                op: PlusEq,
                                                                                exp: Int(
                                                                                    1,
                                                                                ),
                                                                            },
                                                                        ),
                                                                        Ass(
                                                                            Assignment {
                                                                                var: VarAccess:  MEM_StackPos.position,
                                                                                op: Eq,
                                                                                exp: Identifier(
                                                                                    VarAccess:  loop,
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                ),
                                                            },
                                                        ),
                                                        If(
                                                            IfStatement {
                                                                branches: [
                                                                    IfBranch {
                                                                        cond: Binary(
                                                                            BinaryExpression {
                                                                                op: Eq,
                                                                                left: Identifier(
                                                                                    VarAccess:  type,
                                                                                ),
                                                                                right: Identifier(
                                                                                    VarAccess:  label,
                                                                                ),
                                                                            },
                                                                        ),
                                                                        body: [
                                                                            Exp(
                                                                                Call(
                                                                                    Call {
                                                                                        func: MEM_ArrayPush,
                                                                                        params: [
                                                                                            Identifier(
                                                                                                VarAccess:  labelsArr,
                                                                                            ),
                                                                                            Identifier(
                                                                                                VarAccess:  labelValue,
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ),
                                                                            Exp(
                                                                                Call(
                                                                                    Call {
                                                                                        func: MEM_ArrayPush,
                                                                                        params: [
                                                                                            Identifier(
                                                                                                VarAccess:  labelPosArr,
                                                                                            ),
                                                                                            Call(
                                                                                                Call {
                                                                                                    func: MEM_ArrayRead,
                                                                                                    params: [
                                                                                                        Identifier(
                                                                                                            VarAccess:  posArr,
                                                                                                        ),
                                                                                                        Binary(
                                                                                                            BinaryExpression {
                                                                                                                op: Plus,
                                                                                                                left: Identifier(
                                                                                                                    VarAccess:  i,
                                                                                                                ),
                                                                                                                right: Int(
                                                                                                                    1,
                                                                                                                ),
                                                                                                            },
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                ],
                                                                else_branch: Some(
                                                                    [
                                                                        Exp(
                                                                            Call(
                                                                                Call {
                                                                                    func: MEM_ArrayPush,
                                                                                    params: [
                                                                                        Identifier(
                                                                                            VarAccess:  gotoArr,
                                                                                        ),
                                                                                        Identifier(
                                                                                            VarAccess:  labelValue,
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                        Exp(
                                                                            Call(
                                                                                Call {
                                                                                    func: MEM_ArrayPush,
                                                                                    params: [
                                                                                        Identifier(
                                                                                            VarAccess:  gotoPosArr,
                                                                                        ),
                                                                                        Call(
                                                                                            Call {
                                                                                                func: MEM_ArrayRead,
                                                                                                params: [
                                                                                                    Identifier(
                                                                                                        VarAccess:  posArr,
                                                                                                    ),
                                                                                                    Binary(
                                                                                                        BinaryExpression {
                                                                                                            op: Minus,
                                                                                                            left: Identifier(
                                                                                                                VarAccess:  i,
                                                                                                            ),
                                                                                                            right: Int(
                                                                                                                1,
                                                                                                            ),
                                                                                                        },
                                                                                                    ),
                                                                                                ],
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                    ],
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  i,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loop,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loop,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  i,
                                        ),
                                        right: Call(
                                            Call {
                                                func: MEM_ArraySize,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  gotoArr,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  labelValue,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_ArrayRead,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  gotoArr,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  i,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: gotoPos,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  gotoPos,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_ArrayRead,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  gotoPosArr,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  i,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: labelIndex,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  labelIndex,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_ArrayIndexOf,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  labelsArr,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  labelValue,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: labelPos,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: Eq,
                                                            left: Identifier(
                                                                VarAccess:  labelIndex,
                                                            ),
                                                            right: Unary(
                                                                UnaryExpression {
                                                                    op: Minus,
                                                                    right: Int(
                                                                        1,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        VarDeclarations(
                                                            [
                                                                VarDeclaration {
                                                                    typ: string,
                                                                    name: err,
                                                                    array_size: None,
                                                                },
                                                            ],
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  err,
                                                                op: Eq,
                                                                exp: String(
                                                                    MEMINT_PrepareLoopsAndJumps: Goto to non-existing label found: ,
                                                                ),
                                                            },
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  err,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: ConcatStrings,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  err,
                                                                            ),
                                                                            Call(
                                                                                Call {
                                                                                    func: MEMINT_GetLabelName,
                                                                                    params: [
                                                                                        Identifier(
                                                                                            VarAccess:  labelValue,
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  err,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: ConcatStrings,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  err,
                                                                            ),
                                                                            String(
                                                                                .,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_Error,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  err,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  labelPos,
                                                                op: Eq,
                                                                exp: Binary(
                                                                    BinaryExpression {
                                                                        op: Plus,
                                                                        left: Identifier(
                                                                            VarAccess:  gotoPos,
                                                                        ),
                                                                        right: Int(
                                                                            10,
                                                                        ),
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: Some(
                                                [
                                                    Ass(
                                                        Assignment {
                                                            var: VarAccess:  labelPos,
                                                            op: Eq,
                                                            exp: Call(
                                                                Call {
                                                                    func: MEM_ArrayRead,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  labelPosArr,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  labelIndex,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  labelPos,
                                            op: MinusEq,
                                            exp: Identifier(
                                                VarAccess:  currParserStackAddress,
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_WriteByte,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  gotoPos,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  zPAR_TOK_JUMP,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  gotoPos,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_WriteInt,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  gotoPos,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  labelPos,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  gotoPos,
                                            op: PlusEq,
                                            exp: Int(
                                                4,
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_WriteByte,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  gotoPos,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  zPAR_TOK_JUMP,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  gotoPos,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_WriteInt,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  gotoPos,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  labelPos,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  gotoPos,
                                            op: PlusEq,
                                            exp: Int(
                                                4,
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ArrayInsert,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  usedLabels,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  labelValue,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  i,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loop,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loop,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: MEM_ArraySize,
                                        params: [
                                            Identifier(
                                                VarAccess:  labelsArr,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  labelValue,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_ArrayRead,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  labelsArr,
                                                        ),
                                                        Int(
                                                            0,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ArrayRemoveIndex,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  labelsArr,
                                                    ),
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: NotEq,
                                                            left: Call(
                                                                Call {
                                                                    func: MEM_ArrayIndexOf,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  labelsArr,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  labelValue,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            right: Unary(
                                                                UnaryExpression {
                                                                    op: Minus,
                                                                    right: Int(
                                                                        1,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        VarDeclarations(
                                                            [
                                                                VarDeclaration {
                                                                    typ: string,
                                                                    name: error,
                                                                    array_size: None,
                                                                },
                                                            ],
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  error,
                                                                op: Eq,
                                                                exp: String(
                                                                    MEMINT_PrepareLoopsAndJumps: Label declared more than once: ,
                                                                ),
                                                            },
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  error,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: ConcatStrings,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  error,
                                                                            ),
                                                                            Call(
                                                                                Call {
                                                                                    func: MEMINT_GetLabelName,
                                                                                    params: [
                                                                                        Identifier(
                                                                                            VarAccess:  labelValue,
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  error,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: ConcatStrings,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  error,
                                                                            ),
                                                                            String(
                                                                                .,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_Error,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  error,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: Eq,
                                                            left: Call(
                                                                Call {
                                                                    func: MEM_ArrayIndexOf,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  usedLabels,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  labelValue,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                            right: Unary(
                                                                UnaryExpression {
                                                                    op: Minus,
                                                                    right: Int(
                                                                        1,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  error,
                                                                op: Eq,
                                                                exp: String(
                                                                    MEMINT_PrepareLoopsAndJumps: Unused Label: ,
                                                                ),
                                                            },
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  error,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: ConcatStrings,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  error,
                                                                            ),
                                                                            Call(
                                                                                Call {
                                                                                    func: MEMINT_GetLabelName,
                                                                                    params: [
                                                                                        Identifier(
                                                                                            VarAccess:  labelValue,
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  error,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: ConcatStrings,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  error,
                                                                            ),
                                                                            String(
                                                                                .,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_Warn,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  error,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loop,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayFree,
                            params: [
                                Identifier(
                                    VarAccess:  labelsArr,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayFree,
                            params: [
                                Identifier(
                                    VarAccess:  labelPosArr,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayFree,
                            params: [
                                Identifier(
                                    VarAccess:  gotoArr,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayFree,
                            params: [
                                Identifier(
                                    VarAccess:  gotoPosArr,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayFree,
                            params: [
                                Identifier(
                                    VarAccess:  usedLabels,
                                ),
                            ],
                        },
                    ),
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: whileOffset,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  whileOffset,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_GetFuncOffset,
                                params: [
                                    Identifier(
                                        VarAccess:  while,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: repeatOffset,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  repeatOffset,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_GetFuncOffset,
                                params: [
                                    Identifier(
                                        VarAccess:  repeat,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: endID,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  endID,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_FindParserSymbol,
                                params: [
                                    String(
                                        END,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: breakID,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  breakID,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_FindParserSymbol,
                                params: [
                                    String(
                                        BREAK,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: continueID,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  continueID,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_FindParserSymbol,
                                params: [
                                    String(
                                        CONTINUE,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loopType,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loopType,
                        op: Eq,
                        exp: Unary(
                            UnaryExpression {
                                op: Minus,
                                right: Int(
                                    1,
                                ),
                            },
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: W,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: R,
                        typ: int,
                        initializer: Int(
                            1,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: contTarget,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  contTarget,
                        op: Eq,
                        exp: Unary(
                            UnaryExpression {
                                op: Minus,
                                right: Int(
                                    1,
                                ),
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loopStack,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loopStack,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ArrayCreate,
                                params: [],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: jumpEndStack,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  jumpEndStack,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ArrayCreate,
                                params: [],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loop,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  i,
                                        ),
                                        right: Identifier(
                                            VarAccess:  size,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: tok,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  tok,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_ArrayRead,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  tokenArr,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  i,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: param,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  param,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_ArrayRead,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  paramArr,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  i,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: pos,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  pos,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_ArrayRead,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  posArr,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  i,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: And,
                                                            left: Binary(
                                                                BinaryExpression {
                                                                    op: Eq,
                                                                    left: Identifier(
                                                                        VarAccess:  tok,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  zPAR_TOK_CALL,
                                                                    ),
                                                                },
                                                            ),
                                                            right: Binary(
                                                                BinaryExpression {
                                                                    op: Eq,
                                                                    left: Identifier(
                                                                        VarAccess:  param,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  whileOffset,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_ArrayPush,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  loopStack,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  loopType,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_ArrayPush,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  loopStack,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  contTarget,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteByte,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  pos,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  zPAR_TOK_JUMPF,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  contTarget,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: MEM_ArrayRead,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  posArr,
                                                                            ),
                                                                            Call(
                                                                                Call {
                                                                                    func: MEMINT_TraceParameter,
                                                                                    params: [
                                                                                        Identifier(
                                                                                            VarAccess:  i,
                                                                                        ),
                                                                                        Identifier(
                                                                                            VarAccess:  tokenArr,
                                                                                        ),
                                                                                        Identifier(
                                                                                            VarAccess:  paramArr,
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  loopType,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  W,
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_ArrayPush,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  jumpEndStack,
                                                                        ),
                                                                        Unary(
                                                                            UnaryExpression {
                                                                                op: Minus,
                                                                                right: Int(
                                                                                    1,
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_ArrayPush,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  jumpEndStack,
                                                                        ),
                                                                        Binary(
                                                                            BinaryExpression {
                                                                                op: Plus,
                                                                                left: Identifier(
                                                                                    VarAccess:  pos,
                                                                                ),
                                                                                right: Int(
                                                                                    1,
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: And,
                                                            left: Binary(
                                                                BinaryExpression {
                                                                    op: Eq,
                                                                    left: Identifier(
                                                                        VarAccess:  tok,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  zPAR_TOK_CALL,
                                                                    ),
                                                                },
                                                            ),
                                                            right: Binary(
                                                                BinaryExpression {
                                                                    op: Eq,
                                                                    left: Identifier(
                                                                        VarAccess:  param,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  repeatOffset,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_ArrayPush,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  loopStack,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  loopType,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_ArrayPush,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  loopStack,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  contTarget,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  loopType,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  R,
                                                                ),
                                                            },
                                                        ),
                                                        VarDeclarations(
                                                            [
                                                                VarDeclaration {
                                                                    typ: int,
                                                                    name: code,
                                                                    array_size: None,
                                                                },
                                                            ],
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  code,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: MEM_Alloc,
                                                                        params: [
                                                                            Int(
                                                                                30,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteByte,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  pos,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  zPAR_TOK_JUMP,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteInt,
                                                                    params: [
                                                                        Binary(
                                                                            BinaryExpression {
                                                                                op: Plus,
                                                                                left: Identifier(
                                                                                    VarAccess:  pos,
                                                                                ),
                                                                                right: Int(
                                                                                    1,
                                                                                ),
                                                                            },
                                                                        ),
                                                                        Binary(
                                                                            BinaryExpression {
                                                                                op: Minus,
                                                                                left: Identifier(
                                                                                    VarAccess:  code,
                                                                                ),
                                                                                right: Identifier(
                                                                                    VarAccess:  currParserStackAddress,
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        VarDeclarations(
                                                            [
                                                                VarDeclaration {
                                                                    typ: int,
                                                                    name: dataPtr,
                                                                    array_size: None,
                                                                },
                                                            ],
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  dataPtr,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: MEM_Alloc,
                                                                        params: [
                                                                            Int(
                                                                                8,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        VarDeclarations(
                                                            [
                                                                VarDeclaration {
                                                                    typ: int,
                                                                    name: entryFiddler,
                                                                    array_size: None,
                                                                },
                                                            ],
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  entryFiddler,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: MEM_GetFuncOffset,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  MEMINT_RepeatEntryFiddle,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        VarDeclarations(
                                                            [
                                                                VarDeclaration {
                                                                    typ: int,
                                                                    name: redoChecker,
                                                                    array_size: None,
                                                                },
                                                            ],
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  redoChecker,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: MEM_GetFuncOffset,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  MEMINT_RepeatRedoCheck,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteByte,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  code,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  zPAR_TOK_PUSHINT,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  code,
                                                                op: PlusEq,
                                                                exp: Int(
                                                                    1,
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteInt,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  code,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  dataPtr,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  code,
                                                                op: PlusEq,
                                                                exp: Int(
                                                                    4,
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteByte,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  code,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  zPAR_TOK_CALL,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  code,
                                                                op: PlusEq,
                                                                exp: Int(
                                                                    1,
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteInt,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  code,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  entryFiddler,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  code,
                                                                op: PlusEq,
                                                                exp: Int(
                                                                    4,
                                                                ),
                                                            },
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  contTarget,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  code,
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteByte,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  code,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  zPAR_TOK_PUSHINT,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  code,
                                                                op: PlusEq,
                                                                exp: Int(
                                                                    1,
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteInt,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  code,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  dataPtr,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  code,
                                                                op: PlusEq,
                                                                exp: Int(
                                                                    4,
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteByte,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  code,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  zPAR_TOK_CALL,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  code,
                                                                op: PlusEq,
                                                                exp: Int(
                                                                    1,
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteInt,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  code,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  redoChecker,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  code,
                                                                op: PlusEq,
                                                                exp: Int(
                                                                    4,
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteByte,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  code,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  zPAR_TOK_JUMPF,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  code,
                                                                op: PlusEq,
                                                                exp: Int(
                                                                    1,
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_ArrayPush,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  jumpEndStack,
                                                                        ),
                                                                        Unary(
                                                                            UnaryExpression {
                                                                                op: Minus,
                                                                                right: Int(
                                                                                    1,
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_ArrayPush,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  jumpEndStack,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  code,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  code,
                                                                op: PlusEq,
                                                                exp: Int(
                                                                    4,
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteByte,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  code,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  zPAR_TOK_JUMP,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  code,
                                                                op: PlusEq,
                                                                exp: Int(
                                                                    1,
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteInt,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  code,
                                                                        ),
                                                                        Binary(
                                                                            BinaryExpression {
                                                                                op: Minus,
                                                                                left: Binary(
                                                                                    BinaryExpression {
                                                                                        op: Plus,
                                                                                        left: Identifier(
                                                                                            VarAccess:  pos,
                                                                                        ),
                                                                                        right: Int(
                                                                                            5,
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                right: Identifier(
                                                                                    VarAccess:  currParserStackAddress,
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  code,
                                                                op: PlusEq,
                                                                exp: Int(
                                                                    4,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: And,
                                                            left: Binary(
                                                                BinaryExpression {
                                                                    op: Eq,
                                                                    left: Identifier(
                                                                        VarAccess:  tok,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  zPAR_TOK_PUSHVAR,
                                                                    ),
                                                                },
                                                            ),
                                                            right: Binary(
                                                                BinaryExpression {
                                                                    op: Eq,
                                                                    left: Identifier(
                                                                        VarAccess:  param,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  endID,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        If(
                                                            IfStatement {
                                                                branches: [
                                                                    IfBranch {
                                                                        cond: Binary(
                                                                            BinaryExpression {
                                                                                op: Eq,
                                                                                left: Identifier(
                                                                                    VarAccess:  loopType,
                                                                                ),
                                                                                right: Unary(
                                                                                    UnaryExpression {
                                                                                        op: Minus,
                                                                                        right: Int(
                                                                                            1,
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        body: [
                                                                            Exp(
                                                                                Call(
                                                                                    Call {
                                                                                        func: MEM_Error,
                                                                                        params: [
                                                                                            String(
                                                                                                MEMINT_PrepareLoopsAndJumps: end found outside of loop!,
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ),
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  i,
                                                                                    op: PlusEq,
                                                                                    exp: Int(
                                                                                        1,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  MEM_StackPos.position,
                                                                                    op: Eq,
                                                                                    exp: Identifier(
                                                                                        VarAccess:  loop,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ],
                                                                else_branch: None,
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteByte,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  pos,
                                                                        ),
                                                                        Identifier(
                                                                            VarAccess:  zPAR_TOK_JUMP,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteInt,
                                                                    params: [
                                                                        Binary(
                                                                            BinaryExpression {
                                                                                op: Plus,
                                                                                left: Identifier(
                                                                                    VarAccess:  pos,
                                                                                ),
                                                                                right: Int(
                                                                                    1,
                                                                                ),
                                                                            },
                                                                        ),
                                                                        Binary(
                                                                            BinaryExpression {
                                                                                op: Minus,
                                                                                left: Identifier(
                                                                                    VarAccess:  contTarget,
                                                                                ),
                                                                                right: Identifier(
                                                                                    VarAccess:  currParserStackAddress,
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        VarDeclarations(
                                                            [
                                                                VarDeclaration {
                                                                    typ: int,
                                                                    name: brkLoop,
                                                                    array_size: None,
                                                                },
                                                            ],
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  brkLoop,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  MEM_StackPos.position,
                                                                ),
                                                            },
                                                        ),
                                                        VarDeclarations(
                                                            [
                                                                VarDeclaration {
                                                                    typ: int,
                                                                    name: JmpEndPos,
                                                                    array_size: None,
                                                                },
                                                            ],
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  JmpEndPos,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: MEM_ArrayPop,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  jumpEndStack,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        If(
                                                            IfStatement {
                                                                branches: [
                                                                    IfBranch {
                                                                        cond: Binary(
                                                                            BinaryExpression {
                                                                                op: NotEq,
                                                                                left: Identifier(
                                                                                    VarAccess:  JmpEndPos,
                                                                                ),
                                                                                right: Unary(
                                                                                    UnaryExpression {
                                                                                        op: Minus,
                                                                                        right: Int(
                                                                                            1,
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        body: [
                                                                            Exp(
                                                                                Call(
                                                                                    Call {
                                                                                        func: MEM_WriteInt,
                                                                                        params: [
                                                                                            Identifier(
                                                                                                VarAccess:  JmpEndPos,
                                                                                            ),
                                                                                            Binary(
                                                                                                BinaryExpression {
                                                                                                    op: Minus,
                                                                                                    left: Binary(
                                                                                                        BinaryExpression {
                                                                                                            op: Plus,
                                                                                                            left: Identifier(
                                                                                                                VarAccess:  pos,
                                                                                                            ),
                                                                                                            right: Int(
                                                                                                                5,
                                                                                                            ),
                                                                                                        },
                                                                                                    ),
                                                                                                    right: Identifier(
                                                                                                        VarAccess:  currParserStackAddress,
                                                                                                    ),
                                                                                                },
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ),
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  MEM_StackPos.position,
                                                                                    op: Eq,
                                                                                    exp: Identifier(
                                                                                        VarAccess:  brkLoop,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ],
                                                                else_branch: None,
                                                            },
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  contTarget,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: MEM_ArrayPop,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  loopStack,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  loopType,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: MEM_ArrayPop,
                                                                        params: [
                                                                            Identifier(
                                                                                VarAccess:  loopStack,
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: And,
                                                            left: Binary(
                                                                BinaryExpression {
                                                                    op: Eq,
                                                                    left: Identifier(
                                                                        VarAccess:  tok,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  zPAR_TOK_PUSHVAR,
                                                                    ),
                                                                },
                                                            ),
                                                            right: Binary(
                                                                BinaryExpression {
                                                                    op: Eq,
                                                                    left: Identifier(
                                                                        VarAccess:  param,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  breakID,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        If(
                                                            IfStatement {
                                                                branches: [
                                                                    IfBranch {
                                                                        cond: Binary(
                                                                            BinaryExpression {
                                                                                op: Eq,
                                                                                left: Identifier(
                                                                                    VarAccess:  loopType,
                                                                                ),
                                                                                right: Unary(
                                                                                    UnaryExpression {
                                                                                        op: Minus,
                                                                                        right: Int(
                                                                                            1,
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        body: [
                                                                            Exp(
                                                                                Call(
                                                                                    Call {
                                                                                        func: MEM_Error,
                                                                                        params: [
                                                                                            String(
                                                                                                MEMINT_PrepareLoopsAndJumps: break found outside of loop!,
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                ],
                                                                else_branch: Some(
                                                                    [
                                                                        Exp(
                                                                            Call(
                                                                                Call {
                                                                                    func: MEM_WriteByte,
                                                                                    params: [
                                                                                        Identifier(
                                                                                            VarAccess:  pos,
                                                                                        ),
                                                                                        Identifier(
                                                                                            VarAccess:  zPAR_TOK_JUMP,
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                        Exp(
                                                                            Call(
                                                                                Call {
                                                                                    func: MEM_ArrayPush,
                                                                                    params: [
                                                                                        Identifier(
                                                                                            VarAccess:  jumpEndStack,
                                                                                        ),
                                                                                        Binary(
                                                                                            BinaryExpression {
                                                                                                op: Plus,
                                                                                                left: Identifier(
                                                                                                    VarAccess:  pos,
                                                                                                ),
                                                                                                right: Int(
                                                                                                    1,
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                    ],
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: And,
                                                            left: Binary(
                                                                BinaryExpression {
                                                                    op: Eq,
                                                                    left: Identifier(
                                                                        VarAccess:  tok,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  zPAR_TOK_PUSHVAR,
                                                                    ),
                                                                },
                                                            ),
                                                            right: Binary(
                                                                BinaryExpression {
                                                                    op: Eq,
                                                                    left: Identifier(
                                                                        VarAccess:  param,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  continueID,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        If(
                                                            IfStatement {
                                                                branches: [
                                                                    IfBranch {
                                                                        cond: Binary(
                                                                            BinaryExpression {
                                                                                op: Eq,
                                                                                left: Identifier(
                                                                                    VarAccess:  loopType,
                                                                                ),
                                                                                right: Unary(
                                                                                    UnaryExpression {
                                                                                        op: Minus,
                                                                                        right: Int(
                                                                                            1,
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                        body: [
                                                                            Exp(
                                                                                Call(
                                                                                    Call {
                                                                                        func: MEM_Error,
                                                                                        params: [
                                                                                            String(
                                                                                                MEMINT_PrepareLoopsAndJumps: continue found outside of loop!,
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            ),
                                                                        ],
                                                                    },
                                                                ],
                                                                else_branch: Some(
                                                                    [
                                                                        Exp(
                                                                            Call(
                                                                                Call {
                                                                                    func: MEM_WriteByte,
                                                                                    params: [
                                                                                        Identifier(
                                                                                            VarAccess:  pos,
                                                                                        ),
                                                                                        Identifier(
                                                                                            VarAccess:  zPAR_TOK_JUMP,
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                        Exp(
                                                                            Call(
                                                                                Call {
                                                                                    func: MEM_WriteInt,
                                                                                    params: [
                                                                                        Binary(
                                                                                            BinaryExpression {
                                                                                                op: Plus,
                                                                                                left: Identifier(
                                                                                                    VarAccess:  pos,
                                                                                                ),
                                                                                                right: Int(
                                                                                                    1,
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                        Binary(
                                                                                            BinaryExpression {
                                                                                                op: Minus,
                                                                                                left: Identifier(
                                                                                                    VarAccess:  contTarget,
                                                                                                ),
                                                                                                right: Identifier(
                                                                                                    VarAccess:  currParserStackAddress,
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ),
                                                                    ],
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  i,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loop,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: NotEq,
                                        left: Identifier(
                                            VarAccess:  loopType,
                                        ),
                                        right: Unary(
                                            UnaryExpression {
                                                op: Minus,
                                                right: Int(
                                                    1,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEMINT_PrepareLoopsAndJumps: Loop not closed with 'end;'.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayFree,
                            params: [
                                Identifier(
                                    VarAccess:  loopStack,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayFree,
                            params: [
                                Identifier(
                                    VarAccess:  jumpEndStack,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayFree,
                            params: [
                                Identifier(
                                    VarAccess:  tokenArr,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayFree,
                            params: [
                                Identifier(
                                    VarAccess:  paramArr,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayFree,
                            params: [
                                Identifier(
                                    VarAccess:  posArr,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Class(
        Class {
            name: C_Label,
            members: [],
        },
    ),
    Const(
        ConstDeclaration {
            name: break,
            typ: int,
            initializer: Unary(
                UnaryExpression {
                    op: Minus,
                    right: Int(
                        42,
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: continue,
            typ: int,
            initializer: Unary(
                UnaryExpression {
                    op: Minus,
                    right: Int(
                        23,
                    ),
                },
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: end,
            typ: int,
            initializer: Unary(
                UnaryExpression {
                    op: Minus,
                    right: Int(
                        72,
                    ),
                },
            ),
        },
    ),
    Func(
        Function {
            name: while,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: b,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: calledFrom,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  calledFrom,
                        op: Eq,
                        exp: Binary(
                            BinaryExpression {
                                op: Minus,
                                left: Call(
                                    Call {
                                        func: MEM_GetCallerStackPos,
                                        params: [],
                                    },
                                ),
                                right: Int(
                                    5,
                                ),
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: NotEq,
                                                left: Call(
                                                    Call {
                                                        func: MEM_ReadByte,
                                                        params: [
                                                            Binary(
                                                                BinaryExpression {
                                                                    op: Plus,
                                                                    left: Identifier(
                                                                        VarAccess:  calledFrom,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  currParserStackAddress,
                                                                    ),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                right: Identifier(
                                                    VarAccess:  zPAR_TOK_CALL,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: NotEq,
                                                left: Call(
                                                    Call {
                                                        func: MEM_ReadInt,
                                                        params: [
                                                            Binary(
                                                                BinaryExpression {
                                                                    op: Plus,
                                                                    left: Binary(
                                                                        BinaryExpression {
                                                                            op: Plus,
                                                                            left: Identifier(
                                                                                VarAccess:  calledFrom,
                                                                            ),
                                                                            right: Int(
                                                                                1,
                                                                            ),
                                                                        },
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  currParserStackAddress,
                                                                    ),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                right: Call(
                                                    Call {
                                                        func: MEM_GetFuncOffset,
                                                        params: [
                                                            Identifier(
                                                                VarAccess:  while,
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        while: While was called in an unorthodox way! This cannot be handled.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_PrepareLoopsAndJumps,
                            params: [
                                Identifier(
                                    VarAccess:  calledFrom,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Identifier(
                        VarAccess:  b,
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_SetCallerStackPos,
                            params: [
                                Identifier(
                                    VarAccess:  calledFrom,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_Label,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: lbl,
                    array_size: None,
                },
            ],
            body: [],
        },
    ),
    Func(
        Function {
            name: MEM_Goto,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: lbl,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: calledFrom,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  calledFrom,
                        op: Eq,
                        exp: Binary(
                            BinaryExpression {
                                op: Minus,
                                left: Call(
                                    Call {
                                        func: MEM_GetCallerStackPos,
                                        params: [],
                                    },
                                ),
                                right: Int(
                                    5,
                                ),
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: NotEq,
                                                left: Call(
                                                    Call {
                                                        func: MEM_ReadByte,
                                                        params: [
                                                            Binary(
                                                                BinaryExpression {
                                                                    op: Plus,
                                                                    left: Identifier(
                                                                        VarAccess:  calledFrom,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  currParserStackAddress,
                                                                    ),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                right: Identifier(
                                                    VarAccess:  zPAR_TOK_CALL,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: NotEq,
                                                left: Call(
                                                    Call {
                                                        func: MEM_ReadInt,
                                                        params: [
                                                            Binary(
                                                                BinaryExpression {
                                                                    op: Plus,
                                                                    left: Binary(
                                                                        BinaryExpression {
                                                                            op: Plus,
                                                                            left: Identifier(
                                                                                VarAccess:  calledFrom,
                                                                            ),
                                                                            right: Int(
                                                                                1,
                                                                            ),
                                                                        },
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  currParserStackAddress,
                                                                    ),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                right: Call(
                                                    Call {
                                                        func: MEM_GetFuncOffset,
                                                        params: [
                                                            Identifier(
                                                                VarAccess:  MEM_Goto,
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_Goto: MEM_Goto was called in an unorthodox way! This cannot be handled.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_PrepareLoopsAndJumps,
                            params: [
                                Identifier(
                                    VarAccess:  calledFrom,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_SetCallerStackPos,
                            params: [
                                Identifier(
                                    VarAccess:  calledFrom,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: Repeat,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: variable,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: limit,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_Error,
                            params: [
                                String(
                                    MEM_Repat was called before MEM_InitRepeat / MEM_InitAll,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_Repeat,
            typ: void,
            params: [],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: calledFrom,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  calledFrom,
                        op: Eq,
                        exp: Binary(
                            BinaryExpression {
                                op: Minus,
                                left: Call(
                                    Call {
                                        func: MEM_GetCallerStackPos,
                                        params: [],
                                    },
                                ),
                                right: Int(
                                    5,
                                ),
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: NotEq,
                                                left: Call(
                                                    Call {
                                                        func: MEM_ReadByte,
                                                        params: [
                                                            Binary(
                                                                BinaryExpression {
                                                                    op: Plus,
                                                                    left: Identifier(
                                                                        VarAccess:  calledFrom,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  currParserStackAddress,
                                                                    ),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                right: Identifier(
                                                    VarAccess:  zPAR_TOK_CALL,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: NotEq,
                                                left: Call(
                                                    Call {
                                                        func: MEM_ReadInt,
                                                        params: [
                                                            Binary(
                                                                BinaryExpression {
                                                                    op: Plus,
                                                                    left: Binary(
                                                                        BinaryExpression {
                                                                            op: Plus,
                                                                            left: Identifier(
                                                                                VarAccess:  calledFrom,
                                                                            ),
                                                                            right: Int(
                                                                                1,
                                                                            ),
                                                                        },
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  currParserStackAddress,
                                                                    ),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                right: Call(
                                                    Call {
                                                        func: MEM_GetFuncOffset,
                                                        params: [
                                                            Identifier(
                                                                VarAccess:  repeat,
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        repeat: repeat was called in an unorthodox way! This cannot be handled.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_PrepareLoopsAndJumps,
                            params: [
                                Identifier(
                                    VarAccess:  calledFrom,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_SetCallerStackPos,
                            params: [
                                Identifier(
                                    VarAccess:  calledFrom,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_InitRepeat,
            typ: void,
            params: [],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: done,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  done,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ReplaceFunc,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  Repeat,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  MEMINT_Repeat,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  done,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  true,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Class(
        Class {
            name: MEMINT_RepeatData,
            members: [
                VarDeclaration {
                    typ: int,
                    name: varAdr,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: limit,
                    array_size: None,
                },
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_RepeatEntryFiddle,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: limit,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: loopData,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: tok,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  tok,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEMINT_StackPopInstAsInt,
                                params: [],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: NotEq,
                                        left: Identifier(
                                            VarAccess:  tok,
                                        ),
                                        right: Identifier(
                                            VarAccess:  zPAR_TOK_PUSHVAR,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEMINT_RepeatEntryFiddle: First Parameter given to MEM_Repeat is not an lValue (not modifiable).,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: varAdr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  varAdr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEMINT_StackPopInstAsInt,
                                params: [],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Identifier(
                                    VarAccess:  varAdr,
                                ),
                                Unary(
                                    UnaryExpression {
                                        op: Minus,
                                        right: Int(
                                            1,
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Identifier(
                                    VarAccess:  loopData,
                                ),
                                Identifier(
                                    VarAccess:  varAdr,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  loopData,
                                        ),
                                        right: Int(
                                            4,
                                        ),
                                    },
                                ),
                                Identifier(
                                    VarAccess:  limit,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_RepeatRedoCheck,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: loopData,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: MEMINT_RepeatData,
                            name: data,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  data,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  loopData,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: val,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  val,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Identifier(
                                        VarAccess:  data.varAdr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  val,
                        op: PlusEq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Identifier(
                                    VarAccess:  data.varAdr,
                                ),
                                Identifier(
                                    VarAccess:  val,
                                ),
                            ],
                        },
                    ),
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: LT,
                                left: Identifier(
                                    VarAccess:  val,
                                ),
                                right: Identifier(
                                    VarAccess:  data.limit,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetMenuByString,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: menuName,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: menus,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  menus,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  MEMINT_MenuArrayOffset,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: pos,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  pos,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loopStart,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loopStart,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: GE,
                                        left: Identifier(
                                            VarAccess:  pos,
                                        ),
                                        right: Identifier(
                                            VarAccess:  menus.numInArray,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: menuAddr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  menuAddr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadIntArray,
                                params: [
                                    Identifier(
                                        VarAccess:  menus.array,
                                    ),
                                    Identifier(
                                        VarAccess:  pos,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCMenu,
                            name: menu,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  menu,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  menuAddr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: Hlp_StrCmp,
                                        params: [
                                            Identifier(
                                                VarAccess:  menu.name,
                                            ),
                                            Identifier(
                                                VarAccess:  menuName,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  menuAddr,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  pos,
                        op: PlusEq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_StackPos.position,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  loopStart,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetMenuItemByString,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: menuItemName,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCArray,
                            name: menuItems,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  menuItems,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  MEMINT_MenuItemArrayAddres,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: pos,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  pos,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loopStart,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loopStart,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: GE,
                                        left: Identifier(
                                            VarAccess:  pos,
                                        ),
                                        right: Identifier(
                                            VarAccess:  menuItems.numInArray,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: menuItemAddr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  menuItemAddr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadIntArray,
                                params: [
                                    Identifier(
                                        VarAccess:  menuItems.array,
                                    ),
                                    Identifier(
                                        VarAccess:  pos,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCMenuItem,
                            name: menuItem,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  menuItem,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  menuItemAddr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: Hlp_StrCmp,
                                        params: [
                                            Identifier(
                                                VarAccess:  menuItem.id,
                                            ),
                                            Identifier(
                                                VarAccess:  menuItemName,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  menuItemAddr,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  pos,
                        op: PlusEq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_StackPos.position,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  loopStart,
                        ),
                    },
                ),
            ],
        },
    ),
    Inst(
        [
            Instance {
                name: MEM_Game,
                class: oCGame,
                body: [],
            },
        ],
    ),
    Inst(
        [
            Instance {
                name: MEM_World,
                class: oWorld,
                body: [],
            },
        ],
    ),
    Inst(
        [
            Instance {
                name: MEM_Timer,
                class: zCTimer,
                body: [],
            },
        ],
    ),
    Inst(
        [
            Instance {
                name: MEM_WorldTimer,
                class: oCWorldTimer,
                body: [],
            },
        ],
    ),
    Inst(
        [
            Instance {
                name: MEM_Vobtree,
                class: zCTree,
                body: [],
            },
        ],
    ),
    Inst(
        [
            Instance {
                name: MEM_InfoMan,
                class: oCInfoManager,
                body: [],
            },
        ],
    ),
    Inst(
        [
            Instance {
                name: MEM_InformationMan,
                class: oCInformationManager,
                body: [],
            },
        ],
    ),
    Inst(
        [
            Instance {
                name: MEM_Waynet,
                class: zCWaynet,
                body: [],
            },
        ],
    ),
    Inst(
        [
            Instance {
                name: MEM_Camera,
                class: zCCamera,
                body: [],
            },
        ],
    ),
    Inst(
        [
            Instance {
                name: MEM_SkyController,
                class: zCSkyController_Outdoor,
                body: [],
            },
        ],
    ),
    Inst(
        [
            Instance {
                name: MEM_SpawnManager,
                class: oCSpawnManager,
                body: [],
            },
        ],
    ),
    Inst(
        [
            Instance {
                name: MEM_GameMananger,
                class: CGameManager,
                body: [],
            },
        ],
    ),
    Inst(
        [
            Instance {
                name: MEM_GameManager,
                class: CGameManager,
                body: [],
            },
        ],
    ),
    Inst(
        [
            Instance {
                name: MEM_Parser,
                class: zCParser,
                body: [],
            },
        ],
    ),
    Func(
        Function {
            name: MEM_InitGlobalInst,
            typ: void,
            params: [],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_Game,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: MEM_ReadInt,
                                            params: [
                                                Identifier(
                                                    VarAccess:  MEMINT_oGame_Pointer_Address,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_World,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  MEM_Game._zCSession_world,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_Vobtree,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Identifier(
                                                VarAccess:  MEM_Game._zCSession_world,
                                            ),
                                            right: Int(
                                                36,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_InfoMan,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  MEM_Game.infoman,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_InformationMan,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  MEMINT_oCInformationManager_Address,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_Waynet,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  MEM_World.wayNet,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_Camera,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  MEM_Game._zCSession_camera,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  MEM_World.skyControlerOutdoor,
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_SkyController,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: _^,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  MEM_World.skyControlerOutdoor,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Exp(
                                    Call(
                                        Call {
                                            func: MEM_AssignInstNull,
                                            params: [
                                                Identifier(
                                                    VarAccess:  MEM_SkyController,
                                                ),
                                            ],
                                        },
                                    ),
                                ),
                            ],
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_SpawnManager,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  MEM_Game.spawnman,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_Timer,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  MEMINT_zTimer_Address,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_WorldTimer,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  MEM_Game.wldTimer,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_GameMananger,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: MEM_ReadInt,
                                            params: [
                                                Identifier(
                                                    VarAccess:  MEMINT_gameMan_Pointer_address,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_GameManager,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: MEM_ReadInt,
                                            params: [
                                                Identifier(
                                                    VarAccess:  MEMINT_gameMan_Pointer_address,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEM_Parser,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  contentParserAddress,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: Hlp_Is_oCMobFire,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: Eq,
                                left: Call(
                                    Call {
                                        func: MEM_ReadInt,
                                        params: [
                                            Identifier(
                                                VarAccess:  ptr,
                                            ),
                                        ],
                                    },
                                ),
                                right: Identifier(
                                    VarAccess:  oCMobFire_vtbl,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: Hlp_Is_zCMover,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: Eq,
                                left: Call(
                                    Call {
                                        func: MEM_ReadInt,
                                        params: [
                                            Identifier(
                                                VarAccess:  ptr,
                                            ),
                                        ],
                                    },
                                ),
                                right: Identifier(
                                    VarAccess:  zCMover_vtbl,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: Hlp_Is_oCMob,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: vtbl,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  vtbl,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Identifier(
                                        VarAccess:  ptr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: BitOr,
                                left: Binary(
                                    BinaryExpression {
                                        op: BitOr,
                                        left: Binary(
                                            BinaryExpression {
                                                op: BitOr,
                                                left: Binary(
                                                    BinaryExpression {
                                                        op: Eq,
                                                        left: Identifier(
                                                            VarAccess:  vtbl,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  oCMob_vtbl,
                                                        ),
                                                    },
                                                ),
                                                right: Binary(
                                                    BinaryExpression {
                                                        op: Eq,
                                                        left: Identifier(
                                                            VarAccess:  vtbl,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  oCMobInter_vtbl,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: Eq,
                                                left: Identifier(
                                                    VarAccess:  vtbl,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  oCMobContainer_vtbl,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                right: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  vtbl,
                                        ),
                                        right: Identifier(
                                            VarAccess:  oCMobDoor_vtbl,
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: Hlp_Is_oCMobInter,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: vtbl,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  vtbl,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Identifier(
                                        VarAccess:  ptr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: BitOr,
                                left: Binary(
                                    BinaryExpression {
                                        op: BitOr,
                                        left: Binary(
                                            BinaryExpression {
                                                op: Eq,
                                                left: Identifier(
                                                    VarAccess:  vtbl,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  oCMobInter_vtbl,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: Eq,
                                                left: Identifier(
                                                    VarAccess:  vtbl,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  oCMobContainer_vtbl,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                right: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  vtbl,
                                        ),
                                        right: Identifier(
                                            VarAccess:  oCMobDoor_vtbl,
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: Hlp_Is_oCMobLockable,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: vtbl,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  vtbl,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Identifier(
                                        VarAccess:  ptr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: BitOr,
                                left: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  vtbl,
                                        ),
                                        right: Identifier(
                                            VarAccess:  oCMobContainer_vtbl,
                                        ),
                                    },
                                ),
                                right: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  vtbl,
                                        ),
                                        right: Identifier(
                                            VarAccess:  oCMobDoor_vtbl,
                                        ),
                                    },
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: Hlp_Is_oCMobContainer,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: Eq,
                                left: Call(
                                    Call {
                                        func: MEM_ReadInt,
                                        params: [
                                            Identifier(
                                                VarAccess:  ptr,
                                            ),
                                        ],
                                    },
                                ),
                                right: Identifier(
                                    VarAccess:  oCMobContainer_vtbl,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: Hlp_Is_oCMobDoor,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: Eq,
                                left: Call(
                                    Call {
                                        func: MEM_ReadInt,
                                        params: [
                                            Identifier(
                                                VarAccess:  ptr,
                                            ),
                                        ],
                                    },
                                ),
                                right: Identifier(
                                    VarAccess:  oCMobDoor_vtbl,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: Hlp_Is_oCNpc,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: Eq,
                                left: Call(
                                    Call {
                                        func: MEM_ReadInt,
                                        params: [
                                            Identifier(
                                                VarAccess:  ptr,
                                            ),
                                        ],
                                    },
                                ),
                                right: Identifier(
                                    VarAccess:  oCNpc_vtbl,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: Hlp_Is_oCItem,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: Eq,
                                left: Call(
                                    Call {
                                        func: MEM_ReadInt,
                                        params: [
                                            Identifier(
                                                VarAccess:  ptr,
                                            ),
                                        ],
                                    },
                                ),
                                right: Identifier(
                                    VarAccess:  oCItem_vtbl,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: Hlp_Is_zCVobLight,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: Eq,
                                left: Call(
                                    Call {
                                        func: MEM_ReadInt,
                                        params: [
                                            Identifier(
                                                VarAccess:  ptr,
                                            ),
                                        ],
                                    },
                                ),
                                right: Identifier(
                                    VarAccess:  zCVobLight_vtbl,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetClassDef,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: objPtr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  objPtr,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEMINT_GetClassDef: ObjPtr == 0.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Plus,
                                            left: Int(
                                                1,
                                            ),
                                            right: Call(
                                                Call {
                                                    func: MEM_ReadInt,
                                                    params: [
                                                        Call(
                                                            Call {
                                                                func: MEM_ReadInt,
                                                                params: [
                                                                    Identifier(
                                                                        VarAccess:  objPtr,
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetClassName,
            typ: string,
            params: [
                VarDeclaration {
                    typ: int,
                    name: objPtr,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: classDef,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  classDef,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_GetClassDef,
                                params: [
                                    Identifier(
                                        VarAccess:  objPtr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  classDef,
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Call(
                                                Call {
                                                    func: MEM_ReadString,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  classDef,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        String(
                            ,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_InsertVob,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: vis,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: wp,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: oCNpc__player_G1,
                        typ: int,
                        initializer: Int(
                            9288624,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: oCNpc__player_G2,
                        typ: int,
                        initializer: Int(
                            11216516,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: playerAdr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  playerAdr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEMINT_SwitchG1G2,
                                params: [
                                    Identifier(
                                        VarAccess:  oCNpc__player_G1,
                                    ),
                                    Identifier(
                                        VarAccess:  oCNpc__player_G2,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: wasInvalid,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  wasInvalid,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Call(
                                            Call {
                                                func: Hlp_Is_oCNpc,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: MEM_ReadInt,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  playerAdr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  wasInvalid,
                                            op: Eq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_GetMemHelper,
                                                params: [],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_WriteInt,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  playerAdr,
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEM_InstGetOffset,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  MEM_Helper,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: oldWorld,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  oldWorld,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  MEM_Helper._zCVob_homeWorld,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_Helper._zCVob_HomeWorld,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_InstGetOffset,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  MEM_World,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: Wld_InsertObject,
                            params: [
                                Identifier(
                                    VarAccess:  vis,
                                ),
                                Identifier(
                                    VarAccess:  wp,
                                ),
                            ],
                        },
                    ),
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  wasInvalid,
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_WriteInt,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  playerAdr,
                                                    ),
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_Helper._zCVob_HomeWorld,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  oldWorld,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCTree,
                            name: newTreeNode,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  newTreeNode,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  MEM_World.globalVobTree_firstChild,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  newTreeNode.data,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_DeleteVob,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: vobPtr,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: world,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  world,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_Game._zCSession_world,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  vobPtr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__thiscall,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  world,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Int(
                                                                    7171824,
                                                                ),
                                                                Int(
                                                                    7864512,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetBufferCRC32,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: buf,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: buflen,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: GetBufferCRC32_G1,
                        typ: int,
                        initializer: Int(
                            6088464,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: GetBufferCRC32_G2,
                        typ: int,
                        initializer: Int(
                            6265360,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: null,
                            array_size: None,
                        },
                    ],
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  null,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  buflen,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  buf,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ret,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__cdecl,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  GetBufferCRC32_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  GetBufferCRC32_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ret,
                            array_size: None,
                        },
                    ],
                ),
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  ret,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetStringHash,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEM_GetBufferCRC32,
                                params: [
                                    Call(
                                        Call {
                                            func: STR_toChar,
                                            params: [
                                                Identifier(
                                                    VarAccess:  str,
                                                ),
                                            ],
                                        },
                                    ),
                                    Call(
                                        Call {
                                            func: STR_Len,
                                            params: [
                                                Identifier(
                                                    VarAccess:  str,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_GetWorldHashBucket,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: hash,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: bucketPtr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  bucketPtr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@,
                                params: [
                                    Identifier(
                                        VarAccess:  MEM_World,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  bucketPtr,
                        op: PlusEq,
                        exp: Binary(
                            BinaryExpression {
                                op: Plus,
                                left: Identifier(
                                    VarAccess:  zCWorld_VobHashTable_Offset,
                                ),
                                right: Binary(
                                    BinaryExpression {
                                        op: Multiply,
                                        left: Int(
                                            12,
                                        ),
                                        right: Identifier(
                                            VarAccess:  hash,
                                        ),
                                    },
                                ),
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  bucketPtr,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_SearchVobByName,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: oCWorld__SearchVobByName_G1,
                        typ: int,
                        initializer: Int(
                            7173120,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: oCWorld__SearchVobByName_G2,
                        typ: int,
                        initializer: Int(
                            7865872,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ptr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ptr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@s,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: world,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  world,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@,
                                params: [
                                    Identifier(
                                        VarAccess:  MEM_World,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ptr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ret,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__thiscall,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  world,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  oCWorld__SearchVobByName_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  oCWorld__SearchVobByName_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ret,
                            array_size: None,
                        },
                    ],
                ),
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  ret,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_SearchAllVobsByName,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: str,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: oCWorld__SearchVobListByName_G1,
                        typ: int,
                        initializer: Int(
                            7173296,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: oCWorld__SearchVobListByName_G2,
                        typ: int,
                        initializer: Int(
                            7866048,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: arr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  arr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ArrayCreate,
                                params: [],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ptr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ptr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@s,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: world,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  world,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@,
                                params: [
                                    Identifier(
                                        VarAccess:  MEM_World,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  arr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ptr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__thiscall,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  world,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  oCWorld__SearchVobListByName_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  oCWorld__SearchVobListByName_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArraySort,
                            params: [
                                Identifier(
                                    VarAccess:  arr,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayUnique,
                            params: [
                                Identifier(
                                    VarAccess:  arr,
                                ),
                            ],
                        },
                    ),
                ),
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  arr,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_RenameVob,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: vobPtr,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: newName,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: zCVob_SetVobName_G1,
                        typ: int,
                        initializer: Int(
                            6113648,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: zCVob_SetVobName_G2,
                        typ: int,
                        initializer: Int(
                            6290896,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ptr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ptr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@s,
                                params: [
                                    Identifier(
                                        VarAccess:  newName,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ptr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__thiscall,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  vobPtr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  zCVob_SetVobName_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  zCVob_SetVobName_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_VobGetEM,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: vobPtr,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: zCVob__GetEM_G1,
                        typ: int,
                        initializer: Int(
                            6113712,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: zCVob__GetEM_G2,
                        typ: int,
                        initializer: Int(
                            6290960,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: null,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ret,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__fastcall,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  vobPtr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  null,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  zCVob__GetEM_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  zCVob__GetEM_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ret,
                            array_size: None,
                        },
                    ],
                ),
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  ret,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_TriggerVob,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: vobPtr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  vobPtr,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_TriggerVob: VobPtr may not be null!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: zCEventManager_OnTrigger_G1,
                        typ: int,
                        initializer: Int(
                            7202656,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: zCEventManager_OnTrigger_G2,
                        typ: int,
                        initializer: Int(
                            7895536,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCVob,
                            name: vob,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  vob,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  vobPtr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: eventMan,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  eventMan,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEMINT_VobGetEM,
                                params: [
                                    Identifier(
                                        VarAccess:  vobPtr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  vobPtr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  vobPtr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__thiscall,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  eventMan,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  zCEventManager_OnTrigger_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  zCEventManager_OnTrigger_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_UntriggerVob,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: vobPtr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  vobPtr,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Error,
                                                params: [
                                                    String(
                                                        MEM_UntriggerVob: VobPtr may not be null!,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: zCEventManager_OnUnTrigger_G1,
                        typ: int,
                        initializer: Int(
                            7202848,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: zCEventManager_OnUnTrigger_G2,
                        typ: int,
                        initializer: Int(
                            7895728,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zCVob,
                            name: vob,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  vob,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  vobPtr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: eventMan,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  eventMan,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEMINT_VobGetEM,
                                params: [
                                    Identifier(
                                        VarAccess:  vobPtr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  vobPtr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  vobPtr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__thiscall,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  eventMan,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  zCEventManager_OnUnTrigger_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  zCEventManager_OnUnTrigger_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Const(
        ConstDeclaration {
            name: KEY_UP,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: KEY_PRESSED,
            typ: int,
            initializer: Int(
                1,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: KEY_HOLD,
            typ: int,
            initializer: Int(
                2,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: KEY_RELEASED,
            typ: int,
            initializer: Int(
                3,
            ),
        },
    ),
    Func(
        Function {
            name: MEM_KeyPressed,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: key,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Binary(
                            BinaryExpression {
                                op: BitAnd,
                                left: Call(
                                    Call {
                                        func: MEM_ReadInt,
                                        params: [
                                            Binary(
                                                BinaryExpression {
                                                    op: Plus,
                                                    left: Identifier(
                                                        VarAccess:  MEMINT_KeyEvent_Offset,
                                                    ),
                                                    right: Identifier(
                                                        VarAccess:  key,
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                right: Int(
                                    255,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Var(
        [
            VarDeclaration {
                typ: int,
                name: MEMINT_KeyState,
                array_size: Some(
                    Size(
                        1024,
                    ),
                ),
            },
        ],
    ),
    Func(
        Function {
            name: MEM_KeyState,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: key,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: pressed,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  pressed,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_KeyPressed,
                                params: [
                                    Identifier(
                                        VarAccess:  key,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: adr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  adr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@,
                                params: [
                                    Identifier(
                                        VarAccess:  MEMINT_KeyState,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  adr,
                        op: PlusEq,
                        exp: Binary(
                            BinaryExpression {
                                op: Multiply,
                                left: Int(
                                    4,
                                ),
                                right: Identifier(
                                    VarAccess:  key,
                                ),
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: keyState,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  keyState,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Identifier(
                                        VarAccess:  adr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  keyState,
                                        ),
                                        right: Identifier(
                                            VarAccess:  KEY_UP,
                                        ),
                                    },
                                ),
                                body: [
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Identifier(
                                                        VarAccess:  pressed,
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  keyState,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  KEY_PRESSED,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                ],
                            },
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  keyState,
                                        ),
                                        right: Identifier(
                                            VarAccess:  KEY_PRESSED,
                                        ),
                                    },
                                ),
                                body: [
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Identifier(
                                                        VarAccess:  pressed,
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  keyState,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  KEY_HOLD,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: Some(
                                                [
                                                    Ass(
                                                        Assignment {
                                                            var: VarAccess:  keyState,
                                                            op: Eq,
                                                            exp: Identifier(
                                                                VarAccess:  KEY_RELEASED,
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            ),
                                        },
                                    ),
                                ],
                            },
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  keyState,
                                        ),
                                        right: Identifier(
                                            VarAccess:  KEY_HOLD,
                                        ),
                                    },
                                ),
                                body: [
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Unary(
                                                        UnaryExpression {
                                                            op: Negate,
                                                            right: Identifier(
                                                                VarAccess:  pressed,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  keyState,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  KEY_RELEASED,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                If(
                                    IfStatement {
                                        branches: [
                                            IfBranch {
                                                cond: Identifier(
                                                    VarAccess:  pressed,
                                                ),
                                                body: [
                                                    Ass(
                                                        Assignment {
                                                            var: VarAccess:  keyState,
                                                            op: Eq,
                                                            exp: Identifier(
                                                                VarAccess:  KEY_PRESSED,
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ],
                                        else_branch: Some(
                                            [
                                                Ass(
                                                    Assignment {
                                                        var: VarAccess:  keyState,
                                                        op: Eq,
                                                        exp: Identifier(
                                                            VarAccess:  KEY_UP,
                                                        ),
                                                    },
                                                ),
                                            ],
                                        ),
                                    },
                                ),
                            ],
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Identifier(
                                    VarAccess:  adr,
                                ),
                                Identifier(
                                    VarAccess:  keyState,
                                ),
                            ],
                        },
                    ),
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  keyState,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_InsertKeyEvent,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: key,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_ArrayInsert,
                            params: [
                                Identifier(
                                    VarAccess:  MEMINT_KeyBuffer_offset,
                                ),
                                Identifier(
                                    VarAccess:  key,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Var(
        [
            VarDeclaration {
                typ: zCOption,
                name: MEMINT_OPT_Set,
                array_size: None,
            },
        ],
    ),
    Var(
        [
            VarDeclaration {
                typ: zCOptionSection,
                name: MEMINT_OPT_Section,
                array_size: None,
            },
        ],
    ),
    Var(
        [
            VarDeclaration {
                typ: zCOptionEntry,
                name: MEMINT_OPT_Entry,
                array_size: None,
            },
        ],
    ),
    Func(
        Function {
            name: MEMINT_OPT_FindEntry,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: optname,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  MEMINT_OPT_Section.entryList_numInArray,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  FALSE,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: i,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loopStart,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loopStart,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  i,
                                        ),
                                        right: Identifier(
                                            VarAccess:  MEMINT_OPT_Section.entryList_numInArray,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: ptr,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  ptr,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_ReadIntArray,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  MEMINT_OPT_Section.entryList_array,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  i,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEMINT_OPT_Entry,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: _^,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  ptr,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Call(
                                                        Call {
                                                            func: Hlp_StrCmp,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  MEMINT_OPT_Entry.varName,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  optname,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    body: [
                                                        ReturnStatement(
                                                            Some(
                                                                Identifier(
                                                                    VarAccess:  TRUE,
                                                                ),
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  i,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loopStart,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  FALSE,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_OPT_FindSection,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: sectname,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  MEMINT_OPT_Set.sectionList_numInArray,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  FALSE,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: i,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loopStart,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loopStart,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  i,
                                        ),
                                        right: Identifier(
                                            VarAccess:  MEMINT_OPT_Set.sectionList_numInArray,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: ptr,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  ptr,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_ReadIntArray,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  MEMINT_OPT_Set.sectionList_array,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  i,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEMINT_OPT_Section,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: _^,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  ptr,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Call(
                                                        Call {
                                                            func: Hlp_StrCmp,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  MEMINT_OPT_Section.secName,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  sectname,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    body: [
                                                        ReturnStatement(
                                                            Some(
                                                                Identifier(
                                                                    VarAccess:  TRUE,
                                                                ),
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  i,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loopStart,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  FALSE,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetGothOpt,
            typ: string,
            params: [
                VarDeclaration {
                    typ: string,
                    name: sectionname,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: optionname,
                    array_size: None,
                },
            ],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_OPT_Set,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: MEM_ReadInt,
                                            params: [
                                                Identifier(
                                                    VarAccess:  zoptions_Pointer_Address,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Call(
                                            Call {
                                                func: MEMINT_OPT_FindSection,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  sectionname,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            String(
                                                ,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Call(
                                            Call {
                                                func: MEMINT_OPT_FindEntry,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  optionname,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            String(
                                                ,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  MEMINT_OPT_Entry.varValue,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GothOptSectionExists,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: sectionname,
                    array_size: None,
                },
            ],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_OPT_Set,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: MEM_ReadInt,
                                            params: [
                                                Identifier(
                                                    VarAccess:  zoptions_Pointer_Address,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEMINT_OPT_FindSection,
                                params: [
                                    Identifier(
                                        VarAccess:  sectionname,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GothOptExists,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: sectionname,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: optionname,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Call(
                                            Call {
                                                func: MEM_GothOptSectionExists,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  sectionname,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  false,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEMINT_OPT_FindEntry,
                                params: [
                                    Identifier(
                                        VarAccess:  optionname,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetModOpt,
            typ: string,
            params: [
                VarDeclaration {
                    typ: string,
                    name: sectionname,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: optionname,
                    array_size: None,
                },
            ],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_OPT_Set,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: MEM_ReadInt,
                                            params: [
                                                Identifier(
                                                    VarAccess:  zgameoptions_Pointer_Address,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Call(
                                            Call {
                                                func: MEMINT_OPT_FindSection,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  sectionname,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            String(
                                                ,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Call(
                                            Call {
                                                func: MEMINT_OPT_FindEntry,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  optionname,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            String(
                                                ,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  MEMINT_OPT_Entry.varValue,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ModOptSectionExists,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: sectionname,
                    array_size: None,
                },
            ],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_OPT_Set,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: MEM_ReadInt,
                                            params: [
                                                Identifier(
                                                    VarAccess:  zgameoptions_Pointer_Address,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEMINT_OPT_FindSection,
                                params: [
                                    Identifier(
                                        VarAccess:  sectionname,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ModOptExists,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: sectionname,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: optionname,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Call(
                                            Call {
                                                func: MEM_ModOptSectionExists,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  sectionname,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  false,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEMINT_OPT_FindEntry,
                                params: [
                                    Identifier(
                                        VarAccess:  optionname,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetCommandLine,
            typ: string,
            params: [],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_OPT_Set,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: MEM_ReadInt,
                                            params: [
                                                Identifier(
                                                    VarAccess:  zoptions_Pointer_Address,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  MEMINT_OPT_Set.commandline,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_SetGothOpt,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: section,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: option,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: value,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: optSetPtr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  optSetPtr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Identifier(
                                        VarAccess:  zoptions_Pointer_Address,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_OPT_Set,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  optSetPtr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Call(
                                            Call {
                                                func: MEMINT_OPT_FindSection,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  section,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Info,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: ConcatStrings,
                                                            params: [
                                                                String(
                                                                    MEM_SetGothOpt: Creating new Section: ,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  section,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: newSect_ptr,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  newSect_ptr,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_Alloc,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  sizeof_zCOptionSection,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEMINT_OPT_Section,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: _^,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  newSect_ptr,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEMINT_OPT_Section.secName,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  section,
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ArrayInsert,
                                                params: [
                                                    Binary(
                                                        BinaryExpression {
                                                            op: Plus,
                                                            left: Identifier(
                                                                VarAccess:  optSetPtr,
                                                            ),
                                                            right: Int(
                                                                8,
                                                            ),
                                                        },
                                                    ),
                                                    Identifier(
                                                        VarAccess:  newSect_ptr,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Call(
                                            Call {
                                                func: MEMINT_OPT_FindEntry,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  option,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Info,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: ConcatStrings,
                                                            params: [
                                                                String(
                                                                    MEM_SetGothOpt: Creating new entry: ,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  option,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: newEntry_ptr,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  newEntry_ptr,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_Alloc,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  sizeof_zCOptionEntry,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEMINT_OPT_Entry,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: _^,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  newEntry_ptr,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEMINT_OPT_Entry.varName,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  option,
                                            ),
                                        },
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: sectPtr,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  sectPtr,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_InstGetOffset,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  MEMINT_OPT_Section,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ArrayInsert,
                                                params: [
                                                    Binary(
                                                        BinaryExpression {
                                                            op: Plus,
                                                            left: Identifier(
                                                                VarAccess:  sectPtr,
                                                            ),
                                                            right: Int(
                                                                20,
                                                            ),
                                                        },
                                                    ),
                                                    Identifier(
                                                        VarAccess:  newEntry_ptr,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_OPT_Entry.varValue,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  value,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  MEMINT_OPT_Entry.varValueTemp,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  value,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ApplyGothOpt,
            typ: void,
            params: [],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__thiscall,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  MEMINT_gameMan_Pointer_address,
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Int(
                                                                    4351936,
                                                                ),
                                                                Int(
                                                                    4355760,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_HexCharToInt,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: c,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: ASCII_a,
                        typ: int,
                        initializer: Int(
                            97,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: ASCII_0,
                        typ: int,
                        initializer: Int(
                            48,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: And,
                                        left: Binary(
                                            BinaryExpression {
                                                op: GE,
                                                left: Identifier(
                                                    VarAccess:  c,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  ASCII_0,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: LT,
                                                left: Identifier(
                                                    VarAccess:  c,
                                                ),
                                                right: Binary(
                                                    BinaryExpression {
                                                        op: Plus,
                                                        left: Identifier(
                                                            VarAccess:  ASCII_0,
                                                        ),
                                                        right: Int(
                                                            10,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Binary(
                                                BinaryExpression {
                                                    op: Minus,
                                                    left: Identifier(
                                                        VarAccess:  c,
                                                    ),
                                                    right: Identifier(
                                                        VarAccess:  ASCII_0,
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ],
                            },
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: And,
                                        left: Binary(
                                            BinaryExpression {
                                                op: GE,
                                                left: Identifier(
                                                    VarAccess:  c,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  ASCII_a,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: LT,
                                                left: Identifier(
                                                    VarAccess:  c,
                                                ),
                                                right: Binary(
                                                    BinaryExpression {
                                                        op: Plus,
                                                        left: Identifier(
                                                            VarAccess:  ASCII_a,
                                                        ),
                                                        right: Int(
                                                            6,
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Binary(
                                                BinaryExpression {
                                                    op: Minus,
                                                    left: Binary(
                                                        BinaryExpression {
                                                            op: Plus,
                                                            left: Int(
                                                                10,
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  c,
                                                            ),
                                                        },
                                                    ),
                                                    right: Identifier(
                                                        VarAccess:  ASCII_a,
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Exp(
                                    Call(
                                        Call {
                                            func: MEM_Error,
                                            params: [
                                                Call(
                                                    Call {
                                                        func: ConcatStrings,
                                                        params: [
                                                            String(
                                                                Invalid Hex Char: ,
                                                            ),
                                                            Call(
                                                                Call {
                                                                    func: IntToString,
                                                                    params: [
                                                                        Identifier(
                                                                            VarAccess:  c,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ),
                                ReturnStatement(
                                    Some(
                                        Int(
                                            0,
                                        ),
                                    ),
                                ),
                            ],
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_KeyStringToKey,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: hex,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zString,
                            name: str,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Call(
                                        Call {
                                            func: _@s,
                                            params: [
                                                Identifier(
                                                    VarAccess:  hex,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: res,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  res,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  res,
                        op: PlusEq,
                        exp: Binary(
                            BinaryExpression {
                                op: LSL,
                                left: Call(
                                    Call {
                                        func: MEMINT_HexCharToInt,
                                        params: [
                                            Call(
                                                Call {
                                                    func: MEM_ReadByte,
                                                    params: [
                                                        Binary(
                                                            BinaryExpression {
                                                                op: Plus,
                                                                left: Identifier(
                                                                    VarAccess:  str.ptr,
                                                                ),
                                                                right: Int(
                                                                    0,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                right: Int(
                                    4,
                                ),
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  res,
                        op: PlusEq,
                        exp: Binary(
                            BinaryExpression {
                                op: LSL,
                                left: Call(
                                    Call {
                                        func: MEMINT_HexCharToInt,
                                        params: [
                                            Call(
                                                Call {
                                                    func: MEM_ReadByte,
                                                    params: [
                                                        Binary(
                                                            BinaryExpression {
                                                                op: Plus,
                                                                left: Identifier(
                                                                    VarAccess:  str.ptr,
                                                                ),
                                                                right: Int(
                                                                    1,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                right: Int(
                                    0,
                                ),
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  res,
                        op: PlusEq,
                        exp: Binary(
                            BinaryExpression {
                                op: LSL,
                                left: Call(
                                    Call {
                                        func: MEMINT_HexCharToInt,
                                        params: [
                                            Call(
                                                Call {
                                                    func: MEM_ReadByte,
                                                    params: [
                                                        Binary(
                                                            BinaryExpression {
                                                                op: Plus,
                                                                left: Identifier(
                                                                    VarAccess:  str.ptr,
                                                                ),
                                                                right: Int(
                                                                    2,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                right: Int(
                                    12,
                                ),
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  res,
                        op: PlusEq,
                        exp: Binary(
                            BinaryExpression {
                                op: LSL,
                                left: Call(
                                    Call {
                                        func: MEMINT_HexCharToInt,
                                        params: [
                                            Call(
                                                Call {
                                                    func: MEM_ReadByte,
                                                    params: [
                                                        Binary(
                                                            BinaryExpression {
                                                                op: Plus,
                                                                left: Identifier(
                                                                    VarAccess:  str.ptr,
                                                                ),
                                                                right: Int(
                                                                    3,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                right: Int(
                                    8,
                                ),
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  res,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetKey,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: name,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: string,
                            name: raw,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  raw,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_GetGothOpt,
                                params: [
                                    String(
                                        KEYS,
                                    ),
                                    Identifier(
                                        VarAccess:  name,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Call(
                                            Call {
                                                func: STR_Len,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  raw,
                                                    ),
                                                ],
                                            },
                                        ),
                                        right: Int(
                                            4,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Warn,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: ConcatStrings,
                                                            params: [
                                                                String(
                                                                    Could not find key with name: ,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  name,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEMINT_KeyStringToKey,
                                params: [
                                    Identifier(
                                        VarAccess:  raw,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetSecondaryKey,
            typ: int,
            params: [
                VarDeclaration {
                    typ: string,
                    name: name,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: string,
                            name: raw,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  raw,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_GetGothOpt,
                                params: [
                                    String(
                                        KEYS,
                                    ),
                                    Identifier(
                                        VarAccess:  name,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Call(
                                            Call {
                                                func: STR_Len,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  raw,
                                                    ),
                                                ],
                                            },
                                        ),
                                        right: Int(
                                            8,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  raw,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: STR_SubStr,
                                params: [
                                    Identifier(
                                        VarAccess:  raw,
                                    ),
                                    Int(
                                        4,
                                    ),
                                    Int(
                                        4,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEMINT_KeyStringToKey,
                                params: [
                                    Identifier(
                                        VarAccess:  raw,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_ByteToKeyHex,
            typ: string,
            params: [
                VarDeclaration {
                    typ: int,
                    name: byte,
                    array_size: None,
                },
            ],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: ASCII_0,
                        typ: int,
                        initializer: Int(
                            48,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  byte,
                        op: Eq,
                        exp: Binary(
                            BinaryExpression {
                                op: BitAnd,
                                left: Identifier(
                                    VarAccess:  byte,
                                ),
                                right: Int(
                                    255,
                                ),
                            },
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: mem,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  mem,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  mem,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_Alloc,
                                                    params: [
                                                        Int(
                                                            3,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteByte,
                            params: [
                                Identifier(
                                    VarAccess:  mem,
                                ),
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Binary(
                                            BinaryExpression {
                                                op: LSR,
                                                left: Identifier(
                                                    VarAccess:  byte,
                                                ),
                                                right: Int(
                                                    4,
                                                ),
                                            },
                                        ),
                                        right: Identifier(
                                            VarAccess:  ASCII_0,
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteByte,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  mem,
                                        ),
                                        right: Int(
                                            1,
                                        ),
                                    },
                                ),
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Binary(
                                            BinaryExpression {
                                                op: BitAnd,
                                                left: Identifier(
                                                    VarAccess:  byte,
                                                ),
                                                right: Int(
                                                    15,
                                                ),
                                            },
                                        ),
                                        right: Identifier(
                                            VarAccess:  ASCII_0,
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: STR_FromChar,
                                params: [
                                    Identifier(
                                        VarAccess:  mem,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_SetKeys,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: name,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: primary,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: secondary,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: string,
                            name: str,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: String(
                            ,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ConcatStrings,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                    Call(
                                        Call {
                                            func: MEMINT_ByteToKeyHex,
                                            params: [
                                                Identifier(
                                                    VarAccess:  primary,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ConcatStrings,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                    Call(
                                        Call {
                                            func: MEMINT_ByteToKeyHex,
                                            params: [
                                                Binary(
                                                    BinaryExpression {
                                                        op: LSR,
                                                        left: Identifier(
                                                            VarAccess:  primary,
                                                        ),
                                                        right: Int(
                                                            8,
                                                        ),
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ConcatStrings,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                    Call(
                                        Call {
                                            func: MEMINT_ByteToKeyHex,
                                            params: [
                                                Identifier(
                                                    VarAccess:  secondary,
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ConcatStrings,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                    Call(
                                        Call {
                                            func: MEMINT_ByteToKeyHex,
                                            params: [
                                                Binary(
                                                    BinaryExpression {
                                                        op: LSR,
                                                        left: Identifier(
                                                            VarAccess:  secondary,
                                                        ),
                                                        right: Int(
                                                            8,
                                                        ),
                                                    },
                                                ),
                                            ],
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_SetGothOpt,
                            params: [
                                String(
                                    KEYS,
                                ),
                                Identifier(
                                    VarAccess:  name,
                                ),
                                Identifier(
                                    VarAccess:  str,
                                ),
                            ],
                        },
                    ),
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: zInputPtr,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  zInputPtr,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEMINT_SwitchG1G2,
                                                    params: [
                                                        Int(
                                                            8834208,
                                                        ),
                                                        Int(
                                                            9246288,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: zCInput__BindKeys,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  zCInput__BindKeys,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEMINT_SwitchG1G2,
                                                    params: [
                                                        Int(
                                                            5003568,
                                                        ),
                                                        Int(
                                                            5045760,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: null,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  null,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__thiscall,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  zInputPtr,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  zCInput__BindKeys,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_SetKey,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: name,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: key,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_SetKeys,
                            params: [
                                Identifier(
                                    VarAccess:  name,
                                ),
                                Identifier(
                                    VarAccess:  key,
                                ),
                                Call(
                                    Call {
                                        func: MEM_GetSecondaryKey,
                                        params: [
                                            Identifier(
                                                VarAccess:  name,
                                            ),
                                        ],
                                    },
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_SetSecondaryKey,
            typ: void,
            params: [
                VarDeclaration {
                    typ: string,
                    name: name,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: key,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_SetKeys,
                            params: [
                                Identifier(
                                    VarAccess:  name,
                                ),
                                Call(
                                    Call {
                                        func: MEM_GetKey,
                                        params: [
                                            Identifier(
                                                VarAccess:  name,
                                            ),
                                        ],
                                    },
                                ),
                                Identifier(
                                    VarAccess:  key,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetSystemTime,
            typ: int,
            params: [],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: sysGetTimePtr_G1,
                        typ: int,
                        initializer: Int(
                            5204320,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: sysGetTimePtr_G2,
                        typ: int,
                        initializer: Int(
                            5264000,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ret,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__cdecl,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  sysGetTimePtr_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  sysGetTimePtr_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ret,
                            array_size: None,
                        },
                    ],
                ),
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  ret,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_GetPerformanceCounter,
            typ: int,
            params: [],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: buf,
                            array_size: Some(
                                Size(
                                    2,
                                ),
                            ),
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: space,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  space,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@,
                                params: [
                                    Identifier(
                                        VarAccess:  buf,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: QueryPerformanceCounter_G1,
                        typ: int,
                        initializer: Int(
                            7712432,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: QueryPerformanceCounter_G2,
                        typ: int,
                        initializer: Int(
                            8079382,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  space,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__stdcall,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  QueryPerformanceCounter_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  QueryPerformanceCounter_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  buf[Int(
                                0,
                            )],
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_Benchmark_Helper,
            typ: void,
            params: [],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEMINT_Benchmark_Helper,
                            params: [],
                        },
                    ),
                ),
            ],
        },
    ),
    Const(
        ConstDeclaration {
            name: MEMINT_Benchmark_MS,
            typ: int,
            initializer: Int(
                0,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MEMINT_Benchmark_PC,
            typ: int,
            initializer: Int(
                1,
            ),
        },
    ),
    Const(
        ConstDeclaration {
            name: MEMINT_Benchmark_MMS,
            typ: int,
            initializer: Int(
                2,
            ),
        },
    ),
    Func(
        Function {
            name: MEMINT_Benchmark,
            typ: int,
            params: [
                VarDeclaration {
                    typ: func,
                    name: f,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: times,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: unit,
                    array_size: None,
                },
            ],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Call(
                                            Call {
                                                func: MEM_GetFuncPtr,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  MEMINT_Benchmark_Helper,
                                                    ),
                                                ],
                                            },
                                        ),
                                        right: Int(
                                            1,
                                        ),
                                    },
                                ),
                                Call(
                                    Call {
                                        func: MEM_GetFuncOffset,
                                        params: [
                                            Identifier(
                                                VarAccess:  f,
                                            ),
                                        ],
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: i,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: startTime,
                            array_size: None,
                        },
                    ],
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  unit,
                                        ),
                                        right: Identifier(
                                            VarAccess:  MEMINT_Benchmark_MS,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  startTime,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_GetSystemTime,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Ass(
                                    Assignment {
                                        var: VarAccess:  startTime,
                                        op: Eq,
                                        exp: Call(
                                            Call {
                                                func: MEM_GetPerformanceCounter,
                                                params: [],
                                            },
                                        ),
                                    },
                                ),
                            ],
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loop,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loop,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  i,
                                        ),
                                        right: Identifier(
                                            VarAccess:  times,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_Benchmark_Helper,
                                                params: [],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  i,
                                            op: PlusEq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loop,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  unit,
                                        ),
                                        right: Identifier(
                                            VarAccess:  MEMINT_Benchmark_MS,
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        Some(
                                            Binary(
                                                BinaryExpression {
                                                    op: Minus,
                                                    left: Call(
                                                        Call {
                                                            func: MEM_GetSystemTime,
                                                            params: [],
                                                        },
                                                    ),
                                                    right: Identifier(
                                                        VarAccess:  startTime,
                                                    ),
                                                },
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                VarDeclarations(
                                    [
                                        VarDeclaration {
                                            typ: int,
                                            name: pc,
                                            array_size: None,
                                        },
                                    ],
                                ),
                                Ass(
                                    Assignment {
                                        var: VarAccess:  pc,
                                        op: Eq,
                                        exp: Binary(
                                            BinaryExpression {
                                                op: Minus,
                                                left: Call(
                                                    Call {
                                                        func: MEM_GetPerformanceCounter,
                                                        params: [],
                                                    },
                                                ),
                                                right: Identifier(
                                                    VarAccess:  startTime,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                If(
                                    IfStatement {
                                        branches: [
                                            IfBranch {
                                                cond: Binary(
                                                    BinaryExpression {
                                                        op: Eq,
                                                        left: Identifier(
                                                            VarAccess:  unit,
                                                        ),
                                                        right: Identifier(
                                                            VarAccess:  MEMINT_Benchmark_PC,
                                                        ),
                                                    },
                                                ),
                                                body: [
                                                    ReturnStatement(
                                                        Some(
                                                            Identifier(
                                                                VarAccess:  pc,
                                                            ),
                                                        ),
                                                    ),
                                                ],
                                            },
                                        ],
                                        else_branch: Some(
                                            [
                                                If(
                                                    IfStatement {
                                                        branches: [
                                                            IfBranch {
                                                                cond: Binary(
                                                                    BinaryExpression {
                                                                        op: GT,
                                                                        left: Identifier(
                                                                            VarAccess:  pc,
                                                                        ),
                                                                        right: Int(
                                                                            2147483,
                                                                        ),
                                                                    },
                                                                ),
                                                                body: [
                                                                    ReturnStatement(
                                                                        Some(
                                                                            Binary(
                                                                                BinaryExpression {
                                                                                    op: Multiply,
                                                                                    left: Binary(
                                                                                        BinaryExpression {
                                                                                            op: Divide,
                                                                                            left: Identifier(
                                                                                                VarAccess:  pc,
                                                                                            ),
                                                                                            right: Call(
                                                                                                Call {
                                                                                                    func: MEM_ReadInt,
                                                                                                    params: [
                                                                                                        Identifier(
                                                                                                            VarAccess:  PC_TicksPerMS_Address,
                                                                                                        ),
                                                                                                    ],
                                                                                                },
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                    right: Int(
                                                                                        1000,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ),
                                                                    ),
                                                                ],
                                                            },
                                                        ],
                                                        else_branch: Some(
                                                            [
                                                                ReturnStatement(
                                                                    Some(
                                                                        Binary(
                                                                            BinaryExpression {
                                                                                op: Divide,
                                                                                left: Binary(
                                                                                    BinaryExpression {
                                                                                        op: Multiply,
                                                                                        left: Identifier(
                                                                                            VarAccess:  pc,
                                                                                        ),
                                                                                        right: Int(
                                                                                            1000,
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                right: Call(
                                                                                    Call {
                                                                                        func: MEM_ReadInt,
                                                                                        params: [
                                                                                            Identifier(
                                                                                                VarAccess:  PC_TicksPerMS_Address,
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ),
                                                                ),
                                                            ],
                                                        ),
                                                    },
                                                ),
                                            ],
                                        ),
                                    },
                                ),
                            ],
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_BenchmarkMS,
            typ: int,
            params: [
                VarDeclaration {
                    typ: func,
                    name: f,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEMINT_Benchmark,
                                params: [
                                    Identifier(
                                        VarAccess:  f,
                                    ),
                                    Int(
                                        1,
                                    ),
                                    Identifier(
                                        VarAccess:  MEMINT_Benchmark_MS,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_BenchmarkMS_N,
            typ: int,
            params: [
                VarDeclaration {
                    typ: func,
                    name: f,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: n,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEMINT_Benchmark,
                                params: [
                                    Identifier(
                                        VarAccess:  f,
                                    ),
                                    Identifier(
                                        VarAccess:  n,
                                    ),
                                    Identifier(
                                        VarAccess:  MEMINT_Benchmark_MS,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_BenchmarkMMS,
            typ: int,
            params: [
                VarDeclaration {
                    typ: func,
                    name: f,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEMINT_Benchmark,
                                params: [
                                    Identifier(
                                        VarAccess:  f,
                                    ),
                                    Int(
                                        1,
                                    ),
                                    Identifier(
                                        VarAccess:  MEMINT_Benchmark_MMS,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_BenchmarkMMS_N,
            typ: int,
            params: [
                VarDeclaration {
                    typ: func,
                    name: f,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: n,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEMINT_Benchmark,
                                params: [
                                    Identifier(
                                        VarAccess:  f,
                                    ),
                                    Identifier(
                                        VarAccess:  n,
                                    ),
                                    Identifier(
                                        VarAccess:  MEMINT_Benchmark_MMS,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_BenchmarkPC,
            typ: int,
            params: [
                VarDeclaration {
                    typ: func,
                    name: f,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEMINT_Benchmark,
                                params: [
                                    Identifier(
                                        VarAccess:  f,
                                    ),
                                    Int(
                                        1,
                                    ),
                                    Identifier(
                                        VarAccess:  MEMINT_Benchmark_PC,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_BenchmarkPC_N,
            typ: int,
            params: [
                VarDeclaration {
                    typ: func,
                    name: f,
                    array_size: None,
                },
                VarDeclaration {
                    typ: int,
                    name: n,
                    array_size: None,
                },
            ],
            body: [
                ReturnStatement(
                    Some(
                        Call(
                            Call {
                                func: MEMINT_Benchmark,
                                params: [
                                    Identifier(
                                        VarAccess:  f,
                                    ),
                                    Identifier(
                                        VarAccess:  n,
                                    ),
                                    Identifier(
                                        VarAccess:  MEMINT_Benchmark_PC,
                                    ),
                                ],
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_SendToSpy_Implementation,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: errorType,
                    array_size: None,
                },
                VarDeclaration {
                    typ: string,
                    name: text,
                    array_size: None,
                },
            ],
            body: [
                Ass(
                    Assignment {
                        var: VarAccess:  text,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ConcatStrings,
                                params: [
                                    String(
                                        Q: ,
                                    ),
                                    Identifier(
                                        VarAccess:  text,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: zerr_G1,
                        typ: int,
                        initializer: Int(
                            8821208,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: zerr_G2,
                        typ: int,
                        initializer: Int(
                            9231568,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: zerrPtr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zerrPtr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEMINT_SwitchG1G2,
                                params: [
                                    Identifier(
                                        VarAccess:  zerr_G1,
                                    ),
                                    Identifier(
                                        VarAccess:  zerr_G2,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: zERROR,
                            name: zerr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zerr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _^,
                                params: [
                                    Identifier(
                                        VarAccess:  zerrPtr,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: old_ack_type,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  old_ack_type,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  zerr.ack_type,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  MEMINT_ForceErrorBox,
                                ),
                                body: [
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: Eq,
                                                            left: Identifier(
                                                                VarAccess:  GOTHIC_BASE_VERSION,
                                                            ),
                                                            right: Int(
                                                                1,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MemoryProtectionOverride,
                                                                    params: [
                                                                        Int(
                                                                            5199298,
                                                                        ),
                                                                        Int(
                                                                            1,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEM_WriteByte,
                                                                    params: [
                                                                        Int(
                                                                            5199298,
                                                                        ),
                                                                        Int(
                                                                            1,
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  zerr.ack_type,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  zERR_TYPE_WARN,
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: LT,
                                                            left: Identifier(
                                                                VarAccess:  errorType,
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  zERR_TYPE_WARN,
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  errorType,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  zERR_TYPE_WARN,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEMINT_ForceErrorBox,
                                            op: Eq,
                                            exp: Int(
                                                0,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Ass(
                                    Assignment {
                                        var: VarAccess:  zerr.ack_type,
                                        op: Eq,
                                        exp: Identifier(
                                            VarAccess:  zERR_TYPE_FATAL,
                                        ),
                                    },
                                ),
                            ],
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: zERROR_Report_G1,
                        typ: int,
                        initializer: Int(
                            4489808,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: zERROR_Report_G2,
                        typ: int,
                        initializer: Int(
                            4507856,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: null,
                            array_size: None,
                        },
                    ],
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ptr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ptr,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: _@s,
                                params: [
                                    Identifier(
                                        VarAccess:  text,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  null,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  null,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  null,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  null,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  null,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ptr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  null,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PtrParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  errorType,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__thiscall,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  zerrPtr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  zERROR_Report_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  zERROR_Report_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  zerr.ack_type,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  old_ack_type,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_PrintStackTraceLine,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: popPos,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: valid,
                            array_size: None,
                        },
                    ],
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Or,
                                        left: Binary(
                                            BinaryExpression {
                                                op: LT,
                                                left: Identifier(
                                                    VarAccess:  popPos,
                                                ),
                                                right: Int(
                                                    0,
                                                ),
                                            },
                                        ),
                                        right: Binary(
                                            BinaryExpression {
                                                op: GE,
                                                left: Identifier(
                                                    VarAccess:  popPos,
                                                ),
                                                right: Identifier(
                                                    VarAccess:  MEM_Parser.stack_stacksize,
                                                ),
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  valid,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  false,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Ass(
                                    Assignment {
                                        var: VarAccess:  valid,
                                        op: Eq,
                                        exp: Identifier(
                                            VarAccess:  true,
                                        ),
                                    },
                                ),
                                VarDeclarations(
                                    [
                                        VarDeclaration {
                                            typ: int,
                                            name: funcID,
                                            array_size: None,
                                        },
                                    ],
                                ),
                                VarDeclarations(
                                    [
                                        VarDeclaration {
                                            typ: zCPar_Symbol,
                                            name: symb,
                                            array_size: None,
                                        },
                                    ],
                                ),
                                Ass(
                                    Assignment {
                                        var: VarAccess:  funcID,
                                        op: Eq,
                                        exp: Call(
                                            Call {
                                                func: MEM_GetFuncIDByOffset,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  popPos,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                                Ass(
                                    Assignment {
                                        var: VarAccess:  symb,
                                        op: Eq,
                                        exp: Call(
                                            Call {
                                                func: _^,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: MEM_ReadIntArray,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  contentSymbolTableAddress,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  funcID,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            ],
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: spaces,
                        typ: string,
                        initializer: String(
                                                                                                                                ,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: string,
                            name: prt,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  prt,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: STR_Prefix,
                                params: [
                                    Identifier(
                                        VarAccess:  spaces,
                                    ),
                                    Int(
                                        8,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  valid,
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  prt,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: ConcatStrings,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  prt,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  symb.name,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  prt,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: ConcatStrings,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  prt,
                                                        ),
                                                        String(
                                                            (,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: loop,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: i,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  i,
                                            op: Eq,
                                            exp: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  loop,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  MEM_StackPos.position,
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Binary(
                                                        BinaryExpression {
                                                            op: LE,
                                                            left: Identifier(
                                                                VarAccess:  i,
                                                            ),
                                                            right: Binary(
                                                                BinaryExpression {
                                                                    op: BitAnd,
                                                                    left: Identifier(
                                                                        VarAccess:  symb.bitfield,
                                                                    ),
                                                                    right: Identifier(
                                                                        VarAccess:  zCPar_Symbol_bitfield_ele,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                    body: [
                                                        VarDeclarations(
                                                            [
                                                                VarDeclaration {
                                                                    typ: zCPar_Symbol,
                                                                    name: param,
                                                                    array_size: None,
                                                                },
                                                            ],
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  param,
                                                                op: Eq,
                                                                exp: Call(
                                                                    Call {
                                                                        func: _^,
                                                                        params: [
                                                                            Call(
                                                                                Call {
                                                                                    func: MEM_ReadIntArray,
                                                                                    params: [
                                                                                        Identifier(
                                                                                            VarAccess:  currSymbolTableAddress,
                                                                                        ),
                                                                                        Binary(
                                                                                            BinaryExpression {
                                                                                                op: Plus,
                                                                                                left: Identifier(
                                                                                                    VarAccess:  funcID,
                                                                                                ),
                                                                                                right: Identifier(
                                                                                                    VarAccess:  i,
                                                                                                ),
                                                                                            },
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                        If(
                                                            IfStatement {
                                                                branches: [
                                                                    IfBranch {
                                                                        cond: Binary(
                                                                            BinaryExpression {
                                                                                op: GT,
                                                                                left: Identifier(
                                                                                    VarAccess:  i,
                                                                                ),
                                                                                right: Int(
                                                                                    1,
                                                                                ),
                                                                            },
                                                                        ),
                                                                        body: [
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  prt,
                                                                                    op: Eq,
                                                                                    exp: Call(
                                                                                        Call {
                                                                                            func: ConcatStrings,
                                                                                            params: [
                                                                                                Identifier(
                                                                                                    VarAccess:  prt,
                                                                                                ),
                                                                                                String(
                                                                                                    , ,
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ],
                                                                else_branch: None,
                                                            },
                                                        ),
                                                        If(
                                                            IfStatement {
                                                                branches: [
                                                                    IfBranch {
                                                                        cond: Binary(
                                                                            BinaryExpression {
                                                                                op: Eq,
                                                                                left: Binary(
                                                                                    BinaryExpression {
                                                                                        op: BitAnd,
                                                                                        left: Identifier(
                                                                                            VarAccess:  param.bitfield,
                                                                                        ),
                                                                                        right: Identifier(
                                                                                            VarAccess:  zCPar_Symbol_bitfield_type,
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                right: Identifier(
                                                                                    VarAccess:  zPAR_TYPE_INT,
                                                                                ),
                                                                            },
                                                                        ),
                                                                        body: [
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  prt,
                                                                                    op: Eq,
                                                                                    exp: Call(
                                                                                        Call {
                                                                                            func: ConcatStrings,
                                                                                            params: [
                                                                                                Identifier(
                                                                                                    VarAccess:  prt,
                                                                                                ),
                                                                                                Call(
                                                                                                    Call {
                                                                                                        func: IntToString,
                                                                                                        params: [
                                                                                                            Identifier(
                                                                                                                VarAccess:  param.content,
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                    IfBranch {
                                                                        cond: Binary(
                                                                            BinaryExpression {
                                                                                op: Eq,
                                                                                left: Binary(
                                                                                    BinaryExpression {
                                                                                        op: BitAnd,
                                                                                        left: Identifier(
                                                                                            VarAccess:  param.bitfield,
                                                                                        ),
                                                                                        right: Identifier(
                                                                                            VarAccess:  zCPar_Symbol_bitfield_type,
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                right: Identifier(
                                                                                    VarAccess:  zPAR_TYPE_STRING,
                                                                                ),
                                                                            },
                                                                        ),
                                                                        body: [
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  prt,
                                                                                    op: Eq,
                                                                                    exp: Call(
                                                                                        Call {
                                                                                            func: ConcatStrings,
                                                                                            params: [
                                                                                                Identifier(
                                                                                                    VarAccess:  prt,
                                                                                                ),
                                                                                                String(
                                                                                                    ',
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  prt,
                                                                                    op: Eq,
                                                                                    exp: Call(
                                                                                        Call {
                                                                                            func: ConcatStrings,
                                                                                            params: [
                                                                                                Identifier(
                                                                                                    VarAccess:  prt,
                                                                                                ),
                                                                                                Call(
                                                                                                    Call {
                                                                                                        func: MEM_ReadString,
                                                                                                        params: [
                                                                                                            Identifier(
                                                                                                                VarAccess:  param.content,
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  prt,
                                                                                    op: Eq,
                                                                                    exp: Call(
                                                                                        Call {
                                                                                            func: ConcatStrings,
                                                                                            params: [
                                                                                                Identifier(
                                                                                                    VarAccess:  prt,
                                                                                                ),
                                                                                                String(
                                                                                                    ',
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                    IfBranch {
                                                                        cond: Binary(
                                                                            BinaryExpression {
                                                                                op: Eq,
                                                                                left: Binary(
                                                                                    BinaryExpression {
                                                                                        op: BitAnd,
                                                                                        left: Identifier(
                                                                                            VarAccess:  param.bitfield,
                                                                                        ),
                                                                                        right: Identifier(
                                                                                            VarAccess:  zCPar_Symbol_bitfield_type,
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                right: Identifier(
                                                                                    VarAccess:  zPAR_TYPE_FUNC,
                                                                                ),
                                                                            },
                                                                        ),
                                                                        body: [
                                                                            VarDeclarations(
                                                                                [
                                                                                    VarDeclaration {
                                                                                        typ: zCPar_Symbol,
                                                                                        name: funcParm,
                                                                                        array_size: None,
                                                                                    },
                                                                                ],
                                                                            ),
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  funcParm,
                                                                                    op: Eq,
                                                                                    exp: Call(
                                                                                        Call {
                                                                                            func: _^,
                                                                                            params: [
                                                                                                Call(
                                                                                                    Call {
                                                                                                        func: MEM_ReadIntArray,
                                                                                                        params: [
                                                                                                            Identifier(
                                                                                                                VarAccess:  currSymbolTableAddress,
                                                                                                            ),
                                                                                                            Identifier(
                                                                                                                VarAccess:  param.content,
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  prt,
                                                                                    op: Eq,
                                                                                    exp: Call(
                                                                                        Call {
                                                                                            func: ConcatStrings,
                                                                                            params: [
                                                                                                Identifier(
                                                                                                    VarAccess:  prt,
                                                                                                ),
                                                                                                Identifier(
                                                                                                    VarAccess:  funcParm.name,
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                    IfBranch {
                                                                        cond: Binary(
                                                                            BinaryExpression {
                                                                                op: Eq,
                                                                                left: Binary(
                                                                                    BinaryExpression {
                                                                                        op: BitAnd,
                                                                                        left: Identifier(
                                                                                            VarAccess:  param.bitfield,
                                                                                        ),
                                                                                        right: Identifier(
                                                                                            VarAccess:  zCPar_Symbol_bitfield_type,
                                                                                        ),
                                                                                    },
                                                                                ),
                                                                                right: Identifier(
                                                                                    VarAccess:  zPAR_TYPE_INSTANCE,
                                                                                ),
                                                                            },
                                                                        ),
                                                                        body: [
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  prt,
                                                                                    op: Eq,
                                                                                    exp: Call(
                                                                                        Call {
                                                                                            func: ConcatStrings,
                                                                                            params: [
                                                                                                Identifier(
                                                                                                    VarAccess:  prt,
                                                                                                ),
                                                                                                String(
                                                                                                    (instance),
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  prt,
                                                                                    op: Eq,
                                                                                    exp: Call(
                                                                                        Call {
                                                                                            func: ConcatStrings,
                                                                                            params: [
                                                                                                Identifier(
                                                                                                    VarAccess:  prt,
                                                                                                ),
                                                                                                Call(
                                                                                                    Call {
                                                                                                        func: IntToString,
                                                                                                        params: [
                                                                                                            Identifier(
                                                                                                                VarAccess:  param.offset,
                                                                                                            ),
                                                                                                        ],
                                                                                                    },
                                                                                                ),
                                                                                            ],
                                                                                        },
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ],
                                                                else_branch: Some(
                                                                    [
                                                                        Ass(
                                                                            Assignment {
                                                                                var: VarAccess:  prt,
                                                                                op: Eq,
                                                                                exp: Call(
                                                                                    Call {
                                                                                        func: ConcatStrings,
                                                                                        params: [
                                                                                            Identifier(
                                                                                                VarAccess:  prt,
                                                                                            ),
                                                                                            String(
                                                                                                [Parameter of Unknown type],
                                                                                            ),
                                                                                        ],
                                                                                    },
                                                                                ),
                                                                            },
                                                                        ),
                                                                    ],
                                                                ),
                                                            },
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  i,
                                                                op: PlusEq,
                                                                exp: Int(
                                                                    1,
                                                                ),
                                                            },
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  MEM_StackPos.position,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  loop,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  prt,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: ConcatStrings,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  prt,
                                                        ),
                                                        String(
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Ass(
                                    Assignment {
                                        var: VarAccess:  prt,
                                        op: Eq,
                                        exp: Call(
                                            Call {
                                                func: ConcatStrings,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  prt,
                                                    ),
                                                    String(
                                                        [UNKNOWN],
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            ],
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Call(
                                            Call {
                                                func: STR_Len,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  prt,
                                                    ),
                                                ],
                                            },
                                        ),
                                        right: Int(
                                            70,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  prt,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: ConcatStrings,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  prt,
                                                        ),
                                                        Call(
                                                            Call {
                                                                func: STR_Prefix,
                                                                params: [
                                                                    Identifier(
                                                                        VarAccess:  spaces,
                                                                    ),
                                                                    Binary(
                                                                        BinaryExpression {
                                                                            op: Minus,
                                                                            left: Int(
                                                                                70,
                                                                            ),
                                                                            right: Call(
                                                                                Call {
                                                                                    func: STR_Len,
                                                                                    params: [
                                                                                        Identifier(
                                                                                            VarAccess:  prt,
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  prt,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ConcatStrings,
                                params: [
                                    Identifier(
                                        VarAccess:  prt,
                                    ),
                                    String(
                                         +,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: string,
                            name: bytes,
                            array_size: None,
                        },
                    ],
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  valid,
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  bytes,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: IntToString,
                                                    params: [
                                                        Binary(
                                                            BinaryExpression {
                                                                op: Minus,
                                                                left: Identifier(
                                                                    VarAccess:  popPos,
                                                                ),
                                                                right: Identifier(
                                                                    VarAccess:  symb.content,
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Ass(
                                    Assignment {
                                        var: VarAccess:  bytes,
                                        op: Eq,
                                        exp: Call(
                                            Call {
                                                func: IntToString,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  popPos,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            ],
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Call(
                                            Call {
                                                func: STR_Len,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  bytes,
                                                    ),
                                                ],
                                            },
                                        ),
                                        right: Int(
                                            5,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  bytes,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: ConcatStrings,
                                                    params: [
                                                        Call(
                                                            Call {
                                                                func: STR_Prefix,
                                                                params: [
                                                                    Identifier(
                                                                        VarAccess:  spaces,
                                                                    ),
                                                                    Binary(
                                                                        BinaryExpression {
                                                                            op: Minus,
                                                                            left: Int(
                                                                                5,
                                                                            ),
                                                                            right: Call(
                                                                                Call {
                                                                                    func: STR_Len,
                                                                                    params: [
                                                                                        Identifier(
                                                                                            VarAccess:  bytes,
                                                                                        ),
                                                                                    ],
                                                                                },
                                                                            ),
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        Identifier(
                                                            VarAccess:  bytes,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  bytes,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ConcatStrings,
                                params: [
                                    Identifier(
                                        VarAccess:  bytes,
                                    ),
                                    String(
                                         bytes,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  prt,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ConcatStrings,
                                params: [
                                    Identifier(
                                        VarAccess:  prt,
                                    ),
                                    Identifier(
                                        VarAccess:  bytes,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_SendToSpy,
                            params: [
                                Identifier(
                                    VarAccess:  zERR_TYPE_FAULT,
                                ),
                                Identifier(
                                    VarAccess:  prt,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_PrintStackTrace_Implementation,
            typ: void,
            params: [],
            body: [
                Exp(
                    Call(
                        Call {
                            func: MEM_SendToSpy,
                            params: [
                                Identifier(
                                    VarAccess:  zERR_TYPE_FAULT,
                                ),
                                String(
                                    [start of stacktrace],
                                ),
                            ],
                        },
                    ),
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ESP,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ESP,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEMINT_FindFrameBoundary,
                                params: [
                                    Call(
                                        Call {
                                            func: MEMINT_GetESP,
                                            params: [],
                                        },
                                    ),
                                    Unary(
                                        UnaryExpression {
                                            op: Minus,
                                            right: Int(
                                                1,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ESP,
                        op: PlusEq,
                        exp: Identifier(
                            VarAccess:  MEMINT_DoStackFrameSize,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: passedMySelf,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  passedMySelf,
                        op: Eq,
                        exp: Int(
                            0,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: mySelf,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  mySelf,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_GetFuncID,
                                params: [
                                    Identifier(
                                        VarAccess:  MEMINT_PrintStackTrace_Implementation,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: loop,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  loop,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  MEM_StackPos.position,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: popPos,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  popPos,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_ReadInt,
                                params: [
                                    Binary(
                                        BinaryExpression {
                                            op: Minus,
                                            left: Identifier(
                                                VarAccess:  ESP,
                                            ),
                                            right: Identifier(
                                                VarAccess:  MEMINT_DoStackPopPosOffset,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Identifier(
                                    VarAccess:  passedMySelf,
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_PrintStackTraceLine,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  popPos,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: LT,
                                        left: Identifier(
                                            VarAccess:  popPos,
                                        ),
                                        right: Identifier(
                                            VarAccess:  MEM_Parser.stack_stacksize,
                                        ),
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: funcID,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  funcID,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_GetFuncIDByOffset,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  popPos,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  passedMySelf,
                                            op: Eq,
                                            exp: Binary(
                                                BinaryExpression {
                                                    op: Eq,
                                                    left: Identifier(
                                                        VarAccess:  funcID,
                                                    ),
                                                    right: Identifier(
                                                        VarAccess:  mySelf,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: MEMINT_IsFrameBoundary,
                                        params: [
                                            Identifier(
                                                VarAccess:  ESP,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  ESP,
                                            op: PlusEq,
                                            exp: Identifier(
                                                VarAccess:  MEMINT_DoStackFrameSize,
                                            ),
                                        },
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  MEM_StackPos.position,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  loop,
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_SendToSpy,
                            params: [
                                Identifier(
                                    VarAccess:  zERR_TYPE_FAULT,
                                ),
                                String(
                                    [end of stacktrace],
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Var(
        [
            VarDeclaration {
                typ: int,
                name: MEMINT_ExceptionHandlerESP,
                array_size: None,
            },
        ],
    ),
    Var(
        [
            VarDeclaration {
                typ: int,
                name: MEMINT_TopPopPos,
                array_size: None,
            },
        ],
    ),
    Func(
        Function {
            name: MEMINT_ExceptionHandler,
            typ: void,
            params: [],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: invoked_once,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  invoked_once,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  invoked_once,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  true,
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_SendToSpy,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  zERR_TYPE_FAULT,
                                                    ),
                                                    String(
                                                        [start of stacktrace],
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_PrintStackTraceLine,
                                                params: [
                                                    Binary(
                                                        BinaryExpression {
                                                            op: Minus,
                                                            left: Identifier(
                                                                VarAccess:  MEMINT_TopPopPos,
                                                            ),
                                                            right: Identifier(
                                                                VarAccess:  MEM_Parser.stack_stack,
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: ESP,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  ESP,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEMINT_FindFrameBoundary,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  MEMINT_ExceptionHandlerESP,
                                                        ),
                                                        Int(
                                                            500,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    If(
                                        IfStatement {
                                            branches: [
                                                IfBranch {
                                                    cond: Identifier(
                                                        VarAccess:  ESP,
                                                    ),
                                                    body: [
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  ESP,
                                                                op: PlusEq,
                                                                exp: Identifier(
                                                                    VarAccess:  MEMINT_DoStackFrameSize,
                                                                ),
                                                            },
                                                        ),
                                                        VarDeclarations(
                                                            [
                                                                VarDeclaration {
                                                                    typ: int,
                                                                    name: loop,
                                                                    array_size: None,
                                                                },
                                                            ],
                                                        ),
                                                        Ass(
                                                            Assignment {
                                                                var: VarAccess:  loop,
                                                                op: Eq,
                                                                exp: Identifier(
                                                                    VarAccess:  MEM_StackPos.position,
                                                                ),
                                                            },
                                                        ),
                                                        Exp(
                                                            Call(
                                                                Call {
                                                                    func: MEMINT_PrintStackTraceLine,
                                                                    params: [
                                                                        Call(
                                                                            Call {
                                                                                func: MEM_ReadInt,
                                                                                params: [
                                                                                    Binary(
                                                                                        BinaryExpression {
                                                                                            op: Minus,
                                                                                            left: Identifier(
                                                                                                VarAccess:  ESP,
                                                                                            ),
                                                                                            right: Identifier(
                                                                                                VarAccess:  MEMINT_DoStackPopPosOffset,
                                                                                            ),
                                                                                        },
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                    ],
                                                                },
                                                            ),
                                                        ),
                                                        If(
                                                            IfStatement {
                                                                branches: [
                                                                    IfBranch {
                                                                        cond: Call(
                                                                            Call {
                                                                                func: MEMINT_IsFrameBoundary,
                                                                                params: [
                                                                                    Identifier(
                                                                                        VarAccess:  ESP,
                                                                                    ),
                                                                                ],
                                                                            },
                                                                        ),
                                                                        body: [
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  ESP,
                                                                                    op: PlusEq,
                                                                                    exp: Identifier(
                                                                                        VarAccess:  MEMINT_DoStackFrameSize,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                            Ass(
                                                                                Assignment {
                                                                                    var: VarAccess:  MEM_StackPos.position,
                                                                                    op: Eq,
                                                                                    exp: Identifier(
                                                                                        VarAccess:  loop,
                                                                                    ),
                                                                                },
                                                                            ),
                                                                        ],
                                                                    },
                                                                ],
                                                                else_branch: None,
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ],
                                            else_branch: None,
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_SendToSpy,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  zERR_TYPE_FAULT,
                                                    ),
                                                    String(
                                                        [end of stacktrace],
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ErrorBox,
                                                params: [
                                                    String(
                                                        Exception handler was invoked. Ikarus tried to print a Daedalus-Stacktrace to zSpy. Gothic will now crash and probably give you a stacktrace of its own.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_SetupExceptionHandler,
            typ: void,
            params: [],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  call,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_Open,
                                                params: [],
                                            },
                                        ),
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: handlerOffset,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  handlerOffset,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEM_GetFuncOffset,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  MEMINT_ExceptionHandler,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_1,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ASMINT_OP_movMemToEAX,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_4,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  MEM_Parser.stack_stackptr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_2,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ASMINT_OP_movEAXToMem,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_4,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  MEMINT_TopPopPos,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_2,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ASMINT_OP_movESPtoEAX,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_2,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ASMINT_OP_movEAXToMem,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_4,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  MEMINT_ExceptionHandlerESP,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  handlerOffset,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ConstDeclaration(
                                        ConstDeclaration {
                                            name: zCParser__DoStack_G1,
                                            typ: int,
                                            initializer: Int(
                                                7243264,
                                            ),
                                        },
                                    ),
                                    ConstDeclaration(
                                        ConstDeclaration {
                                            name: zCParser__DoStack_G2,
                                            typ: int,
                                            initializer: Int(
                                                7936352,
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__thiscall,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  contentParserAddress,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    Call(
                                                        Call {
                                                            func: MEMINT_SwitchG1G2,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  zCParser__DoStack_G1,
                                                                ),
                                                                Identifier(
                                                                    VarAccess:  zCParser__DoStack_G2,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ConstDeclaration(
                                        ConstDeclaration {
                                            name: zCParser__DoStack_SEH_G1,
                                            typ: int,
                                            initializer: Int(
                                                8146176,
                                            ),
                                        },
                                    ),
                                    ConstDeclaration(
                                        ConstDeclaration {
                                            name: zCParser__DoStack_SEH_G2,
                                            typ: int,
                                            initializer: Int(
                                                8562816,
                                            ),
                                        },
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: SEH,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  SEH,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEMINT_SwitchG1G2,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  zCParser__DoStack_SEH_G1,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  zCParser__DoStack_SEH_G2,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_1,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ASMINT_OP_jmp,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: ASM_4,
                                                params: [
                                                    Binary(
                                                        BinaryExpression {
                                                            op: Minus,
                                                            left: Identifier(
                                                                VarAccess:  SEH,
                                                            ),
                                                            right: Binary(
                                                                BinaryExpression {
                                                                    op: Plus,
                                                                    left: Call(
                                                                        Call {
                                                                            func: ASM_Here,
                                                                            params: [],
                                                                        },
                                                                    ),
                                                                    right: Int(
                                                                        4,
                                                                    ),
                                                                },
                                                            ),
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_Close,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                    ConstDeclaration(
                                        ConstDeclaration {
                                            name: zCParser__DoStack_SEH_Pusher_G1,
                                            typ: int,
                                            initializer: Binary(
                                                BinaryExpression {
                                                    op: Plus,
                                                    left: Int(
                                                        7243266,
                                                    ),
                                                    right: Int(
                                                        1,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                    ConstDeclaration(
                                        ConstDeclaration {
                                            name: zCParser__DoStack_SEH_Pusher_G2,
                                            typ: int,
                                            initializer: Binary(
                                                BinaryExpression {
                                                    op: Plus,
                                                    left: Int(
                                                        7936354,
                                                    ),
                                                    right: Int(
                                                        1,
                                                    ),
                                                },
                                            ),
                                        },
                                    ),
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: SEHPusher,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  SEHPusher,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEMINT_SwitchG1G2,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  zCParser__DoStack_SEH_Pusher_G1,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  zCParser__DoStack_SEH_Pusher_G2,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MemoryProtectionOverride,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  SEHPusher,
                                                    ),
                                                    Int(
                                                        4,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_WriteInt,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  SEHPusher,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  call,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_ReplaceLoggingFunctions,
            typ: void,
            params: [],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: init,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  init,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  init,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  true,
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Info,
                                                params: [
                                                    String(
                                                        This will be the last Ikarus message printed with PrintDebug and prefix 'U: Skript:'. Subsequent messages will be printed with prefix 'Q:'.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ReplaceFunc,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  MEM_SendToSpy,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  MEMINT_SendToSpy_Implementation,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Info,
                                                params: [
                                                    String(
                                                        Ikarus log functions now print in colour with prefix 'Q:'.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ReplaceFunc,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  MEM_PrintStackTrace,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  MEMINT_PrintStackTrace_Implementation,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_SetupExceptionHandler,
                                                params: [],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_ReadInt_,
            typ: void,
            params: [],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: i,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_WriteInt_,
            typ: void,
            params: [],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: i,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  i,
                        op: Eq,
                        exp: Identifier(
                            VarAccess:  i,
                        ),
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_InitFasterReadWrite,
            typ: void,
            params: [],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: MEMINT_HelperClass,
                            name: symb,
                            array_size: None,
                        },
                    ],
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_InitOverideFunc,
                            params: [
                                Identifier(
                                    VarAccess:  MEM_ReadInt_,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTok,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_OP_UN_PLUS,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTokPar,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHINST,
                                ),
                                Identifier(
                                    VarAccess:  symb,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTok,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_ASSIGNINST,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTokPar,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHINST,
                                ),
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHVAR,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTok,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_OP_UN_PLUS,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTok,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_RET,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ReplaceFunc,
                            params: [
                                Identifier(
                                    VarAccess:  MEM_ReadInt,
                                ),
                                Identifier(
                                    VarAccess:  MEM_ReadInt_,
                                ),
                            ],
                        },
                    ),
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: id,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  id,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_GetFuncID,
                                params: [
                                    Identifier(
                                        VarAccess:  MEM_WriteInt,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_InitOverideFunc,
                            params: [
                                Identifier(
                                    VarAccess:  MEM_WriteInt_,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTokPar,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHVAR,
                                ),
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  id,
                                        ),
                                        right: Int(
                                            2,
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTok,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_OP_IS,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTokPar,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHVAR,
                                ),
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  id,
                                        ),
                                        right: Int(
                                            1,
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTok,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_OP_IS,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTokPar,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHVAR,
                                ),
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  id,
                                        ),
                                        right: Int(
                                            2,
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTokPar,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHVAR,
                                ),
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  id,
                                        ),
                                        right: Int(
                                            1,
                                        ),
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTok,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_OP_UN_PLUS,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTokPar,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHINST,
                                ),
                                Identifier(
                                    VarAccess:  symb,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTok,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_ASSIGNINST,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTokPar,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHINST,
                                ),
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHVAR,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTok,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_OP_IS,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTok,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_RET,
                                ),
                            ],
                        },
                    ),
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: buf,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  buf,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_Alloc,
                                params: [
                                    Int(
                                        5,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteByte,
                            params: [
                                Identifier(
                                    VarAccess:  buf,
                                ),
                                Identifier(
                                    VarAccess:  zPAR_TOK_JUMP,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_WriteInt,
                            params: [
                                Binary(
                                    BinaryExpression {
                                        op: Plus,
                                        left: Identifier(
                                            VarAccess:  buf,
                                        ),
                                        right: Int(
                                            1,
                                        ),
                                    },
                                ),
                                Call(
                                    Call {
                                        func: MEM_GetFuncOffset,
                                        params: [
                                            Identifier(
                                                VarAccess:  MEM_WriteInt_,
                                            ),
                                        ],
                                    },
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_CopyBytes,
                            params: [
                                Identifier(
                                    VarAccess:  buf,
                                ),
                                Call(
                                    Call {
                                        func: MEM_GetFuncPtr,
                                        params: [
                                            Identifier(
                                                VarAccess:  MEM_WriteInt,
                                            ),
                                        ],
                                    },
                                ),
                                Int(
                                    5,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_InitFasterPushInst,
            typ: void,
            params: [],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: MEMINT_HelperClass,
                            name: symb,
                            array_size: None,
                        },
                    ],
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_InitOverideFunc,
                            params: [
                                Identifier(
                                    VarAccess:  MEMINT_StackPushInst,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTok,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_OP_UN_PLUS,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTokPar,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_PUSHINST,
                                ),
                                Identifier(
                                    VarAccess:  symb,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTok,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_ASSIGNINST,
                                ),
                            ],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_OfTok,
                            params: [
                                Identifier(
                                    VarAccess:  zPAR_TOK_RET,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_Alloc_,
            typ: int,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ele,
                    array_size: None,
                },
            ],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: size,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  size,
                        op: Eq,
                        exp: Int(
                            1,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: cAlloc_ptr,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  cAlloc_ptr,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEMINT_SwitchG1G2,
                                                    params: [
                                                        Int(
                                                            7712240,
                                                        ),
                                                        Int(
                                                            8078576,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  size,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ele,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ret,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__cdecl,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  cAlloc_ptr,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ret,
                            array_size: None,
                        },
                    ],
                ),
                ReturnStatement(
                    Some(
                        Unary(
                            UnaryExpression {
                                op: Plus,
                                right: Identifier(
                                    VarAccess:  ret,
                                ),
                            },
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_Free_,
            typ: void,
            params: [
                VarDeclaration {
                    typ: int,
                    name: ptr,
                    array_size: None,
                },
            ],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  ptr,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Warn,
                                                params: [
                                                    String(
                                                        MEM_Free: ptr is 0. Ignoring request.,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: call,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Call(
                                    Call {
                                        func: CALL_Begin,
                                        params: [
                                            Identifier(
                                                VarAccess:  call,
                                            ),
                                        ],
                                    },
                                ),
                                body: [
                                    VarDeclarations(
                                        [
                                            VarDeclaration {
                                                typ: int,
                                                name: free_ptr,
                                                array_size: None,
                                            },
                                        ],
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  free_ptr,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: MEMINT_SwitchG1G2,
                                                    params: [
                                                        Int(
                                                            7712111,
                                                        ),
                                                        Int(
                                                            8078540,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_IntParam,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: _@,
                                                            params: [
                                                                Identifier(
                                                                    VarAccess:  ptr,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL_PutRetValTo,
                                                params: [
                                                    Int(
                                                        0,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: CALL__cdecl,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  free_ptr,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  call,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: CALL_End,
                                                    params: [],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_ReplaceSlowFunctions,
            typ: void,
            params: [],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: init,
                        typ: int,
                        initializer: Int(
                            0,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Identifier(
                                            VarAccess:  init,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  init,
                                            op: Eq,
                                            exp: Identifier(
                                                VarAccess:  true,
                                            ),
                                        },
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_Free_,
                                                params: [
                                                    Call(
                                                        Call {
                                                            func: MEM_Alloc_,
                                                            params: [
                                                                Int(
                                                                    1,
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ReplaceFunc,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  MEM_Alloc,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  MEM_Alloc_,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ReplaceFunc,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  MEM_Free,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  MEM_Free_,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_InitFasterReadWrite,
                                                params: [],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_InitFasterPushInst,
                                                params: [],
                                            },
                                        ),
                                    ),
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEM_ReplaceFunc,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  _^,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  MEM_PtrToInst,
                                                    ),
                                                ],
                                            },
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_VersionError,
            typ: void,
            params: [],
            body: [
                ConstDeclaration(
                    ConstDeclaration {
                        name: G1,
                        typ: string,
                        initializer: String(
                            Gothic 1.08k,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: G2,
                        typ: string,
                        initializer: String(
                            der sogenannten 'Report-Version' von Gothic 2,
                        ),
                    },
                ),
                ConstDeclaration(
                    ConstDeclaration {
                        name: G2EN,
                        typ: string,
                        initializer: String(
                            the so-called 'Report-Version' of Gothic 2,
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: string,
                            name: str,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: String(
                            Diese Mod funktioniert nur mit ,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  GOTHIC_BASE_VERSION,
                                        ),
                                        right: Int(
                                            1,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  str,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: ConcatStrings,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  str,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  G1,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Ass(
                                    Assignment {
                                        var: VarAccess:  str,
                                        op: Eq,
                                        exp: Call(
                                            Call {
                                                func: ConcatStrings,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  str,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  G2,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            ],
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ConcatStrings,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                    String(
                                        , da sie FunktionalitÃ¤t aus dem Skriptpaket 'Ikarus' verwendet. Es ist wahrscheinlich, dass Gothic unmittelbar nach dieser Fehlermeldung abstÃ¼rzt. Die genannte Version von Gothic steht zum Beispiel auf worldofgothic.de zum Download bereit. Der merkwÃ¼rdige Charakter dieser Fehlermeldung ist leider nicht zu vermeiden. ### This mod only works with ,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: Eq,
                                        left: Identifier(
                                            VarAccess:  GOTHIC_BASE_VERSION,
                                        ),
                                        right: Int(
                                            1,
                                        ),
                                    },
                                ),
                                body: [
                                    Ass(
                                        Assignment {
                                            var: VarAccess:  str,
                                            op: Eq,
                                            exp: Call(
                                                Call {
                                                    func: ConcatStrings,
                                                    params: [
                                                        Identifier(
                                                            VarAccess:  str,
                                                        ),
                                                        Identifier(
                                                            VarAccess:  G1,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        },
                                    ),
                                ],
                            },
                        ],
                        else_branch: Some(
                            [
                                Ass(
                                    Assignment {
                                        var: VarAccess:  str,
                                        op: Eq,
                                        exp: Call(
                                            Call {
                                                func: ConcatStrings,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  str,
                                                    ),
                                                    Identifier(
                                                        VarAccess:  G2EN,
                                                    ),
                                                ],
                                            },
                                        ),
                                    },
                                ),
                            ],
                        ),
                    },
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  str,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: ConcatStrings,
                                params: [
                                    Identifier(
                                        VarAccess:  str,
                                    ),
                                    String(
                                        , because it uses parts of the script package 'Ikarus'. Gothic will probably crash immediatly after displaying this error message. Said version of Gothic is available for download at worldofgothic.com. The weirdness of this error message is unavoidable
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: Wld_InsertObject,
                            params: [
                                Identifier(
                                    VarAccess:  str,
                                ),
                                Identifier(
                                    VarAccess:  MEM_FARFARAWAY,
                                ),
                            ],
                        },
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEMINT_ReportVersionCheck,
            typ: int,
            params: [],
            body: [
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: val,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  val,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEMINT_SwitchG1G2,
                                params: [
                                    Unary(
                                        UnaryExpression {
                                            op: Minus,
                                            right: Int(
                                                521402937,
                                            ),
                                        },
                                    ),
                                    Int(
                                        504628679,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: ptr,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  ptr,
                        op: Eq,
                        exp: Int(
                            4198400,
                        ),
                    },
                ),
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Binary(
                                    BinaryExpression {
                                        op: NotEq,
                                        left: Call(
                                            Call {
                                                func: MEM_ReadInt,
                                                params: [
                                                    Identifier(
                                                        VarAccess:  ptr,
                                                    ),
                                                ],
                                            },
                                        ),
                                        right: Identifier(
                                            VarAccess:  val,
                                        ),
                                    },
                                ),
                                body: [
                                    Exp(
                                        Call(
                                            Call {
                                                func: MEMINT_VersionError,
                                                params: [],
                                            },
                                        ),
                                    ),
                                    ReturnStatement(
                                        Some(
                                            Identifier(
                                                VarAccess:  false,
                                            ),
                                        ),
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                ReturnStatement(
                    Some(
                        Identifier(
                            VarAccess:  true,
                        ),
                    ),
                ),
            ],
        },
    ),
    Func(
        Function {
            name: MEM_InitAll,
            typ: void,
            params: [],
            body: [
                If(
                    IfStatement {
                        branches: [
                            IfBranch {
                                cond: Unary(
                                    UnaryExpression {
                                        op: Negate,
                                        right: Call(
                                            Call {
                                                func: MEMINT_ReportVersionCheck,
                                                params: [],
                                            },
                                        ),
                                    },
                                ),
                                body: [
                                    ReturnStatement(
                                        None,
                                    ),
                                ],
                            },
                        ],
                        else_branch: None,
                    },
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_ReinitParser,
                            params: [],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_InitLabels,
                            params: [],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_InitGlobalInst,
                            params: [],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_GetAddress_Init,
                            params: [],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_InitStatArrs,
                            params: [],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: ASMINT_Init,
                            params: [],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_ReplaceLoggingFunctions,
                            params: [],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEMINT_ReplaceSlowFunctions,
                            params: [],
                        },
                    ),
                ),
                Exp(
                    Call(
                        Call {
                            func: MEM_InitRepeat,
                            params: [],
                        },
                    ),
                ),
                VarDeclarations(
                    [
                        VarDeclaration {
                            typ: int,
                            name: dump,
                            array_size: None,
                        },
                    ],
                ),
                Ass(
                    Assignment {
                        var: VarAccess:  dump,
                        op: Eq,
                        exp: Call(
                            Call {
                                func: MEM_GetFuncIDByOffset,
                                params: [
                                    Int(
                                        0,
                                    ),
                                ],
                            },
                        ),
                    },
                ),
            ],
        },
    ),
]
